import{_ as e}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as c,v as l,b as r,t as y,O as A,F as p,L as i,R as D,M as C,C as B,B as d}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const S=JSON.parse('{"title":"二叉树（下）","description":"","frontmatter":{"title":"二叉树（下）","author":"阿源","date":"2023/03/11 12:00","categories":["数据结构与算法"],"tags":["数据结构与算法","二叉树"]},"headers":[],"relativePath":"courses/algorithm/01-左程云算法基础/11-二叉树基本算法下.md","filePath":"courses/algorithm/01-左程云算法基础/11-二叉树基本算法下.md","lastUpdated":1691397650000}'),E={name:"courses/algorithm/01-左程云算法基础/11-二叉树基本算法下.md"},F=p("h1",{id:"二叉树-下",tabindex:"-1"},[i("二叉树（下） "),p("a",{class:"header-anchor",href:"#二叉树-下","aria-label":'Permalink to "二叉树（下）"'},"​")],-1),u=D(`<h2 id="_1-二叉树的层序遍历" tabindex="-1">1. 二叉树的层序遍历 <a class="header-anchor" href="#_1-二叉树的层序遍历" aria-label="Permalink to &quot;1. 二叉树的层序遍历&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Node</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">left;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">v</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> v;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node left;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">level</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Queue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">queue</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(head);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">queue.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> queue.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(cur.value);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (cur.left </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(cur.left);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (cur.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(cur.right);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Queue&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(head);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">			Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(cur.value);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur.left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cur.left);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cur.right);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_2-序列化" tabindex="-1">2. 序列化 <a class="header-anchor" href="#_2-序列化" aria-label="Permalink to &quot;2. 序列化&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Node</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">left;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">data</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> data;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node left;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="_2-1-前序序列化" tabindex="-1">2.1 前序序列化 <a class="header-anchor" href="#_2-1-前序序列化" aria-label="Permalink to &quot;2.1 前序序列化&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Queue</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">preSerial</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		Queue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">ans</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">pres</span><span style="color:#ADBAC7;">(head, ans);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ans;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">pres</span><span style="color:#ADBAC7;">(Node head, Queue</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> ans) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">			ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(String.</span><span style="color:#DCBDFB;">valueOf</span><span style="color:#ADBAC7;">(head.value));</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pres</span><span style="color:#ADBAC7;">(head.left, ans);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pres</span><span style="color:#ADBAC7;">(head.right, ans);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preSerial</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		Queue&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">pres</span><span style="color:#24292E;">(head, ans);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pres</span><span style="color:#24292E;">(Node head, Queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ans) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(head.value));</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pres</span><span style="color:#24292E;">(head.left, ans);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pres</span><span style="color:#24292E;">(head.right, ans);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 反序列化</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">buildByPreQueue</span><span style="color:#ADBAC7;">(Queue</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> prelist) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (prelist </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> prelist.</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">preb</span><span style="color:#ADBAC7;">(prelist);</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">preb</span><span style="color:#ADBAC7;">(Queue</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> prelist) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> prelist.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (value </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">head</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(Integer.</span><span style="color:#DCBDFB;">valueOf</span><span style="color:#ADBAC7;">(value));</span></span>
<span class="line"><span style="color:#ADBAC7;">		head.left </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">preb</span><span style="color:#ADBAC7;">(prelist);</span></span>
<span class="line"><span style="color:#ADBAC7;">		head.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">preb</span><span style="color:#ADBAC7;">(prelist);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> head;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 反序列化</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">buildByPreQueue</span><span style="color:#24292E;">(Queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> prelist) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (prelist </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> prelist.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preb</span><span style="color:#24292E;">(prelist);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">preb</span><span style="color:#24292E;">(Queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> prelist) {</span></span>
<span class="line"><span style="color:#24292E;">		String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prelist.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Node head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(Integer.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(value));</span></span>
<span class="line"><span style="color:#24292E;">		head.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preb</span><span style="color:#24292E;">(prelist);</span></span>
<span class="line"><span style="color:#24292E;">		head.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preb</span><span style="color:#24292E;">(prelist);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="_2-2-后序序列化" tabindex="-1">2.2 后序序列化 <a class="header-anchor" href="#_2-2-后序序列化" aria-label="Permalink to &quot;2.2 后序序列化&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Queue</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">posSerial</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		Queue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">ans</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">poss</span><span style="color:#ADBAC7;">(head, ans);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ans;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">poss</span><span style="color:#ADBAC7;">(Node head, Queue</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> ans) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">poss</span><span style="color:#ADBAC7;">(head.left, ans);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">poss</span><span style="color:#ADBAC7;">(head.right, ans);</span></span>
<span class="line"><span style="color:#ADBAC7;">			ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(String.</span><span style="color:#DCBDFB;">valueOf</span><span style="color:#ADBAC7;">(head.value));</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">posSerial</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		Queue&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">poss</span><span style="color:#24292E;">(head, ans);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">poss</span><span style="color:#24292E;">(Node head, Queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ans) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">poss</span><span style="color:#24292E;">(head.left, ans);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">poss</span><span style="color:#24292E;">(head.right, ans);</span></span>
<span class="line"><span style="color:#24292E;">			ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(head.value));</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">public static Node buildByPosQueue(Queue&lt;String&gt; poslist) {</span></span>
<span class="line"><span style="color:#adbac7;">		if (poslist == null || poslist.size() == 0) {</span></span>
<span class="line"><span style="color:#adbac7;">			return null;</span></span>
<span class="line"><span style="color:#adbac7;">		}</span></span>
<span class="line"><span style="color:#adbac7;">		// 左右中  -&gt;  stack(中右左)</span></span>
<span class="line"><span style="color:#adbac7;">		Stack&lt;String&gt; stack = new Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#adbac7;">		while (!poslist.isEmpty()) {</span></span>
<span class="line"><span style="color:#adbac7;">			stack.push(poslist.poll());</span></span>
<span class="line"><span style="color:#adbac7;">		}</span></span>
<span class="line"><span style="color:#adbac7;">		return posb(stack);</span></span>
<span class="line"><span style="color:#adbac7;">	}</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">	public static Node posb(Stack&lt;String&gt; posstack) {</span></span>
<span class="line"><span style="color:#adbac7;">		String value = posstack.pop();</span></span>
<span class="line"><span style="color:#adbac7;">		if (value == null) {</span></span>
<span class="line"><span style="color:#adbac7;">			return null;</span></span>
<span class="line"><span style="color:#adbac7;">		}</span></span>
<span class="line"><span style="color:#adbac7;">		Node head = new Node(Integer.valueOf(value));</span></span>
<span class="line"><span style="color:#adbac7;">		head.right = posb(posstack);</span></span>
<span class="line"><span style="color:#adbac7;">		head.left = posb(posstack);</span></span>
<span class="line"><span style="color:#adbac7;">		return head;</span></span>
<span class="line"><span style="color:#adbac7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public static Node buildByPosQueue(Queue&lt;String&gt; poslist) {</span></span>
<span class="line"><span style="color:#24292e;">		if (poslist == null || poslist.size() == 0) {</span></span>
<span class="line"><span style="color:#24292e;">			return null;</span></span>
<span class="line"><span style="color:#24292e;">		}</span></span>
<span class="line"><span style="color:#24292e;">		// 左右中  -&gt;  stack(中右左)</span></span>
<span class="line"><span style="color:#24292e;">		Stack&lt;String&gt; stack = new Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292e;">		while (!poslist.isEmpty()) {</span></span>
<span class="line"><span style="color:#24292e;">			stack.push(poslist.poll());</span></span>
<span class="line"><span style="color:#24292e;">		}</span></span>
<span class="line"><span style="color:#24292e;">		return posb(stack);</span></span>
<span class="line"><span style="color:#24292e;">	}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">	public static Node posb(Stack&lt;String&gt; posstack) {</span></span>
<span class="line"><span style="color:#24292e;">		String value = posstack.pop();</span></span>
<span class="line"><span style="color:#24292e;">		if (value == null) {</span></span>
<span class="line"><span style="color:#24292e;">			return null;</span></span>
<span class="line"><span style="color:#24292e;">		}</span></span>
<span class="line"><span style="color:#24292e;">		Node head = new Node(Integer.valueOf(value));</span></span>
<span class="line"><span style="color:#24292e;">		head.right = posb(posstack);</span></span>
<span class="line"><span style="color:#24292e;">		head.left = posb(posstack);</span></span>
<span class="line"><span style="color:#24292e;">		return head;</span></span>
<span class="line"><span style="color:#24292e;">	}</span></span></code></pre></div><h3 id="_2-3-层序遍历序列化" tabindex="-1">2.3 层序遍历序列化 <a class="header-anchor" href="#_2-3-层序遍历序列化" aria-label="Permalink to &quot;2.3  层序遍历序列化&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Queue</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">levelSerial</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		Queue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">ans</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">			ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(String.</span><span style="color:#DCBDFB;">valueOf</span><span style="color:#ADBAC7;">(head.value));</span></span>
<span class="line"><span style="color:#ADBAC7;">			Queue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">queue</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;</span><span style="color:#F47067;">Node</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">			queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(head);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">queue.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				head </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> queue.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// head 父   子</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head.left </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                    </span><span style="color:#768390;">// 如果左边孩子不为空，放到层序遍历的Queue</span></span>
<span class="line"><span style="color:#ADBAC7;">					ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(String.</span><span style="color:#DCBDFB;">valueOf</span><span style="color:#ADBAC7;">(head.left.value));</span></span>
<span class="line"><span style="color:#ADBAC7;">					queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(head.left);</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                    </span><span style="color:#768390;">// 为空直接序列化</span></span>
<span class="line"><span style="color:#ADBAC7;">					ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(String.</span><span style="color:#DCBDFB;">valueOf</span><span style="color:#ADBAC7;">(head.right.value));</span></span>
<span class="line"><span style="color:#ADBAC7;">					queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(head.right);</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">					ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ans;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">levelSerial</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		Queue&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(head.value));</span></span>
<span class="line"><span style="color:#24292E;">			Queue&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">			queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(head);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">				head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// head 父   子</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head.left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 如果左边孩子不为空，放到层序遍历的Queue</span></span>
<span class="line"><span style="color:#24292E;">					ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(head.left.value));</span></span>
<span class="line"><span style="color:#24292E;">					queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(head.left);</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 为空直接序列化</span></span>
<span class="line"><span style="color:#24292E;">					ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(head.right.value));</span></span>
<span class="line"><span style="color:#24292E;">					queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(head.right);</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 反序列化	</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">buildByLevelQueue</span><span style="color:#ADBAC7;">(Queue</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">String</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> levelList) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (levelList </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> levelList.</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 建一个空节点 String-&gt;Integer</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">head</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">generateNode</span><span style="color:#ADBAC7;">(levelList.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">		Queue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">queue</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;</span><span style="color:#F47067;">Node</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(head);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">node</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">queue.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			node </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> queue.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			node.left </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">generateNode</span><span style="color:#ADBAC7;">(levelList.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">			node.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">generateNode</span><span style="color:#ADBAC7;">(levelList.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (node.left </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(node.left);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (node.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(node.right);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> head;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">generateNode</span><span style="color:#ADBAC7;">(String val) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (val </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(Integer.</span><span style="color:#DCBDFB;">valueOf</span><span style="color:#ADBAC7;">(val));</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 反序列化	</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">buildByLevelQueue</span><span style="color:#24292E;">(Queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> levelList) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (levelList </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> levelList.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 建一个空节点 String-&gt;Integer</span></span>
<span class="line"><span style="color:#24292E;">		Node head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateNode</span><span style="color:#24292E;">(levelList.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		Queue&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(head);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Node node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">			node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			node.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateNode</span><span style="color:#24292E;">(levelList.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">			node.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateNode</span><span style="color:#24292E;">(levelList.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node.left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(node.left);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(node.right);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">generateNode</span><span style="color:#24292E;">(String val) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (val </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(Integer.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(val));</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_3-实战-leetcode431" tabindex="-1">3. 实战：LeetCode431 <a class="header-anchor" href="#_3-实战-leetcode431" aria-label="Permalink to &quot;3. 实战：LeetCode431&quot;">​</a></h2><p>将N叉树编码为二叉树</p><p>难题</p><h2 id="_4-福利函数-打印一颗二叉树" tabindex="-1">4. 福利函数：打印一颗二叉树 <a class="header-anchor" href="#_4-福利函数-打印一颗二叉树" aria-label="Permalink to &quot;4. 福利函数：打印一颗二叉树&quot;">​</a></h2><p>不用掌握</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printTree</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Binary Tree:&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">printInOrder</span><span style="color:#ADBAC7;">(head, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;H&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printInOrder</span><span style="color:#ADBAC7;">(Node head, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> height, String to, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> len) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">printInOrder</span><span style="color:#ADBAC7;">(head.right, height </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;v&quot;</span><span style="color:#ADBAC7;">, len);</span></span>
<span class="line"><span style="color:#ADBAC7;">		String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">val</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> to </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> head.value </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> to;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">lenM</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> val.</span><span style="color:#DCBDFB;">length</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">lenL</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (len </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> lenM) </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">lenR</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> len </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> lenM </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> lenL;</span></span>
<span class="line"><span style="color:#ADBAC7;">		val </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getSpace</span><span style="color:#ADBAC7;">(lenL) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> val </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getSpace</span><span style="color:#ADBAC7;">(lenR);</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getSpace</span><span style="color:#ADBAC7;">(height </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> len) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> val);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">printInOrder</span><span style="color:#ADBAC7;">(head.left, height </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;^&quot;</span><span style="color:#ADBAC7;">, len);</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> String </span><span style="color:#DCBDFB;">getSpace</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> num) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">space</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		StringBuffer</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">buf</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">StringBuffer</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> num; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			buf.</span><span style="color:#DCBDFB;">append</span><span style="color:#ADBAC7;">(space);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> buf.</span><span style="color:#DCBDFB;">toString</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printTree</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Binary Tree:&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">printInOrder</span><span style="color:#24292E;">(head, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;H&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">17</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printInOrder</span><span style="color:#24292E;">(Node head, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> height, String to, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">printInOrder</span><span style="color:#24292E;">(head.right, height </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;v&quot;</span><span style="color:#24292E;">, len);</span></span>
<span class="line"><span style="color:#24292E;">		String val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> head.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> to;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> lenM </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> lenL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> lenM) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> lenR </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> lenM </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> lenL;</span></span>
<span class="line"><span style="color:#24292E;">		val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSpace</span><span style="color:#24292E;">(lenL) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSpace</span><span style="color:#24292E;">(lenR);</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getSpace</span><span style="color:#24292E;">(height </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> len) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> val);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">printInOrder</span><span style="color:#24292E;">(head.left, height </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;^&quot;</span><span style="color:#24292E;">, len);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getSpace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num) {</span></span>
<span class="line"><span style="color:#24292E;">		String space </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		StringBuffer buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuffer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> num; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			buf.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(space);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> buf.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_5-二叉树最宽的层有多少个节点" tabindex="-1">5. 二叉树最宽的层有多少个节点 <a class="header-anchor" href="#_5-二叉树最宽的层有多少个节点" aria-label="Permalink to &quot;5. 二叉树最宽的层有多少个节点&quot;">​</a></h2><p>cur_end:当前一层的最后一个节点</p><p>next_end:下一层的最后一个节点</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Node</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">left;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">data</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> data;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node left;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">maxWidthNoMap</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Queue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">queue</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(head);</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">curEnd</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head; </span><span style="color:#768390;">// 当前层，最右节点是谁</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">nextEnd</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 下一层，最右节点是谁</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">max</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">curLevelNodes</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 当前层的节点数</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">queue.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> queue.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (cur.left </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(cur.left);</span></span>
<span class="line"><span style="color:#ADBAC7;">				nextEnd </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (cur.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(cur.right);</span></span>
<span class="line"><span style="color:#ADBAC7;">				nextEnd </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			curLevelNodes</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (cur </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> curEnd) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				max </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">max</span><span style="color:#ADBAC7;">(max, curLevelNodes);</span></span>
<span class="line"><span style="color:#ADBAC7;">				curLevelNodes </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				curEnd </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nextEnd;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> max;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">maxWidthNoMap</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Queue&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(head);</span></span>
<span class="line"><span style="color:#24292E;">		Node curEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head; </span><span style="color:#6A737D;">// 当前层，最右节点是谁</span></span>
<span class="line"><span style="color:#24292E;">		Node nextEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 下一层，最右节点是谁</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> curLevelNodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 当前层的节点数</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">			Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur.left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cur.left);</span></span>
<span class="line"><span style="color:#24292E;">				nextEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cur.right);</span></span>
<span class="line"><span style="color:#24292E;">				nextEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.right;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			curLevelNodes</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> curEnd) {</span></span>
<span class="line"><span style="color:#24292E;">				max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(max, curLevelNodes);</span></span>
<span class="line"><span style="color:#24292E;">				curLevelNodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				curEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextEnd;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> max;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_6-给二叉树的某个节点-返回该节点的后继节点" tabindex="-1">6. 给二叉树的某个节点，返回该节点的后继节点 <a class="header-anchor" href="#_6-给二叉树的某个节点-返回该节点的后继节点" aria-label="Permalink to &quot;6. 给二叉树的某个节点，返回该节点的后继节点&quot;">​</a></h2><p>中序遍历 找到X节点的下一个节点 O(N) 不合适</p><ul><li>如果查找的节点有右子数，后继一定在右树的最左节点上</li><li>无右子树，直到我父亲的左孩子是我 或 父亲为NULL的时候停止</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Node</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">left;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">right;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">parent;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">data</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> data;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node left;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node right;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node parent;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">getSuccessorNode</span><span style="color:#ADBAC7;">(Node node) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (node </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> node;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (node.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getLeftMost</span><span style="color:#ADBAC7;">(node.right);</span></span>
<span class="line"><span style="color:#ADBAC7;">		} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">// 无右子树</span></span>
<span class="line"><span style="color:#ADBAC7;">			Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">parent</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> node.parent;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (parent </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> parent.right </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> node) { </span><span style="color:#768390;">// 当前节点是其父亲节点右孩子</span></span>
<span class="line"><span style="color:#ADBAC7;">				node </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> parent;</span></span>
<span class="line"><span style="color:#ADBAC7;">				parent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> node.parent;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> parent;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">getLeftMost</span><span style="color:#ADBAC7;">(Node node) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (node </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> node;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (node.left </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			node </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> node.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> node;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">getSuccessorNode</span><span style="color:#24292E;">(Node node) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> node;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLeftMost</span><span style="color:#24292E;">(node.right);</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 无右子树</span></span>
<span class="line"><span style="color:#24292E;">			Node parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.parent;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> parent.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> node) { </span><span style="color:#6A737D;">// 当前节点是其父亲节点右孩子</span></span>
<span class="line"><span style="color:#24292E;">				node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent;</span></span>
<span class="line"><span style="color:#24292E;">				parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.parent;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> parent;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">getLeftMost</span><span style="color:#24292E;">(Node node) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> node;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (node.left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.left;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> node;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_7-微软面试题" tabindex="-1">7. 微软面试题 <a class="header-anchor" href="#_7-微软面试题" aria-label="Permalink to &quot;7. 微软面试题&quot;">​</a></h2><p>一条纸</p><ul><li>折一次，为 凹1</li><li>折两次，为 凹2 凹1 凸2</li><li>折三次，为 凹3 凹2 凸3 凹1 凹3 凸2 凸3</li></ul><p>为二叉树的中序遍历</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printAllFolds</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> N) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">process</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, N, </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#768390;">// 当前你来了一个节点，脑海中想象的！</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#768390;">// 这个节点在第i层，一共有N层，N固定不变的</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#768390;">// 这个节点如果是凹的话，down = T</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#768390;">// 这个节点如果是凸的话，down = F</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#768390;">// 函数的功能：中序打印以你想象的节点为头的整棵树！</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">process</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> i, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> N, </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;"> down) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> N) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">process</span><span style="color:#ADBAC7;">(i </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, N, </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">(down </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;凹 &quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;凸 &quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">process</span><span style="color:#ADBAC7;">(i </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, N, </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] args) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">N</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">printAllFolds</span><span style="color:#ADBAC7;">(N);</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printAllFolds</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, N, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 当前你来了一个节点，脑海中想象的！</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 这个节点在第i层，一共有N层，N固定不变的</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 这个节点如果是凹的话，down = T</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 这个节点如果是凸的话，down = F</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 函数的功能：中序打印以你想象的节点为头的整棵树！</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> down) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, N, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(down </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;凹 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;凸 &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, N, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">printAllFolds</span><span style="color:#24292E;">(N);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>​</p>`,36);function h(s,g,v,b,f,N){const o=e,t=C("ClientOnly");return l(),r("div",null,[F,y(t,null,{default:A(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),u])}const L=c(E,[["render",h]]);export{S as __pageData,L as default};
