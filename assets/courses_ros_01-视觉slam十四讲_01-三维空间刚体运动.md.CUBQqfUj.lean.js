import{_ as k}from"./chunks/ArticleMetadata.B30-49ud.js";import{_ as e,C as r,c as d,o as t,k as l,G as g,P as o,a as y,w as A,b as c,e as D}from"./chunks/framework.CZWML48V.js";import"./chunks/md5.DoRRH4_b.js";const _=JSON.parse('{"title":"三维空间刚体运动","description":"","frontmatter":{"title":"三维空间刚体运动","author":"阿源","date":"2023/11/24 15:59","categories":["SLAM"],"tags":["视觉slam十四讲","SLAM"]},"headers":[],"relativePath":"courses/ros/01-视觉slam十四讲/01-三维空间刚体运动.md","filePath":"courses/ros/01-视觉slam十四讲/01-三维空间刚体运动.md","lastUpdated":1713341239000}'),C={name:"courses/ros/01-视觉slam十四讲/01-三维空间刚体运动.md"};function F(i,s,B,m,E,u){const p=k,h=r("ClientOnly");return t(),d("div",null,[s[0]||(s[0]=l("h1",{id:"三维空间刚体运动",tabindex:"-1"},[y("三维空间刚体运动 "),l("a",{class:"header-anchor",href:"#三维空间刚体运动","aria-label":'Permalink to "三维空间刚体运动"'},"​")],-1)),g(h,null,{default:A(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(t(),c(p,{key:0,article:i.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),s[1]||(s[1]=o(`<h2 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h2><p>理解三维空间的刚体运动描述方式：旋转矩阵、变换矩阵、四元数和欧拉角。</p><p>掌握 Eigen 库的矩阵、几何模块使用方法。</p><h2 id="旋转矩阵" tabindex="-1">旋转矩阵 <a class="header-anchor" href="#旋转矩阵" aria-label="Permalink to &quot;旋转矩阵&quot;">​</a></h2><h3 id="点和向量-坐标系" tabindex="-1">点和向量，坐标系 <a class="header-anchor" href="#点和向量-坐标系" aria-label="Permalink to &quot;点和向量，坐标系&quot;">​</a></h3><p>我们现在要考虑刚体，它不光有位置，还有自身的姿态。相机也可以看成三维空间的刚体，于是位置是指相机在空间中的哪个地方，而姿态则是指相机的朝向。</p><p>向量是线性空间中的一个元素，可以把它想象成从原点指向某处的一个箭头 。只有当我们指定这个三维空间中的某个坐标系时，才可以谈论该向量在此坐标系下的坐标，也就是找到若干个实数对应这个向量。</p><p>如果我们确定一个坐标系，也就是一个线性空间的基 (e1，e2， e3)，那就可以谈论向量 a 在这组基下的坐标了：</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124124711.png" alt=""></p><p>所以这个坐标的具体取值，一个是和向量本身有关，第二也和坐标系的选取有关。</p><p>向量的内积: 描述向量间的投影关系</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124125050.png" alt=""></p><p>向量的外积: 描述向量的旋转</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124125106.png" alt=""></p><p>对于外积，我们引入了 ^ 符号，把 a 写成一个矩阵。事实上是一个反对称矩阵 （a^）。请记住！</p><h3 id="坐标系间的欧氏变换" tabindex="-1">坐标系间的欧氏变换 <a class="header-anchor" href="#坐标系间的欧氏变换" aria-label="Permalink to &quot;坐标系间的欧氏变换&quot;">​</a></h3><p>我们同样可以描述两个坐标系之间的旋转关系，再加上平移，统称为坐标系之间的<strong>变换</strong>关系</p><p>相机运动是一个刚体运动，它保证了同一个向量在各个坐标系下的长度和夹角都不会发生变化。这种变换称为欧氏变换。 一个欧式变换由一个旋转和一个平移组成.</p><p>我们设某个单位正交基(e1，e2;，e3) 经过一次旋转，变成了 (e′ 1，e′ 2;，e′ 3)。那么，对于同一个向量 a（注意该向量并没有随着坐标系的旋转而发生运动），它在两个坐标系下的坐标为 [a1， a2;，a3]T 和 [a′ 1，a′ 2， a′ 3]T。根据坐标的定义，有：</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124132841.png" alt=""></p><p>我们对上面等式左右同时左乘[e′ 1T，e′ 2T，e′ 3T]T，那么左边的系数变成了单位矩阵</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124130425.png" alt=""></p><p>这个矩阵由两组基之间的内积组成，刻画了旋转前后同一个向量的坐标变换关系。只要旋转是一样的，那么这个矩阵也是一样的。 矩阵 R 描述了旋转本身。因此它又称为<strong>旋转矩阵</strong>。</p><p>旋转矩阵它是一个行列式为 1 的正交矩阵 反之，行列式为 1 的正交矩阵也是一个旋转矩阵。 旋转矩阵的集合定义如下：</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124132448.png" alt=""></p><p>SO(n) 是特殊正交群（Special Orthogonal Group）的意思。SO(3) 就是三维空间的旋转 。换句话说， <strong>旋转矩阵可以描述相机的旋转</strong>。</p><p>由于旋转矩阵为正交阵，它的逆（即转置）描述了一个相反的旋转。</p><p>在欧氏变换中，除了旋转之外还有一个平移。考虑世界坐标系中的向量 a，经过一次旋转（用 R 描述）和一次平移 t 后，得到了 a′，那么把旋转和平移合到一起，有</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124132504.png" alt=""></p><p>我们用一个旋转矩阵 R 和一个平移向量 t 完整地描述了一个欧氏空间的坐标变换关系。</p><h3 id="变换矩阵与齐次坐标" tabindex="-1">变换矩阵与齐次坐标 <a class="header-anchor" href="#变换矩阵与齐次坐标" aria-label="Permalink to &quot;变换矩阵与齐次坐标&quot;">​</a></h3><p>上述变换还存在一个小问题：这里的变换关系不是一个线性关系。</p><p>假设我们进行了两次变换： R1; t1 和 R2; t2，在变换多次之后会过于复杂。因此，我们要引入<strong>齐次坐标</strong>和<strong>变换矩阵</strong>重写下式</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124131656.png" alt=""></p><p>技巧：我们把一个三维向量的末尾添加 1，变成了四维向量，称为<strong>齐次坐标</strong>。我们可以把旋转和平移写在一个矩阵里面，使得整个关系变成了线性关系。 矩阵 T 称为<strong>变换矩阵</strong>（TransformMatrix）</p><p><strong>齐次坐标</strong>：它是射影几何里的概念。通过添加最后一维，我们用四个实数描述了一个三维向量。在 齐次坐标中，某个点 x 的每个分量同乘一个非零常数 k 后， <strong>仍然表示的是同一个点</strong>。</p><p>但当最后一项不为零时，我们总可以把所有坐标除以最后一项，强制最后一项为 1，从而得到一个点唯一的坐标表示（也就是转换成<strong>非齐次坐标</strong>):</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124132217.png" alt=""></p><p>依靠齐次坐标和变换矩阵，两次变换的累加就可以有很好的形式</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124132632.png" alt=""></p><p>区分齐次和非齐次坐标的符号令我们厌烦。 直接把它写成 b = Ta 的样子，默认其中是齐次坐标了</p><p>关于变换矩阵 T，它具有比较特别的结构：左上角为旋转矩阵，右侧为平移向量，左下角为 0 向量，右下角为 1。这种矩阵又称为特殊欧氏群（Special Euclidean Group）：</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124132910.png" alt=""></p><p>当我们写 Ta 时，使用的是齐次坐标（不然没法计算）。而写 Ra 时，使用的是非齐次坐标。</p><h2 id="eigen" tabindex="-1">Eigen <a class="header-anchor" href="#eigen" aria-label="Permalink to &quot;Eigen&quot;">​</a></h2><p>Eigen是一个 C++ 开源线性代数库。它提供了快速的有关矩阵的线性代数运算，还包括解方程等功能。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> libeigen3-dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> updatedb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">locate</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> eigen3</span></span></code></pre></div><p>Eigen 特殊之处在于，它是一个纯用头文件搭建起来的库（这非常神奇！）。这意味着你只能找到它的头文件，而没有.so 或.a 那样的二进制文件。</p><h2 id="旋转向量和欧拉角" tabindex="-1">旋转向量和欧拉角 <a class="header-anchor" href="#旋转向量和欧拉角" aria-label="Permalink to &quot;旋转向量和欧拉角&quot;">​</a></h2><h3 id="旋转向量" tabindex="-1">旋转向量 <a class="header-anchor" href="#旋转向量" aria-label="Permalink to &quot;旋转向量&quot;">​</a></h3><p>有了旋转矩阵来描述旋转，有了变换矩阵描述一个六自由度的三维刚体运动，是不是已经足够了呢？</p><p>我们希望有一种方式能够紧凑地描述旋转和平移。对于坐标系的旋转，我们知道，任意旋转都可以用一个旋转轴和一个旋转角来刻画。</p><p>于是，我们可以使用一个向量，其方向与旋转轴一致，而长度等于旋转角。这种向量，称为<strong>旋转向量</strong>（或轴角， AxisAngle）。这种表示法只需一个三维向量即可描述旋转。事实上，旋转向量就是我们下章准备介绍的李代数。</p><p>由<strong>旋转向量到旋转矩阵</strong>的过程由罗德里格斯公式（Rodrigues’s Formula ）表明</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124142408.png" alt=""></p><p>旋转矩阵到旋转向量的转换：</p><p>旋转角：</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124142513.png" alt=""></p><p>转轴 n 是矩阵 R 特征值 1 对应的特征向量。求解此方程，再归一化，就得到了旋转轴。</p><h3 id="欧拉角" tabindex="-1">欧拉角 <a class="header-anchor" href="#欧拉角" aria-label="Permalink to &quot;欧拉角&quot;">​</a></h3><p>欧拉角则提供了一种非常直观的方式来描述旋转——它使用了<strong>三个分离的转角</strong>，把一个旋转分解成三次绕不同轴的旋转。</p><p>所以欧拉角也存在着不同的定义方法。比如说，当我先绕 X 轴旋转，再绕 Y 轴，最后绕 Z 轴，就得到了一个 XYZ 轴的旋转。</p><p>绕旋转之后的 X 轴旋转，得到滚转角 roll</p><p>绕旋转之后的 Y 轴旋转，得到俯仰角 pitch</p><p>绕物体的 Z 轴旋转，得到偏航角 yaw</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124143051.png" alt=""></p><p>欧拉角的一个重大缺点是会碰到著名的万向锁问题（Gimbal Lock‹）：在俯仰角为±90◦ 时，第一次旋转与第三次旋转将使用同一个轴，使得系统丢失了一个自由度（由三次旋转变成了两次旋转）。</p><h2 id="四元数" tabindex="-1">四元数 <a class="header-anchor" href="#四元数" aria-label="Permalink to &quot;四元数&quot;">​</a></h2><h3 id="四元数的定义" tabindex="-1">四元数的定义 <a class="header-anchor" href="#四元数的定义" aria-label="Permalink to &quot;四元数的定义&quot;">​</a></h3><p>为什么需要四元数: 对于三维旋转,找不到<strong>不带奇异性的三维向量描述方式</strong>。因此引入四元数。 四元数是一种<strong>扩展的复数</strong>,<strong>既是紧凑的,也没有奇异性</strong>.</p><p>旋转矩阵用九个量描述三自由度的旋转，具有冗余性；欧拉角和旋转向量是紧凑的，但具有奇异性。 事实上，我们找不到不带奇异性的三维向量描述方式 。</p><p>四元数（Quaternion）。四元数是 Hamilton 找到的一种扩展的复数. 它既是紧凑的，也没有奇异性。如果说缺点的话，四元数不够直观，其运算稍为复杂一些。一个四元数 q 拥有一个实部和三个虚部。</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124144123.png" alt=""></p><p>有时人们也用一个标量和一个向量来表达四元数 ：q = [s , v]</p><p>s 称为四元数的实部，而 v 称为它的虚部。如果一个四元数虚部为 0，称之为<strong>实四元数</strong>。反之，若它的实部为 0，称之为<strong>虚四元数</strong>。</p><p>四元数与旋转角度的关系:</p><p>在二维情况下，任意一个旋转都可以用单位复数来描述,乘i就是绕i轴旋转90°。 在三维情况下，任意一个旋转都可以用单位四元数来描述,乘i就是绕i轴旋转180°。 假设某个旋转是绕单位向量 n = [nx，ny，nz]T进行了角度为 θ 的旋转，那么这个旋转的四元数形式为： （从旋转向量到单位四元数）</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124144959.png" alt=""></p><p>单位四元数到旋转向量:</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124145044.png" alt=""></p><p>因此，在四元数中， 任意的旋转都可以由两个互为相反数的四元数表示。</p><h3 id="四元数的运算" tabindex="-1">四元数的运算 <a class="header-anchor" href="#四元数的运算" aria-label="Permalink to &quot;四元数的运算&quot;">​</a></h3><h3 id="四元数表示旋转" tabindex="-1">四元数表示旋转 <a class="header-anchor" href="#四元数表示旋转" aria-label="Permalink to &quot;四元数表示旋转&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124145324.png" alt=""></p><p>把三维空间点用一个虚四元数来描述：</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124145349.png" alt=""></p><p>把旋转用单位四元数q 表示:</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124145417.png" alt=""></p><p>旋转后的点p ′ 可表示为</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/ros/slam_14/20231124145515.png" alt=""></p><h2 id="eigen-几何模块" tabindex="-1">Eigen 几何模块 <a class="header-anchor" href="#eigen-几何模块" aria-label="Permalink to &quot;Eigen 几何模块&quot;">​</a></h2><p>位置：slambook/ch3/useGeometry/useGeometry.cpp</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>• 旋转矩阵（3 × 3）： Eigen::Matrix3d。</span></span>
<span class="line"><span>• 旋转向量（3 × 1）： Eigen::AngleAxisd。</span></span>
<span class="line"><span>• 欧拉角（3 × 1）： Eigen::Vector3d。</span></span>
<span class="line"><span>• 四元数（4 × 1）： Eigen::Quaterniond。</span></span>
<span class="line"><span>• 欧氏变换矩阵（4 × 4）： Eigen::Isometry3d。</span></span>
<span class="line"><span>• 仿射变换（4 × 4）： Eigen::Afne3d。</span></span>
<span class="line"><span>• 射影变换（4 × 4）： Eigen::Projective3d。</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;cmath&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;Eigen/Core&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;Eigen/Geometry&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Eigen</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 本程序演示了 Eigen 几何模块的使用方法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // Eigen/Geometry 模块提供了各种旋转和平移的表示</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 3D 旋转矩阵直接使用 Matrix3d 或 Matrix3f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Matrix3d rotation_matrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Matrix3d</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 旋转向量使用 AngleAxis, 它底层不直接是Matrix，但运算可以当作矩阵（因为重载了运算符）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  AngleAxisd </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">rotation_vector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(M_PI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Vector3d</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">     //沿 Z 轴旋转 45 度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">precision</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;rotation matrix =</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> rotation_vector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   //用matrix()转换成矩阵</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 也可以直接赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  rotation_matrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> rotation_vector.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toRotationMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 用 AngleAxis 可以进行坐标变换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Vector3d </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Vector3d v_rotated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> rotation_vector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;(1,0,0) after rotation (by angle axis) = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v_rotated.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">transpose</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 或者用旋转矩阵</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  v_rotated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> rotation_matrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;(1,0,0) after rotation (by matrix) = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v_rotated.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">transpose</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 欧拉角: 可以将旋转矩阵直接转换成欧拉角</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Vector3d euler_angles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> rotation_matrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eulerAngles</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // ZYX顺序，即yaw-pitch-roll顺序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;yaw pitch roll = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> euler_angles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">transpose</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 欧氏变换矩阵使用 Eigen::Isometry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Isometry3d T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Isometry3d</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                // 虽然称为3d，实质上是4＊4的矩阵</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  T.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(rotation_vector);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                                     // 按照rotation_vector进行旋转</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  T.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pretranslate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Vector3d</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                     // 把平移向量设成(1,3,4)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Transform matrix = </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> T.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 用变换矩阵进行坐标变换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Vector3d v_transformed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                              // 相当于R*v+t</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;v tranformed = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v_transformed.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">transpose</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 对于仿射和射影变换，使用 Eigen::Affine3d 和 Eigen::Projective3d 即可，略</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 四元数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 可以直接把AngleAxis赋值给四元数，反之亦然</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Quaterniond q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Quaterniond</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(rotation_vector);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;quaternion from rotation vector = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">coeffs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">transpose</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">       &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   // 请注意coeffs的顺序是(x,y,z,w),w为实部，前三者为虚部</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 也可以把旋转矩阵赋给它</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Quaterniond</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(rotation_matrix);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;quaternion from rotation matrix = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">coeffs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">transpose</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 使用四元数旋转一个向量，使用重载的乘法即可</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  v_rotated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 注意数学上是qvq^{-1}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;(1,0,0) after rotation = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> v_rotated.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">transpose</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 用常规向量乘法表示，则应该如下计算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;should be equal to &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (q </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Quaterniond</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> q.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">inverse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">coeffs</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">transpose</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="显示运动轨迹" tabindex="-1">显示运动轨迹 <a class="header-anchor" href="#显示运动轨迹" aria-label="Permalink to &quot;显示运动轨迹&quot;">​</a></h3><p>trajectory.txt存了一个轨迹这些数据代表什么</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>1305031526.671473 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 1.000000000</span></span>
<span class="line"><span>1305031526.707547 0.002883195 -0.004662100 -0.002254304 0.011409802 0.010697415 0.002189494 0.999875307</span></span></code></pre></div><p>让我们来解释一下这些数据：</p><ul><li>第一列（1305031526.671473）可能是时间戳，表示数据记录的时间。</li><li>接下来的6个数字（0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000）可能代表位置信息，比如 x、y、z 坐标。</li><li>最后一个数字（1.000000000）可能代表方向信息，比如物体的朝向或者姿态。</li></ul><p>第二行的数据也是类似的，时间戳不同，但是后面的数据格式相似。</p><p>根据这个假设，这些数据可能代表了一个物体在空间中随时间变化的位置和方向信息。这种类型的数据在机器人学、运动学、物体跟踪、飞行器控制等领域中经常被使用。</p>`,101))])}const q=e(C,[["render",F]]);export{_ as __pageData,q as default};
