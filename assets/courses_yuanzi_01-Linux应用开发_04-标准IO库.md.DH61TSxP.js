import{_ as k}from"./chunks/ArticleMetadata.Lj5xScwM.js";import{_ as p,C as r,c as d,o as h,k as n,G as o,P as g,a as c,w as y,b as D,e as F}from"./chunks/framework.CLT-Xekf.js";import"./chunks/md5.Dgu2YaMo.js";const v=JSON.parse('{"title":"标准IO库","description":"","frontmatter":{"title":"标准IO库","author":"阿源","date":"2023/10/08 08:38","categories":["Linux应用编程"],"tags":["嵌入式","Linux应用编程"]},"headers":[],"relativePath":"courses/yuanzi/01-Linux应用开发/04-标准IO库.md","filePath":"courses/yuanzi/01-Linux应用开发/04-标准IO库.md","lastUpdated":1713341239000}'),A={name:"courses/yuanzi/01-Linux应用开发/04-标准IO库.md"};function u(i,s,f,C,m,E){const l=k,e=r("ClientOnly");return h(),d("div",null,[s[0]||(s[0]=n("h1",{id:"标准io库",tabindex:"-1"},[c("标准IO库 "),n("a",{class:"header-anchor",href:"#标准io库","aria-label":'Permalink to "标准IO库"'},"​")],-1)),o(e,null,{default:y(()=>{var a,t;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((t=i.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(h(),D(l,{key:0,article:i.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),s[1]||(s[1]=g(`<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>       标准 I/O 却有它自己的优势，标准 I/O 和文件 I/O 的区别如下：</p><ul><li>虽然标准 I/O 和文件 I/O 都是 C 语言函数，但是标准 I/O 是标准 C 库函数，而文件 I/O 则是 Linux系统调用；</li><li>标准 I/O 是由文件 I/O 封装而来，标准 I/O 内部实际上是调用文件 I/O 来完成实际操作的；</li><li>可移植性：标准 I/O 相比于文件 I/O 具有更好的可移植性，通常对于不同的操作系统，其内核向应用层提供的系统调用往往都是不同</li><li>性能、效率： 标准 I/O 库在用户空间维护了自己的 stdio 缓冲区， 所以标准 I/O 是带有缓存的，而文件 I/O 在用户空间是不带有缓存的，所以在性能、效率上，标准 I/O 要优于文件 I/O。</li></ul><h2 id="file指针" tabindex="-1">FILE指针 <a class="header-anchor" href="#file指针" aria-label="Permalink to &quot;FILE指针&quot;">​</a></h2><p>       FILE 是一个结构体数据类型，它包含了标准 I/O 库函数为管理文件所需要的所有信息，包括用于实际I/O 的文件描述符、指向文件缓冲区的指针、缓冲区的长度、当前缓冲区中的字节数以及出错标志等。 FILE数据结构定义在标准 I/O 库函数头文件 stdio.h 中。</p><h2 id="标准输入、标准输出和标准错误" tabindex="-1">标准输入、标准输出和标准错误 <a class="header-anchor" href="#标准输入、标准输出和标准错误" aria-label="Permalink to &quot;标准输入、标准输出和标准错误&quot;">​</a></h2><p>       用户通过标准输入设备与系统进行交互， 进程将从标准输入（stdin）文件中得到输入数据，将正常输出数据（譬如程序中 printf 打印输出的字符串） 输出到标准输出（stdout） 文件，而将错误信息（譬如函数调用报错打印的信息）输出到标准错误（stderr） 文件。</p><p>       每个进程启动之后都会默认打开标准输入、标准输出以及标准错误， 得到三个文件描述符， 即 0、 1、2， 其中 0 代表标准输入、 1 代表标准输出、 2 代表标准错误； 在应用编程中可以使用宏 STDIN_FILENO、STDOUT_FILENO 和STDERR_FILENO 分别代表 0、 1、 2，这些宏定义在 unistd.h 头文件中：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* Standard file descriptors. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> STDIN_FILENO</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> /* Standard input. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> STDOUT_FILENO1</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> /* Standard output. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> STDERR_FILENO2</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> /* Standard error output. */</span></span></code></pre></div><p>       在标准 I/O 中，可以使用 stdin、 stdout、 stderr 来表示标准输入、标准输出和标准错误</p><h2 id="打开文件-fopen" tabindex="-1">打开文件 fopen() <a class="header-anchor" href="#打开文件-fopen" aria-label="Permalink to &quot;打开文件 fopen()&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fopen</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>path： 参数 path 指向文件路径，可以是绝对路径、也可以是相对路径。 mode： 参数 mode 指定了对该文件的读写权限，是一个字符串，稍后介绍。 返回值： 调用成功返回一个指向 FILE 类型对象的指针（FILE *），该指针与打开或创建的文件相关联，后续的标准 I/O 操作将围绕 FILE 指针进行。 如果失败则返回 NULL，并设置 errno 以指示错误原因。</p><h3 id="新建文件的权限" tabindex="-1">新建文件的权限 <a class="header-anchor" href="#新建文件的权限" aria-label="Permalink to &quot;新建文件的权限&quot;">​</a></h3><p>       由 fopen()函数原型可知， fopen()只有两个参数 path 和 mode，不同于 open()系统调用，它并没有任何一个参数来指定新建文件的权限。 当参数 mode 取值为&quot;w&quot;、 &quot;w+&quot;、 &quot;a&quot;、 &quot;a+&quot;之一时，如果参数 path 指定的文件不存在，则会创建该文件，那么新的文件的权限是如何确定的呢？        虽然调用 fopen()函数新建文件时无法手动指定文件的权限，但却有一个默认值：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH (0666)</span></span></code></pre></div><p>案例： 使用只读方式打开文件</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fopen</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;r&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h2 id="读文件和写文件" tabindex="-1">读文件和写文件 <a class="header-anchor" href="#读文件和写文件" aria-label="Permalink to &quot;读文件和写文件&quot;">​</a></h2><p>       我们便可以使用 fread()和 fwrite()库函数对文件进行读、写操作了，函数原型如下所示：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fread</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> nmemb</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fwrite</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> nmemb</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>库函数 fread()用于读取文件数据，其参数和返回值含义如下：</p><ul><li>ptr： fread()将读取到的数据存放在参数 ptr 指向的缓冲区中；</li><li>size： fread()从文件读取 nmemb 个数据项，每一个数据项的大小为 size 个字节，所以总共读取的数据大小为 nmemb * size 个字节。</li><li>nmemb： 参数 nmemb 指定了读取数据项的个数。</li><li>stream： FILE 指针。</li><li>返回值： 调用成功时返回读取到的数据项的数目（数据项数目并不等于实际读取的字节数，除非参数size 等于 1）；</li></ul><h2 id="fseek-定位" tabindex="-1">fseek 定位 <a class="header-anchor" href="#fseek-定位" aria-label="Permalink to &quot;fseek 定位&quot;">​</a></h2><p>       库函数 fseek()的作用类似于 2.7 小节所学习的系统调用 lseek()， 用于设置文件读写位置偏移量， lseek()用于文件 I/O，而库函数 fseek()则用于标准 I/O，其函数原型如下所示：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fseek</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> offset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> whence</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>譬如将文件的读写位置移动到文件开头处： fseek(file, 0, SEEK_SET); 将文件的读写位置移动到文件末尾： fseek(file, 0, SEEK_END); 将文件的读写位置移动到 100 个字节偏移量处： fseek(file, 100, SEEK_SET);</p><h3 id="ftell-函数" tabindex="-1">ftell()函数 <a class="header-anchor" href="#ftell-函数" aria-label="Permalink to &quot;ftell()函数&quot;">​</a></h3><p>库函数 ftell()可用于获取文件当前的读写位置偏移量</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ftell</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>参数 stream 指向对应的文件，函数调用成功将返回当前读写位置偏移量；调用失败将返回-1，并会设置errno 以指示错误原因</p><h2 id="检查或复位状态" tabindex="-1">检查或复位状态 <a class="header-anchor" href="#检查或复位状态" aria-label="Permalink to &quot;检查或复位状态&quot;">​</a></h2><p>       调用 fread()读取数据时，如果返回值小于参数 nmemb 所指定的值，表示发生了错误或者已经到了文件末尾（文件结束 end-of-file），但 fread()无法具体确定是哪一种情况； 在这种情况下，可以通过判断错误标志或 end-of-file 标志来确定具体的情况。</p><h3 id="feof-函数" tabindex="-1">feof()函数 <a class="header-anchor" href="#feof-函数" aria-label="Permalink to &quot;feof()函数&quot;">​</a></h3><p>       库函数 feof()用于测试参数 stream 所指文件的 end-of-file 标志，如果 end-of-file 标志被设置了，则调用feof()函数将返回一个非零值，如果 end-of-file 标志没有被设置，则返回 0。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> feof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><h3 id="ferror-函数" tabindex="-1">ferror()函数 <a class="header-anchor" href="#ferror-函数" aria-label="Permalink to &quot;ferror()函数&quot;">​</a></h3><p>       库函数 ferror()用于测试参数 stream 所指文件的错误标志，如果错误标志被设置了，则调用 ferror()函数将返回一个非零值，如果错误标志没有被设置，则返回 0。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ferror</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><h3 id="clearerr-函数" tabindex="-1">clearerr()函数 <a class="header-anchor" href="#clearerr-函数" aria-label="Permalink to &quot;clearerr()函数&quot;">​</a></h3><p>       库函数 clearerr()用于清除 end-of-file 标志和错误标志，当调用 feof()或 ferror()校验这些标志后，通常需要清除这些标志，避免下次校验时使用到的是上一次设置的值，此时可以手动调用 clearerr()函数清除标志。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> clearerr</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h2 id="格式化-i-o" tabindex="-1">格式化 I/O <a class="header-anchor" href="#格式化-i-o" aria-label="Permalink to &quot;格式化 I/O&quot;">​</a></h2><h3 id="格式化输出" tabindex="-1">格式化输出 <a class="header-anchor" href="#格式化输出" aria-label="Permalink to &quot;格式化输出&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> dprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> sprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> snprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ...);</span></span></code></pre></div><h3 id="格式化输入" tabindex="-1">格式化输入 <a class="header-anchor" href="#格式化输入" aria-label="Permalink to &quot;格式化输入&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> scanf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fscanf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> sscanf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ...);</span></span></code></pre></div><h2 id="i-o-缓冲" tabindex="-1">I/O 缓冲 <a class="header-anchor" href="#i-o-缓冲" aria-label="Permalink to &quot;I/O 缓冲&quot;">​</a></h2><p>       出于速度和效率的考虑，系统 I/O 调用（即文件 I/O， open、 read、 write 等）和标准 C 语言库 I/O 函数（即标准 I/O 函数）在操作磁盘文件时会对数据进行缓冲</p><h3 id="控制文件-i-o-内核缓冲的系统调用" tabindex="-1">控制文件 I/O 内核缓冲的系统调用 <a class="header-anchor" href="#控制文件-i-o-内核缓冲的系统调用" aria-label="Permalink to &quot;控制文件 I/O 内核缓冲的系统调用&quot;">​</a></h3><p>       Linux 中提供了一些系统调用可用于控制文件 I/O 内核缓冲，包括系统调用 sync()、 syncfs()、 fsync()以及 fdatasync()。</p><p>       系统调用 fsync()将参数 fd 所指文件的内容数据和元数据写入磁盘， 只有在对磁盘设备的写入操作完成之后， fsync()函数才会返回，其函数原型如下所示：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;unistd.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fsync</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>       系统调用 fdatasync()与 fsync()类似，不同之处在于 fdatasync()仅将参数 fd 所指文件的内容数据写入磁盘，并不包括文件的元数据；同样，只有在对磁盘设备的写入操作完成之后， fdatasync()函数才会返回。</p><p>       系统调用 sync()会将所有文件 I/O 内核缓冲区中的文件内容数据和元数据全部更新到磁盘设备中，该函数没有参数、也无返回值，意味着它不是对某一个指定的文件进行数据更新，而是刷新所有文件 I/O 内核缓冲区。</p><h2 id="文件描述符与-file-指针互转" tabindex="-1">文件描述符与 FILE 指针互转 <a class="header-anchor" href="#文件描述符与-file-指针互转" aria-label="Permalink to &quot;文件描述符与 FILE 指针互转&quot;">​</a></h2><p>       在应用程序中，在同一个文件上执行 I/O 操作时，还可以将文件 I/O（系统调用 I/O）与标准 I/O 混合使用，这个时候我们就需要将文件描述符和 FILE 指针对象之间进行转换，此时可以借助于库函数 fdopen()、fileno()来完成</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fileno</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fdopen</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> fd</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div>`,58))])}const O=p(A,[["render",u]]);export{v as __pageData,O as default};
