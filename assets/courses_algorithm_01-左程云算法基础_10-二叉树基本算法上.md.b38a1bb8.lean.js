import{_ as t}from"./chunks/ArticleMetadata.e10718d6.js";import{_ as c,v as l,b as r,E as y,O as A,F as p,L as i,R as D,M as C,C as B,B as E}from"./chunks/framework.2aeb816e.js";import"./chunks/md5.772bbdf1.js";const w=JSON.parse('{"title":"二叉树（上）","description":"","frontmatter":{"title":"二叉树（上）","author":"阿源","date":"2023/03/10 12:00","categories":["数据结构与算法"],"tags":["数据结构与算法","二叉树"]},"headers":[],"relativePath":"courses/algorithm/01-左程云算法基础/10-二叉树基本算法上.md","filePath":"courses/algorithm/01-左程云算法基础/10-二叉树基本算法上.md","lastUpdated":1691397650000}'),d={name:"courses/algorithm/01-左程云算法基础/10-二叉树基本算法上.md"},u=p("h1",{id:"二叉树-上",tabindex:"-1"},[i("二叉树（上） "),p("a",{class:"header-anchor",href:"#二叉树-上","aria-label":'Permalink to "二叉树（上）"'},"​")],-1),F=D(`<h2 id="_1-找到链表第一个进入环的位置" tabindex="-1">1. 找到链表第一个进入环的位置 <a class="header-anchor" href="#_1-找到链表第一个进入环的位置" aria-label="Permalink to &quot;1. 找到链表第一个进入环的位置&quot;">​</a></h2><p>一个快指针走两步，一个慢指针走一步，当两个指针相遇时，为进入环的位置</p><p>然后快指针回到头结点，快慢指针都走一步，直到相遇</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Node</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">next;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">data</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> data;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node next;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 找到链表第一个入环节点，如果无环，返回null</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">getLoopNode</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> head.next </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> head.next.next </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// n1 慢  n2 快</span></span>
<span class="line"><span style="color:#ADBAC7;">        Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">slow</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head.next; </span><span style="color:#768390;">// n1 -&gt; slow</span></span>
<span class="line"><span style="color:#ADBAC7;">        Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">fast</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head.next.next; </span><span style="color:#768390;">// n2 -&gt; fast</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (slow </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> fast) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (fast.next </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> fast.next.next </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">            fast </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> fast.next.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">            slow </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> slow.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// slow fast  相遇</span></span>
<span class="line"><span style="color:#ADBAC7;">        fast </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head; </span><span style="color:#768390;">// n2 -&gt; walk again from head</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (slow </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> fast) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            slow </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> slow.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">            fast </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> fast.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> slow;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 找到链表第一个入环节点，如果无环，返回null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">getLoopNode</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> head.next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> head.next.next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// n1 慢  n2 快</span></span>
<span class="line"><span style="color:#24292E;">        Node slow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head.next; </span><span style="color:#6A737D;">// n1 -&gt; slow</span></span>
<span class="line"><span style="color:#24292E;">        Node fast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head.next.next; </span><span style="color:#6A737D;">// n2 -&gt; fast</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (slow </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> fast) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fast.next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> fast.next.next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            fast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fast.next.next;</span></span>
<span class="line"><span style="color:#24292E;">            slow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slow.next;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// slow fast  相遇</span></span>
<span class="line"><span style="color:#24292E;">        fast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head; </span><span style="color:#6A737D;">// n2 -&gt; walk again from head</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (slow </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> fast) {</span></span>
<span class="line"><span style="color:#24292E;">            slow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> slow.next;</span></span>
<span class="line"><span style="color:#24292E;">            fast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fast.next;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> slow;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h2 id="_2-两个单链表-找到两个链表相交的位置" tabindex="-1">2. 两个单链表，找到两个链表相交的位置 <a class="header-anchor" href="#_2-两个单链表-找到两个链表相交的位置" aria-label="Permalink to &quot;2. 两个单链表，找到两个链表相交的位置&quot;">​</a></h2><ul><li>两个链表都无环 或者 都有环，才会相交</li><li>一个有环一个无环一定为NULL</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 如果两个链表都无环，返回第一个相交节点，如果不想交，返回null</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">noLoop</span><span style="color:#ADBAC7;">(Node head1, Node head2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head1 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> head2 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur1</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head1;</span></span>
<span class="line"><span style="color:#ADBAC7;">        Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head2;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">n</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur1.next </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            n</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">            cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur1.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur2.next </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            n</span><span style="color:#F47067;">--</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">            cur2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur2.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (cur1 </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> cur2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// n  :  链表1长度减去链表2长度的值</span></span>
<span class="line"><span style="color:#ADBAC7;">        cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> n </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> head1 </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> head2; </span><span style="color:#768390;">// 谁长，谁的头变成cur1</span></span>
<span class="line"><span style="color:#ADBAC7;">        cur2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur1 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> head1 </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> head2 </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> head1; </span><span style="color:#768390;">// 谁短，谁的头变成cur2</span></span>
<span class="line"><span style="color:#ADBAC7;">        n </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">abs</span><span style="color:#ADBAC7;">(n);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (n </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            n</span><span style="color:#F47067;">--</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">            cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur1.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur1 </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> cur2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur1.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">            cur2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur2.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> cur1;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 如果两个链表都无环，返回第一个相交节点，如果不想交，返回null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">noLoop</span><span style="color:#24292E;">(Node head1, Node head2) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> head2 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Node cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head1;</span></span>
<span class="line"><span style="color:#24292E;">        Node cur2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head2;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur1.next </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            n</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur1.next;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur2.next </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            n</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            cur2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur2.next;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> cur2) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// n  :  链表1长度减去链表2长度的值</span></span>
<span class="line"><span style="color:#24292E;">        cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> head1 </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> head2; </span><span style="color:#6A737D;">// 谁长，谁的头变成cur1</span></span>
<span class="line"><span style="color:#24292E;">        cur2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> head1 </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> head2 </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> head1; </span><span style="color:#6A737D;">// 谁短，谁的头变成cur2</span></span>
<span class="line"><span style="color:#24292E;">        n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(n);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            n</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur1.next;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> cur2) {</span></span>
<span class="line"><span style="color:#24292E;">            cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur1.next;</span></span>
<span class="line"><span style="color:#24292E;">            cur2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur2.next;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cur1;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 两个有环链表，返回第一个相交节点，如果不想交返回null</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">bothLoop</span><span style="color:#ADBAC7;">(Node head1, Node loop1, Node head2, Node loop2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur1</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (loop1 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> loop2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head1;</span></span>
<span class="line"><span style="color:#ADBAC7;">            cur2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head2;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">n</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur1 </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> loop1) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                n</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">                cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur1.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur2 </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> loop2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                n</span><span style="color:#F47067;">--</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">                cur2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur2.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">            cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> n </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> head1 </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> head2;</span></span>
<span class="line"><span style="color:#ADBAC7;">            cur2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur1 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> head1 </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> head2 </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> head1;</span></span>
<span class="line"><span style="color:#ADBAC7;">            n </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">abs</span><span style="color:#ADBAC7;">(n);</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (n </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                n</span><span style="color:#F47067;">--</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">                cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur1.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur1 </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> cur2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur1.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">                cur2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur2.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> cur1;</span></span>
<span class="line"><span style="color:#ADBAC7;">        } </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> loop1.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur1 </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> loop1) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (cur1 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> loop2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> loop1;</span></span>
<span class="line"><span style="color:#ADBAC7;">                }</span></span>
<span class="line"><span style="color:#ADBAC7;">                cur1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur1.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 两个有环链表，返回第一个相交节点，如果不想交返回null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">bothLoop</span><span style="color:#24292E;">(Node head1, Node loop1, Node head2, Node loop2) {</span></span>
<span class="line"><span style="color:#24292E;">        Node cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Node cur2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loop1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> loop2) {</span></span>
<span class="line"><span style="color:#24292E;">            cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head1;</span></span>
<span class="line"><span style="color:#24292E;">            cur2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head2;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> loop1) {</span></span>
<span class="line"><span style="color:#24292E;">                n</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur1.next;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur2 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> loop2) {</span></span>
<span class="line"><span style="color:#24292E;">                n</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                cur2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur2.next;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> head1 </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> head2;</span></span>
<span class="line"><span style="color:#24292E;">            cur2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> head1 </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> head2 </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> head1;</span></span>
<span class="line"><span style="color:#24292E;">            n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(n);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                n</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur1.next;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> cur2) {</span></span>
<span class="line"><span style="color:#24292E;">                cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur1.next;</span></span>
<span class="line"><span style="color:#24292E;">                cur2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur2.next;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cur1;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loop1.next;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> loop1) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> loop2) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loop1;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                cur1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur1.next;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><ul><li>最终情况</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">getIntersectNode</span><span style="color:#ADBAC7;">(Node head1, Node head2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head1 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> head2 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">loop1</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getLoopNode</span><span style="color:#ADBAC7;">(head1); </span><span style="color:#768390;">//找到进入节点</span></span>
<span class="line"><span style="color:#ADBAC7;">        Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">loop2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getLoopNode</span><span style="color:#ADBAC7;">(head2);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (loop1 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> loop2 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">noLoop</span><span style="color:#ADBAC7;">(head1, head2);</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (loop1 </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> loop2 </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">bothLoop</span><span style="color:#ADBAC7;">(head1, loop1, head2, loop2);</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">getIntersectNode</span><span style="color:#24292E;">(Node head1, Node head2) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> head2 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Node loop1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLoopNode</span><span style="color:#24292E;">(head1); </span><span style="color:#6A737D;">//找到进入节点</span></span>
<span class="line"><span style="color:#24292E;">        Node loop2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getLoopNode</span><span style="color:#24292E;">(head2);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loop1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> loop2 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">noLoop</span><span style="color:#24292E;">(head1, head2);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loop1 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> loop2 </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bothLoop</span><span style="color:#24292E;">(head1, loop1, head2, loop2);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h2 id="_3-二叉树" tabindex="-1">3. 二叉树 <a class="header-anchor" href="#_3-二叉树" aria-label="Permalink to &quot;3. 二叉树&quot;">​</a></h2><p>先序遍历，中序遍历，后续遍历</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Node</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">left;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">v</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> v;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node left;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_4-非递归实现先序-中序-后序" tabindex="-1">4. 非递归实现先序，中序，后序 <a class="header-anchor" href="#_4-非递归实现先序-中序-后序" aria-label="Permalink to &quot;4. 非递归实现先序，中序，后序&quot;">​</a></h2><h3 id="_4-1-先序" tabindex="-1">4.1 先序 <a class="header-anchor" href="#_4-1-先序" aria-label="Permalink to &quot;4.1 先序&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">pre</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;pre-order: &quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			Stack</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">stack</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> Stack&lt;</span><span style="color:#F47067;">Node</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">			stack.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(head);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">stack.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				head </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> stack.</span><span style="color:#DCBDFB;">pop</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">				System.out.</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">(head.value </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					stack.</span><span style="color:#DCBDFB;">push</span><span style="color:#ADBAC7;">(head.right);</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head.left </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					stack.</span><span style="color:#DCBDFB;">push</span><span style="color:#ADBAC7;">(head.left);</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pre</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pre-order: &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			Stack&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; stack </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">			stack.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(head);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">stack.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">				head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">				System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(head.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(head.right);</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head.left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(head.left);</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="_4-2-中序" tabindex="-1">4.2 中序 <a class="header-anchor" href="#_4-2-中序" aria-label="Permalink to &quot;4.2 中序&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">in</span><span style="color:#ADBAC7;">(Node cur) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;in-order: &quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (cur </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			Stack</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">stack</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> Stack&lt;</span><span style="color:#F47067;">Node</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">stack.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> cur </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (cur </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					stack.</span><span style="color:#DCBDFB;">push</span><span style="color:#ADBAC7;">(cur);</span></span>
<span class="line"><span style="color:#ADBAC7;">					cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">					cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> stack.</span><span style="color:#DCBDFB;">pop</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">					System.out.</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">(cur.value </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">					cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">in</span><span style="color:#24292E;">(Node cur) {</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in-order: &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			Stack&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; stack </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">stack.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> cur </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(cur);</span></span>
<span class="line"><span style="color:#24292E;">					cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">					System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(cur.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">					cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.right;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="_4-3-后序" tabindex="-1">4.3 后序 <a class="header-anchor" href="#_4-3-后序" aria-label="Permalink to &quot;4.3 后序&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">public static void pos1(Node head) {</span></span>
<span class="line"><span style="color:#adbac7;">		System.out.print(&quot;pos-order: &quot;);</span></span>
<span class="line"><span style="color:#adbac7;">		if (head != null) {</span></span>
<span class="line"><span style="color:#adbac7;">			Stack&lt;Node&gt; s1 = new Stack&lt;Node&gt;();</span></span>
<span class="line"><span style="color:#adbac7;">			Stack&lt;Node&gt; s2 = new Stack&lt;Node&gt;();</span></span>
<span class="line"><span style="color:#adbac7;">			s1.push(head);</span></span>
<span class="line"><span style="color:#adbac7;">			while (!s1.isEmpty()) {</span></span>
<span class="line"><span style="color:#adbac7;">				head = s1.pop(); // 头 右 左</span></span>
<span class="line"><span style="color:#adbac7;">				s2.push(head);</span></span>
<span class="line"><span style="color:#adbac7;">				if (head.left != null) {</span></span>
<span class="line"><span style="color:#adbac7;">					s1.push(head.left);</span></span>
<span class="line"><span style="color:#adbac7;">				}</span></span>
<span class="line"><span style="color:#adbac7;">				if (head.right != null) {</span></span>
<span class="line"><span style="color:#adbac7;">					s1.push(head.right);</span></span>
<span class="line"><span style="color:#adbac7;">				}</span></span>
<span class="line"><span style="color:#adbac7;">			}</span></span>
<span class="line"><span style="color:#adbac7;">			// 左 右 头</span></span>
<span class="line"><span style="color:#adbac7;">			while (!s2.isEmpty()) {</span></span>
<span class="line"><span style="color:#adbac7;">				System.out.print(s2.pop().value + &quot; &quot;);</span></span>
<span class="line"><span style="color:#adbac7;">			}</span></span>
<span class="line"><span style="color:#adbac7;">		}</span></span>
<span class="line"><span style="color:#adbac7;">		System.out.println();</span></span>
<span class="line"><span style="color:#adbac7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public static void pos1(Node head) {</span></span>
<span class="line"><span style="color:#24292e;">		System.out.print(&quot;pos-order: &quot;);</span></span>
<span class="line"><span style="color:#24292e;">		if (head != null) {</span></span>
<span class="line"><span style="color:#24292e;">			Stack&lt;Node&gt; s1 = new Stack&lt;Node&gt;();</span></span>
<span class="line"><span style="color:#24292e;">			Stack&lt;Node&gt; s2 = new Stack&lt;Node&gt;();</span></span>
<span class="line"><span style="color:#24292e;">			s1.push(head);</span></span>
<span class="line"><span style="color:#24292e;">			while (!s1.isEmpty()) {</span></span>
<span class="line"><span style="color:#24292e;">				head = s1.pop(); // 头 右 左</span></span>
<span class="line"><span style="color:#24292e;">				s2.push(head);</span></span>
<span class="line"><span style="color:#24292e;">				if (head.left != null) {</span></span>
<span class="line"><span style="color:#24292e;">					s1.push(head.left);</span></span>
<span class="line"><span style="color:#24292e;">				}</span></span>
<span class="line"><span style="color:#24292e;">				if (head.right != null) {</span></span>
<span class="line"><span style="color:#24292e;">					s1.push(head.right);</span></span>
<span class="line"><span style="color:#24292e;">				}</span></span>
<span class="line"><span style="color:#24292e;">			}</span></span>
<span class="line"><span style="color:#24292e;">			// 左 右 头</span></span>
<span class="line"><span style="color:#24292e;">			while (!s2.isEmpty()) {</span></span>
<span class="line"><span style="color:#24292e;">				System.out.print(s2.pop().value + &quot; &quot;);</span></span>
<span class="line"><span style="color:#24292e;">			}</span></span>
<span class="line"><span style="color:#24292e;">		}</span></span>
<span class="line"><span style="color:#24292e;">		System.out.println();</span></span>
<span class="line"><span style="color:#24292e;">	}</span></span></code></pre></div>`,21);function h(s,g,b,v,f,m){const o=t,e=C("ClientOnly");return l(),r("div",null,[u,y(e,null,{default:A(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):E("",!0)]}),_:1}),F])}const _=c(d,[["render",h]]);export{w as __pageData,_ as default};
