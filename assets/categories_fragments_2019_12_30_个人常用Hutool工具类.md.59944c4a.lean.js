import{_ as i}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as A,v as l,b as D,F as t,L as p,t as o,O as C,R as u,M as e,C as B,B as F}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const O=JSON.parse('{"title":"个人常用 Hutool 工具类","description":"","frontmatter":{"title":"个人常用 Hutool 工具类","author":"查尔斯","date":"2019/12/30 19:00","isOriginal":false,"categories":["碎片化知识点"],"tags":["Java","Java工具类","Hutool"]},"headers":[],"relativePath":"categories/fragments/2019/12/30/个人常用Hutool工具类.md","filePath":"categories/fragments/2019/12/30/个人常用Hutool工具类.md","lastUpdated":1692494959000}'),d={name:"categories/fragments/2019/12/30/个人常用Hutool工具类.md"},b={id:"个人常用-hutool工-具类",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#个人常用-hutool工-具类","aria-label":'Permalink to "个人常用 Hutool工 具类 <Badge text="持续更新" type="warning" />"'},"​",-1),g=u(`<p><strong>C：</strong> 技术圈常说一句：“你要会写轮子，也要会用轮子”。工作的时候，为了提升开发效率，节约开发时间，也常常提醒自己不要重复造 “轮子”。</p><p>每次开启一个新项目，除了搭建项目必备环境之外，必然要整理一下之前项目沉淀下来的工具类，然后 C V 大法。习惯了一些工具类后，新项目中用不了或是换一下总是感觉缺点什么，再加上每个人都有自己遇到或沉淀的工具类，项目中遇到工具类重复也是很常见的事儿。</p><p>话说回来，这些工具类就是开发中必不可少的一种 “轮子”。对于大多数同学，受限于技术，轮子可能勉强写的出来，但是写的是不是够好，够完善，这质量就没法保证了。</p><p>谁都是从一开始过来的，但好在有这么一些有志之士，将经年累月写过的轮子反复整理，反复打磨，推出了一个项目，它就是 Hutool。</p><p>接下来，笔者就带大家学习一些个人常用的 Hutool 工具类。</p><h2 id="判断相等" tabindex="-1">判断相等 <a class="header-anchor" href="#判断相等" aria-label="Permalink to &quot;判断相等&quot;">​</a></h2><h3 id="传统用法" tabindex="-1">传统用法 <a class="header-anchor" href="#传统用法" aria-label="Permalink to &quot;传统用法&quot;">​</a></h3><p>判断两个内容相等很常见了吧？</p><p>Java 7 的时候，官方还在 java.util 包下给提供了一个 Objects 工具类，源代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * Returns {@code true} if the arguments are equal to each other</span></span>
<span class="line"><span style="color:#768390;"> * and {@code false} otherwise.</span></span>
<span class="line"><span style="color:#768390;"> * Consequently, if both arguments are {@code null}, {@code true}</span></span>
<span class="line"><span style="color:#768390;"> * is returned and if exactly one argument is {@code null}, {@code</span></span>
<span class="line"><span style="color:#768390;"> * false} is returned.  Otherwise, equality is determined by using</span></span>
<span class="line"><span style="color:#768390;"> * the {@link Object#equals equals} method of the first</span></span>
<span class="line"><span style="color:#768390;"> * argument.</span></span>
<span class="line"><span style="color:#768390;"> *</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">a</span><span style="color:#768390;"> an object</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">b</span><span style="color:#768390;"> an object to be compared with {@code a} for equality</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@return</span><span style="color:#768390;"> {@code true} if the arguments are equal to each other</span></span>
<span class="line"><span style="color:#768390;"> * and {@code false} otherwise</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@see</span><span style="color:#768390;"> Object#equals(Object)</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">(Object a, Object b) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> (a </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> b) </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> (a </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> a.</span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">(b));</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Returns {@code true} if the arguments are equal to each other</span></span>
<span class="line"><span style="color:#6A737D;"> * and {@code false} otherwise.</span></span>
<span class="line"><span style="color:#6A737D;"> * Consequently, if both arguments are {@code null}, {@code true}</span></span>
<span class="line"><span style="color:#6A737D;"> * is returned and if exactly one argument is {@code null}, {@code</span></span>
<span class="line"><span style="color:#6A737D;"> * false} is returned.  Otherwise, equality is determined by using</span></span>
<span class="line"><span style="color:#6A737D;"> * the {@link Object#equals equals} method of the first</span></span>
<span class="line"><span style="color:#6A737D;"> * argument.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">a</span><span style="color:#6A737D;"> an object</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">b</span><span style="color:#6A737D;"> an object to be compared with {@code a} for equality</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> {@code true} if the arguments are equal to each other</span></span>
<span class="line"><span style="color:#6A737D;"> * and {@code false} otherwise</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@see</span><span style="color:#6A737D;"> Object#equals(Object)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object a, Object b) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(b));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这的确可以解决 80% 的判断相等问题了，也可以有效避免 NPE 问题。但是笔者比较贪心，所以一直使用的 Hutool 提供的 ObjectUtil 工具类来判断相等。</p><h3 id="objectutil" tabindex="-1">ObjectUtil <a class="header-anchor" href="#objectutil" aria-label="Permalink to &quot;ObjectUtil&quot;">​</a></h3><p>在 Java 中，判断不同内容是否相等有多种情况，这在《阿里巴巴Java开发手册》中也有强调，笔者用 ObjectUtil 分别示范下不同情况的使用方法。</p><div class="warning custom-block"><p class="custom-block-title">《阿里巴巴Java开发手册》</p><p>【强制】所有整型包装类对象之间值的比较，全部使用 equals 方法比较。 说明：对于 Integer var = ? 在-128 至 127 之间的赋值，Integer 对象是在 IntegerCache.cache 产生， 会复用已有对象，这个区间内的 Integer 值可以直接使用==进行判断，但是这个区间之外的所有数据，都 会在堆上产生，并不会复用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</p></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(ObjectUtil.</span><span style="color:#DCBDFB;">equal</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">)); </span><span style="color:#768390;">// true</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(ObjectUtil.</span><span style="color:#DCBDFB;">equal</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)); </span><span style="color:#768390;">// false</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(ObjectUtil.</span><span style="color:#DCBDFB;">equal</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)); </span><span style="color:#768390;">// true</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(ObjectUtil.</span><span style="color:#DCBDFB;">equal</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0L</span><span style="color:#ADBAC7;">)); </span><span style="color:#768390;">// false</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(ObjectUtil.</span><span style="color:#DCBDFB;">equal</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0L</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0L</span><span style="color:#ADBAC7;">)); </span><span style="color:#768390;">// true</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(ObjectUtil.</span><span style="color:#DCBDFB;">equal</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1L</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1L</span><span style="color:#ADBAC7;">)); </span><span style="color:#768390;">// true</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(ObjectUtil.</span><span style="color:#DCBDFB;">notEqual</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1L</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1L</span><span style="color:#ADBAC7;">)); </span><span style="color:#768390;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ObjectUtil.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ObjectUtil.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ObjectUtil.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ObjectUtil.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ObjectUtil.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ObjectUtil.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ObjectUtil.</span><span style="color:#6F42C1;">notEqual</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p><strong>ObjectUtil 的 equal() 源代码，如下：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * 比较两个对象是否相等。&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> * 相同的条件有两个，满足其一即可：&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> * &lt;ol&gt;</span></span>
<span class="line"><span style="color:#768390;"> * &lt;li&gt;obj1 == null &amp;&amp; obj2 == null&lt;/li&gt;</span></span>
<span class="line"><span style="color:#768390;"> * &lt;li&gt;obj1.equals(obj2)&lt;/li&gt;</span></span>
<span class="line"><span style="color:#768390;"> * &lt;li&gt;如果是BigDecimal比较，0 == obj1.compareTo(obj2)&lt;/li&gt;</span></span>
<span class="line"><span style="color:#768390;"> * &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#768390;"> *</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">obj1</span><span style="color:#768390;"> 对象1</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">obj2</span><span style="color:#768390;"> 对象2</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@return</span><span style="color:#768390;"> 是否相等</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@see</span><span style="color:#768390;"> Objects#equals(Object, Object)</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">equal</span><span style="color:#ADBAC7;">(Object obj1, Object obj2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 判断是否为 BigDecimal 类型，如果是用 compareTo 比较</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (obj1 </span><span style="color:#F47067;">instanceof</span><span style="color:#ADBAC7;"> BigDecimal </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> obj2 </span><span style="color:#F47067;">instanceof</span><span style="color:#ADBAC7;"> BigDecimal) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> NumberUtil.</span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">((BigDecimal) obj1, (BigDecimal) obj2);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 否则使用 Java 官方提供的 Objects 工具类比较</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> Objects.</span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">(obj1, obj2);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * 比较两个对象是否不相等。&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> *</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">obj1</span><span style="color:#768390;"> 对象1</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">obj2</span><span style="color:#768390;"> 对象2</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@return</span><span style="color:#768390;"> 是否不等</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@since</span><span style="color:#768390;"> 3.0.7</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">notEqual</span><span style="color:#ADBAC7;">(Object obj1, Object obj2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">equal</span><span style="color:#ADBAC7;">(obj1, obj2);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 比较两个对象是否相等。&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * 相同的条件有两个，满足其一即可：&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;ol&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;li&gt;obj1 == null &amp;&amp; obj2 == null&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;li&gt;obj1.equals(obj2)&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;li&gt;如果是BigDecimal比较，0 == obj1.compareTo(obj2)&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">obj1</span><span style="color:#6A737D;"> 对象1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">obj2</span><span style="color:#6A737D;"> 对象2</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 是否相等</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@see</span><span style="color:#6A737D;"> Objects#equals(Object, Object)</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(Object obj1, Object obj2) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断是否为 BigDecimal 类型，如果是用 compareTo 比较</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj1 </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> BigDecimal </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> obj2 </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> BigDecimal) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> NumberUtil.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">((BigDecimal) obj1, (BigDecimal) obj2);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 否则使用 Java 官方提供的 Objects 工具类比较</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Objects.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(obj1, obj2);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 比较两个对象是否不相等。&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">obj1</span><span style="color:#6A737D;"> 对象1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">obj2</span><span style="color:#6A737D;"> 对象2</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 是否不等</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@since</span><span style="color:#6A737D;"> 3.0.7</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notEqual</span><span style="color:#24292E;">(Object obj1, Object obj2) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(obj1, obj2);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>要是觉得 equal 这个单词不喜欢，你还可以用它的别名方法：（作者们考虑的是有点周到了）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * 比较两个对象是否相等，此方法是 {</span><span style="color:#F47067;">@link</span><span style="color:#768390;"> #</span><span style="color:#F69D50;">equal(Object, Object)</span><span style="color:#768390;">}的别名方法。&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> * 相同的条件有两个，满足其一即可：&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> * &lt;ol&gt;</span></span>
<span class="line"><span style="color:#768390;"> * &lt;li&gt;obj1 == null &amp;&amp; obj2 == null&lt;/li&gt;</span></span>
<span class="line"><span style="color:#768390;"> * &lt;li&gt;obj1.equals(obj2)&lt;/li&gt;</span></span>
<span class="line"><span style="color:#768390;"> * &lt;li&gt;如果是BigDecimal比较，0 == obj1.compareTo(obj2)&lt;/li&gt;</span></span>
<span class="line"><span style="color:#768390;"> * &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#768390;"> *</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">obj1</span><span style="color:#768390;"> 对象1</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">obj2</span><span style="color:#768390;"> 对象2</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@return</span><span style="color:#768390;"> 是否相等</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@see</span><span style="color:#768390;"> #equal(Object, Object)</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@since</span><span style="color:#768390;"> 5.4.3</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">(Object obj1, Object obj2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">equal</span><span style="color:#ADBAC7;">(obj1, obj2);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 比较两个对象是否相等，此方法是 {</span><span style="color:#D73A49;">@link</span><span style="color:#6A737D;"> #</span><span style="color:#E36209;">equal(Object, Object)</span><span style="color:#6A737D;">}的别名方法。&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * 相同的条件有两个，满足其一即可：&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;ol&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;li&gt;obj1 == null &amp;&amp; obj2 == null&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;li&gt;obj1.equals(obj2)&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;li&gt;如果是BigDecimal比较，0 == obj1.compareTo(obj2)&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">obj1</span><span style="color:#6A737D;"> 对象1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">obj2</span><span style="color:#6A737D;"> 对象2</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 是否相等</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@see</span><span style="color:#6A737D;"> #equal(Object, Object)</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@since</span><span style="color:#6A737D;"> 5.4.3</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object obj1, Object obj2) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(obj1, obj2);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">《阿里巴巴Java开发手册》</p><p>【强制】BigDecimal 的等值比较应使用 compareTo()方法，而不是 equals()方法。 说明：equals()方法会比较值和精度（1.0 与 1.00 返回结果为 false），而 compareTo() 则会忽略精度。</p><p>说明：equals()方法会比较值和精度（1.0 与 1.00 返回结果为 false），而 compareTo()则会忽略精度。</p></div><p>诚然，从上方源代码中我们可以清楚地看到 ObjectUtil 比较的时候还区分了 BigDecimal 类型，这也轻松的解决了此强制问题。</p><p><strong>在 ObjectUtil 比较 BigDecimal 类型相等时用到的 NumberUtil 中的 equals() 源代码，如下：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * 比较大小，值相等 返回true&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> * 此方法通过调用{</span><span style="color:#F47067;">@link</span><span style="color:#768390;"> </span><span style="color:#F69D50;">BigDecimal</span><span style="color:#768390;">#</span><span style="color:#F69D50;">compareTo(BigDecimal)</span><span style="color:#768390;">}方法来判断是否相等&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> * 此方法判断值相等时忽略精度的，即0.00 == 0</span></span>
<span class="line"><span style="color:#768390;"> *</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">bigNum1</span><span style="color:#768390;"> 数字1</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">bigNum2</span><span style="color:#768390;"> 数字2</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@return</span><span style="color:#768390;"> 是否相等</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">(BigDecimal bigNum1, BigDecimal bigNum2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (bigNum1 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> bigNum2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 如果用户传入同一对象，省略compareTo以提高性能。</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (bigNum1 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> bigNum2 </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> bigNum1.</span><span style="color:#DCBDFB;">compareTo</span><span style="color:#ADBAC7;">(bigNum2);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 比较大小，值相等 返回true&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * 此方法通过调用{</span><span style="color:#D73A49;">@link</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">BigDecimal</span><span style="color:#6A737D;">#</span><span style="color:#E36209;">compareTo(BigDecimal)</span><span style="color:#6A737D;">}方法来判断是否相等&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * 此方法判断值相等时忽略精度的，即0.00 == 0</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">bigNum1</span><span style="color:#6A737D;"> 数字1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">bigNum2</span><span style="color:#6A737D;"> 数字2</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 是否相等</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(BigDecimal bigNum1, BigDecimal bigNum2) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bigNum1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> bigNum2) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果用户传入同一对象，省略compareTo以提高性能。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bigNum1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> bigNum2 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> bigNum1.</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(bigNum2);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="numberutil" tabindex="-1">NumberUtil <a class="header-anchor" href="#numberutil" aria-label="Permalink to &quot;NumberUtil&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">《阿里巴巴Java开发手册》</p><p>【强制】浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用 equals 来判断。</p><p>说明：浮点数采用“尾数+阶码”的编码方式，类似于科学计数法的“有效数字+指数”的表示方式。二进 制无法精确表示大部分的十进制小数。</p><p>解决方法：</p><ol><li>指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。</li><li>使用 BigDecimal 来定义值，再进行浮点数的运算操作。</li></ol></div><p>浮点数比较的时候依然可以使用 ObjectUtil，但是也可以直接采用 NumberUtil：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(NumberUtil.</span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">)); </span><span style="color:#768390;">// true</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(ObjectUtil.</span><span style="color:#DCBDFB;">equal</span><span style="color:#ADBAC7;">(BigDecimal.</span><span style="color:#DCBDFB;">valueOf</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">), BigDecimal.</span><span style="color:#DCBDFB;">valueOf</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">))); </span><span style="color:#768390;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(NumberUtil.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ObjectUtil.</span><span style="color:#6F42C1;">equal</span><span style="color:#24292E;">(BigDecimal.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">), BigDecimal.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">))); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><strong>上方用到的 NumberUtil 的 equals() 源代码，如下：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * 比较大小，值相等 返回true&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> * 此方法通过调用{</span><span style="color:#F47067;">@link</span><span style="color:#768390;"> </span><span style="color:#F69D50;">Double</span><span style="color:#768390;">#</span><span style="color:#F69D50;">doubleToLongBits(double)</span><span style="color:#768390;">}方法来判断是否相等&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> * 此方法判断值相等时忽略精度的，即0.00 == 0</span></span>
<span class="line"><span style="color:#768390;"> *</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">num1</span><span style="color:#768390;"> 数字1</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">num2</span><span style="color:#768390;"> 数字2</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@return</span><span style="color:#768390;"> 是否相等</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@since</span><span style="color:#768390;"> 5.4.2</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">double</span><span style="color:#ADBAC7;"> num1, </span><span style="color:#F47067;">double</span><span style="color:#ADBAC7;"> num2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> Double.</span><span style="color:#DCBDFB;">doubleToLongBits</span><span style="color:#ADBAC7;">(num1) </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> Double.</span><span style="color:#DCBDFB;">doubleToLongBits</span><span style="color:#ADBAC7;">(num2);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * 比较大小，值相等 返回true&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> * 此方法通过调用{</span><span style="color:#F47067;">@link</span><span style="color:#768390;"> </span><span style="color:#F69D50;">Float</span><span style="color:#768390;">#</span><span style="color:#F69D50;">floatToIntBits(float)</span><span style="color:#768390;">}方法来判断是否相等&lt;br&gt;</span></span>
<span class="line"><span style="color:#768390;"> * 此方法判断值相等时忽略精度的，即0.00 == 0</span></span>
<span class="line"><span style="color:#768390;"> *</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">num1</span><span style="color:#768390;"> 数字1</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">num2</span><span style="color:#768390;"> 数字2</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@return</span><span style="color:#768390;"> 是否相等</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@since</span><span style="color:#768390;"> 5.4.5</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">float</span><span style="color:#ADBAC7;"> num1, </span><span style="color:#F47067;">float</span><span style="color:#ADBAC7;"> num2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> Float.</span><span style="color:#DCBDFB;">floatToIntBits</span><span style="color:#ADBAC7;">(num1) </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> Float.</span><span style="color:#DCBDFB;">floatToIntBits</span><span style="color:#ADBAC7;">(num2);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 比较大小，值相等 返回true&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * 此方法通过调用{</span><span style="color:#D73A49;">@link</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">Double</span><span style="color:#6A737D;">#</span><span style="color:#E36209;">doubleToLongBits(double)</span><span style="color:#6A737D;">}方法来判断是否相等&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * 此方法判断值相等时忽略精度的，即0.00 == 0</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">num1</span><span style="color:#6A737D;"> 数字1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">num2</span><span style="color:#6A737D;"> 数字2</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 是否相等</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@since</span><span style="color:#6A737D;"> 5.4.2</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> num1, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> num2) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">doubleToLongBits</span><span style="color:#24292E;">(num1) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">doubleToLongBits</span><span style="color:#24292E;">(num2);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 比较大小，值相等 返回true&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * 此方法通过调用{</span><span style="color:#D73A49;">@link</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">Float</span><span style="color:#6A737D;">#</span><span style="color:#E36209;">floatToIntBits(float)</span><span style="color:#6A737D;">}方法来判断是否相等&lt;br&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * 此方法判断值相等时忽略精度的，即0.00 == 0</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">num1</span><span style="color:#6A737D;"> 数字1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">num2</span><span style="color:#6A737D;"> 数字2</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 是否相等</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@since</span><span style="color:#6A737D;"> 5.4.5</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> num1, </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> num2) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Float.</span><span style="color:#6F42C1;">floatToIntBits</span><span style="color:#24292E;">(num1) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Float.</span><span style="color:#6F42C1;">floatToIntBits</span><span style="color:#24292E;">(num2);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="程序计时" tabindex="-1">程序计时 <a class="header-anchor" href="#程序计时" aria-label="Permalink to &quot;程序计时&quot;">​</a></h2><h3 id="传统用法-1" tabindex="-1">传统用法 <a class="header-anchor" href="#传统用法-1" aria-label="Permalink to &quot;传统用法&quot;">​</a></h3><p>为了计算程序执行耗时，通常的做法是在程序段前后分别记录一个时间毫秒值变量，然后用结束时间毫秒值减去开始时间毫秒值就可以了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">long</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">startTime</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> System.</span><span style="color:#DCBDFB;">currentTimeMillis</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 要计时的程序片段</span></span>
<span class="line"><span style="color:#768390;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">long</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">endTime</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> System.</span><span style="color:#DCBDFB;">currentTimeMillis</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;总耗时：&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> (endTime </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> startTime) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;ms&quot;</span><span style="color:#ADBAC7;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 要计时的程序片段</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> endTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;总耗时：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (endTime </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startTime) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ms&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="timeinterval" tabindex="-1">TimeInterval <a class="header-anchor" href="#timeinterval" aria-label="Permalink to &quot;TimeInterval&quot;">​</a></h3><p>实际上传统方法也没什么问题，但是当我们需要持续计时的时候，它就不是那么美丽了。Hutool 提供了 <code>TimeInterval</code> 来帮助我们实现灵活计时的需求。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">TimeInterval</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">timer</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DateUtil.</span><span style="color:#DCBDFB;">timer</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 要计时的程序片段1</span></span>
<span class="line"><span style="color:#768390;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;总耗时：&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> timer.</span><span style="color:#DCBDFB;">interval</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;ms&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 要计时的程序片段2</span></span>
<span class="line"><span style="color:#768390;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;总耗时：&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> timer.</span><span style="color:#DCBDFB;">interval</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;ms&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#768390;">// ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TimeInterval timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DateUtil.</span><span style="color:#6F42C1;">timer</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 要计时的程序片段1</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;总耗时：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> timer.</span><span style="color:#6F42C1;">interval</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ms&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 要计时的程序片段2</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;总耗时：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> timer.</span><span style="color:#6F42C1;">interval</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ms&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span></code></pre></div><h2 id="uuid生成器" tabindex="-1">UUID生成器 <a class="header-anchor" href="#uuid生成器" aria-label="Permalink to &quot;UUID生成器&quot;">​</a></h2><h3 id="传统用法-2" tabindex="-1">传统用法 <a class="header-anchor" href="#传统用法-2" aria-label="Permalink to &quot;传统用法&quot;">​</a></h3><p>利用 JDK 内置的 <code>java.util.UUID</code>，可以生成 32 位的 UUID，但一般我们使用的时候还要再对其“加工”一下，转换成字符串并去除连字符。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">UUID</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">uuid</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> UUID.</span><span style="color:#DCBDFB;">randomUUID</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#768390;">// 转换为字符串</span></span>
<span class="line"><span style="color:#ADBAC7;">String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">uuidStr</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> uuid.</span><span style="color:#DCBDFB;">toString</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(uuidStr); </span><span style="color:#768390;">// 7f4c0b42-d066-4baa-bc24-4d74a69ea78e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 去除连字符</span></span>
<span class="line"><span style="color:#ADBAC7;">String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">replaceUuidStr</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> uuidStr.</span><span style="color:#DCBDFB;">replace</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;-&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(replaceUuidStr); </span><span style="color:#768390;">// 7f4c0b42d0664baabc244d74a69ea78e</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">UUID uuid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 转换为字符串</span></span>
<span class="line"><span style="color:#24292E;">String uuidStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> uuid.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(uuidStr); </span><span style="color:#6A737D;">// 7f4c0b42-d066-4baa-bc24-4d74a69ea78e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 去除连字符</span></span>
<span class="line"><span style="color:#24292E;">String replaceUuidStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> uuidStr.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(replaceUuidStr); </span><span style="color:#6A737D;">// 7f4c0b42d0664baabc244d74a69ea78e</span></span></code></pre></div><h3 id="idutil" tabindex="-1">IdUtil <a class="header-anchor" href="#idutil" aria-label="Permalink to &quot;IdUtil&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Hutool文档</p><p>Hutool重写了java.util.UUID的逻辑，对应类为cn.hutool.core.lang.UUID，使生成不带-的UUID字符串不再需要做字符替换，性能提升一倍左右。</p></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">uuidStr</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> IdUtil.</span><span style="color:#DCBDFB;">fastUUID</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(uuidStr); </span><span style="color:#768390;">// f69c5c5c-73fd-4286-b338-133927789d71</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">simpleUuidStr</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> IdUtil.</span><span style="color:#DCBDFB;">fastSimpleUUID</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(simpleUuidStr); </span><span style="color:#768390;">// 6905bc8239c1489a9f6fb18cee1d6884</span></span>
<span class="line"><span style="color:#768390;">// ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String uuidStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IdUtil.</span><span style="color:#6F42C1;">fastUUID</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(uuidStr); </span><span style="color:#6A737D;">// f69c5c5c-73fd-4286-b338-133927789d71</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">String simpleUuidStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IdUtil.</span><span style="color:#6F42C1;">fastSimpleUUID</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(simpleUuidStr); </span><span style="color:#6A737D;">// 6905bc8239c1489a9f6fb18cee1d6884</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span></code></pre></div><h2 id="获取spring" tabindex="-1">获取Spring <a class="header-anchor" href="#获取spring" aria-label="Permalink to &quot;获取Spring&quot;">​</a></h2><h3 id="springutil" tabindex="-1">SpringUtil <a class="header-anchor" href="#springutil" aria-label="Permalink to &quot;SpringUtil&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Hutool文档</p><p>使用Spring Boot时，通过依赖注入获取bean是非常方便的，但是在工具化的应用场景下，想要动态获取bean就变得非常困难，于是Hutool封装了Spring中Bean获取的工具类——SpringUtil。</p></div><p>要使用 SpringUtil，首先要完成两个操作。</p><ol><li>使用 <code>ComponentScan</code> 额外指定组件扫描包（记得别忘了也把自己的扫描包也加上）</li><li>使用 <code>@Import</code> 导入 SpringUtil 类</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">SpringBootApplication</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Import</span><span style="color:#ADBAC7;">(cn.hutool.extra.spring.SpringUtil.class)</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">ComponentScan</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">basePackages</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span><span style="color:#96D0FF;">&quot;com.xxx&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;cn.hutool.extra.spring&quot;</span><span style="color:#ADBAC7;">})</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">WebApiApplication</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] </span><span style="color:#F69D50;">args</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        SpringApplication.</span><span style="color:#DCBDFB;">run</span><span style="color:#ADBAC7;">(args);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">(cn.hutool.extra.spring.SpringUtil.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ComponentScan</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;com.xxx&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;cn.hutool.extra.spring&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebApiApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>常见用法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 获取 Spring 容器中的指定对象</span></span>
<span class="line"><span style="color:#ADBAC7;">UserMapper</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">userMapper</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SpringUtil.</span><span style="color:#DCBDFB;">getBean</span><span style="color:#ADBAC7;">(UserMapper.class);</span></span>
<span class="line"><span style="color:#768390;">// 获取配置文件中的指定属性值</span></span>
<span class="line"><span style="color:#ADBAC7;">String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">activeProfile</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SpringUtil.</span><span style="color:#DCBDFB;">getProperty</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;spring.profiles.active&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#768390;">// ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 获取 Spring 容器中的指定对象</span></span>
<span class="line"><span style="color:#24292E;">UserMapper userMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SpringUtil.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(UserMapper.class);</span></span>
<span class="line"><span style="color:#6A737D;">// 获取配置文件中的指定属性值</span></span>
<span class="line"><span style="color:#24292E;">String activeProfile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SpringUtil.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;spring.profiles.active&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span></code></pre></div><h2 id="集合操作" tabindex="-1">集合操作 <a class="header-anchor" href="#集合操作" aria-label="Permalink to &quot;集合操作&quot;">​</a></h2><p>集合的出现极大的解决了复杂数据处理的需要，但仅凭 JDK 内置的集合方法，还是略显“苦涩”。</p><h3 id="maputil" tabindex="-1">MapUtil <a class="header-anchor" href="#maputil" aria-label="Permalink to &quot;MapUtil&quot;">​</a></h3><p>顾名思义，MapUtil 生来是为了更方便的操作 Map 集合的。</p><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p>单是能快速帮你创建指定初始容量大小的 Map 集合这一点就爱了。</p></div><div class="warning custom-block"><p class="custom-block-title">《阿里巴巴Java开发手册》</p><p>【推荐】 集合初始化时， 指定集合初始值大小。</p><p>说明： HashMap 使用 HashMap(int initialCapacity) 初始化，如果暂时无法确定集合大小， 那么指定默认值（ 16） 即可。</p><p>正例： initialCapacity = (需要存储的元素个数 / 负载因子) + 1。 注意负载因子（即 loader factor） 默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值） 。</p><p>反例： HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素增加而被迫不断扩容， resize()方法总共会调用 8 次，反复重建哈希表和数据迁移。当放置的集合元素个数达千万级时会影响程序 性能。</p></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 判断是否为空、不为空</span></span>
<span class="line"><span style="color:#ADBAC7;">Map</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Object</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">map1</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">Map</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Object</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">map2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#F47067;">boolean</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">flag1</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MapUtil.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">(map1); </span><span style="color:#768390;">// true</span></span>
<span class="line"><span style="color:#F47067;">boolean</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">flag2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MapUtil.</span><span style="color:#DCBDFB;">isNotEmpty</span><span style="color:#ADBAC7;">(map1); </span><span style="color:#768390;">// false</span></span>
<span class="line"><span style="color:#F47067;">boolean</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">flag3</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MapUtil.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">(map2); </span><span style="color:#768390;">// true</span></span>
<span class="line"><span style="color:#F47067;">boolean</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">flag4</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MapUtil.</span><span style="color:#DCBDFB;">isNotEmpty</span><span style="color:#ADBAC7;">(map2); </span><span style="color:#768390;">// false</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(flag1);</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(flag2);</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(flag3);</span></span>
<span class="line"><span style="color:#ADBAC7;">System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(flag4);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 快速创建单键值对的 HashMap</span></span>
<span class="line"><span style="color:#ADBAC7;">HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">map3</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MapUtil.</span><span style="color:#DCBDFB;">of</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;CN&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;中国&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#768390;">// 快速创建单键值对的 LinkedHashMap</span></span>
<span class="line"><span style="color:#ADBAC7;">HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">String</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">map4</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MapUtil.</span><span style="color:#DCBDFB;">of</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;CN&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;中国&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 快速创建指定初始容量大小的 HashMap</span></span>
<span class="line"><span style="color:#ADBAC7;">HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Object</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Object</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">map5</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MapUtil.</span><span style="color:#DCBDFB;">newHashMap</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">// 快速创建LinkedHashMap</span></span>
<span class="line"><span style="color:#ADBAC7;">HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Object</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Object</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">map6</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MapUtil.</span><span style="color:#DCBDFB;">newHashMap</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#768390;">// 快速创建指定初始容量大小的 LinkedHashMap</span></span>
<span class="line"><span style="color:#ADBAC7;">HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Object</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Object</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">map7</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MapUtil.</span><span style="color:#DCBDFB;">newHashMap</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#768390;">// ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 判断是否为空、不为空</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; map1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; map2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> flag1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MapUtil.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(map1); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> flag2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MapUtil.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(map1); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> flag3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MapUtil.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(map2); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> flag4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MapUtil.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(map2); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(flag1);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(flag2);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(flag3);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(flag4);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 快速创建单键值对的 HashMap</span></span>
<span class="line"><span style="color:#24292E;">HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MapUtil.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CN&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;中国&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 快速创建单键值对的 LinkedHashMap</span></span>
<span class="line"><span style="color:#24292E;">HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MapUtil.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CN&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;中国&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 快速创建指定初始容量大小的 HashMap</span></span>
<span class="line"><span style="color:#24292E;">HashMap&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; map5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MapUtil.</span><span style="color:#6F42C1;">newHashMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 快速创建LinkedHashMap</span></span>
<span class="line"><span style="color:#24292E;">HashMap&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; map6 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MapUtil.</span><span style="color:#6F42C1;">newHashMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 快速创建指定初始容量大小的 LinkedHashMap</span></span>
<span class="line"><span style="color:#24292E;">HashMap&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; map7 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MapUtil.</span><span style="color:#6F42C1;">newHashMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span></code></pre></div><p><strong>MapUtil 的 newHashMap() 源代码，如下：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * 新建一个HashMap</span></span>
<span class="line"><span style="color:#768390;"> *</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">&lt;K&gt;</span><span style="color:#768390;">  Key类型</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">&lt;V&gt;</span><span style="color:#768390;">  Value类型</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">size</span><span style="color:#768390;"> 初始大小，由于默认负载因子0.75，传入的size会实际初始大小为size / 0.75 + 1</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@return</span><span style="color:#768390;"> HashMap对象</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">K, V</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> HashMap</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">K, V</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">newHashMap</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> size) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">newHashMap</span><span style="color:#ADBAC7;">(size, </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * 新建一个HashMap</span></span>
<span class="line"><span style="color:#768390;"> *</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">&lt;K&gt;</span><span style="color:#768390;">     Key类型</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">&lt;V&gt;</span><span style="color:#768390;">     Value类型</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">size</span><span style="color:#768390;">    初始大小，由于默认负载因子0.75，传入的size会实际初始大小为size / 0.75 + 1</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@param</span><span style="color:#768390;"> </span><span style="color:#F69D50;">isOrder</span><span style="color:#768390;"> Map的Key是否有序，有序返回 {@link LinkedHashMap}，否则返回 {@link HashMap}</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@return</span><span style="color:#768390;"> HashMap对象</span></span>
<span class="line"><span style="color:#768390;"> * </span><span style="color:#F47067;">@since</span><span style="color:#768390;"> 3.0.4</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">K, V</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> HashMap</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">K, V</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">newHashMap</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> size, </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;"> isOrder) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">initialCapacity</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">) (size </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> DEFAULT_LOAD_FACTOR) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> isOrder </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedHashMap&lt;&gt;(initialCapacity) </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashMap&lt;&gt;(initialCapacity);</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 新建一个HashMap</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;K&gt;</span><span style="color:#6A737D;">  Key类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;V&gt;</span><span style="color:#6A737D;">  Value类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">size</span><span style="color:#6A737D;"> 初始大小，由于默认负载因子0.75，传入的size会实际初始大小为size / 0.75 + 1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> HashMap对象</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K, V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> HashMap</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K, V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newHashMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> size) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newHashMap</span><span style="color:#24292E;">(size, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 新建一个HashMap</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;K&gt;</span><span style="color:#6A737D;">     Key类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;V&gt;</span><span style="color:#6A737D;">     Value类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">size</span><span style="color:#6A737D;">    初始大小，由于默认负载因子0.75，传入的size会实际初始大小为size / 0.75 + 1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">isOrder</span><span style="color:#6A737D;"> Map的Key是否有序，有序返回 {@link LinkedHashMap}，否则返回 {@link HashMap}</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> HashMap对象</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@since</span><span style="color:#6A737D;"> 3.0.4</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K, V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> HashMap</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K, V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newHashMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> size, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isOrder) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> initialCapacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) (size </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> DEFAULT_LOAD_FACTOR) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> isOrder </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;(initialCapacity) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(initialCapacity);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,60);function E(s,h,j,v,q,f){const c=e("Badge"),r=i,y=e("ClientOnly");return l(),D("div",null,[t("h1",b,[p("个人常用 Hutool工 具类 "),o(c,{text:"持续更新",type:"warning"}),p(),m]),o(y,null,{default:C(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),B(r,{key:0,article:s.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),g])}const M=A(d,[["render",E]]);export{O as __pageData,M as default};
