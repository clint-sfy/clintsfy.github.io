import{_ as e}from"./chunks/ArticleMetadata.efdb5e9a.js";import{_ as c,v as p,b as r,t as i,O as y,F as l,L as d,R as A,M as C,C as h,B as g}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const w=JSON.parse('{"title":"C++类型转换","description":"","frontmatter":{"title":"C++类型转换","author":"阿源","date":"2023/02/04 21:29","categories":["C++基础快速入门"],"tags":["C++","C++基础"]},"headers":[],"relativePath":"courses/c_plus/01-C++的基础/04-c++类型转换.md","filePath":"courses/c_plus/01-C++的基础/04-c++类型转换.md","lastUpdated":1695348718000}'),B={name:"courses/c_plus/01-C++的基础/04-c++类型转换.md"},D=l("h1",{id:"c-类型转换",tabindex:"-1"},[d("C++类型转换 "),l("a",{class:"header-anchor",href:"#c-类型转换","aria-label":'Permalink to "C++类型转换"'},"​")],-1),u=A(`<h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><h3 id="_1、上行、下行转换" tabindex="-1">1、上行、下行转换 <a class="header-anchor" href="#_1、上行、下行转换" aria-label="Permalink to &quot;1、上行、下行转换&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A21.png" alt=""></p><h3 id="_2、static-cast静态类型转换" tabindex="-1">2、static_cast静态类型转换 <a class="header-anchor" href="#_2、static-cast静态类型转换" aria-label="Permalink to &quot;2、static_cast静态类型转换&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Base</span><span style="color:#ADBAC7;">{};</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Son</span><span style="color:#ADBAC7;">:</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Base</span><span style="color:#ADBAC7;">{};</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Other</span><span style="color:#ADBAC7;">{};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Base</span><span style="color:#24292E;">{};</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Son</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Base</span><span style="color:#24292E;">{};</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Other</span><span style="color:#24292E;">{};</span></span></code></pre></div><p>用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。</p><p>基本类型：支持</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 int num = static_cast&lt;int&gt;(3.14);//ok</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 int num = static_cast&lt;int&gt;(3.14);//ok</span></span></code></pre></div><p>上行转换：支持 安全</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">Base *p = static_cast&lt;Base *&gt;(new Son);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Base *p = static_cast&lt;Base *&gt;(new Son);</span></span></code></pre></div><p>下行转换：支持 （不安全）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">Son *p2 = static_cast&lt;Son *&gt;(new Base);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Son *p2 = static_cast&lt;Son *&gt;(new Base);</span></span></code></pre></div><p>不相关类型转换：不支持</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">Base *p3 = static_cast&lt;Base *&gt;(new Other);//err</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Base *p3 = static_cast&lt;Base *&gt;(new Other);//err</span></span></code></pre></div><h3 id="_3、dynamic-cast静态类型转换" tabindex="-1">3、dynamic_cast静态类型转换 <a class="header-anchor" href="#_3、dynamic-cast静态类型转换" aria-label="Permalink to &quot;3、dynamic_cast静态类型转换&quot;">​</a></h3><p>dynamiccast主要用于类层次间的上行转换和下行转换</p><p>基本类型：不支持</p><p><code>1 int num = dynamic_cast&lt;int&gt;(3.14);//err</code></p><p>上行转换：支持</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">Base *p1 = dynamic_cast&lt;Base *&gt;(new Son);//ok</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Base *p1 = dynamic_cast&lt;Base *&gt;(new Son);//ok</span></span></code></pre></div><p>下行转换：不支持（不安全）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">Son *p2 = dynamic_cast&lt;Son *&gt;(new Base);//err</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Son *p2 = dynamic_cast&lt;Son *&gt;(new Base);//err</span></span></code></pre></div><p>不相关类型转换：不支持</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">Base *p3 = dynamic_cast&lt;Base *&gt;(new Other);//err</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Base *p3 = dynamic_cast&lt;Base *&gt;(new Other);//err</span></span></code></pre></div><h3 id="_4、const-cast常量转换" tabindex="-1">4、const_cast常量转换 <a class="header-anchor" href="#_4、const-cast常量转换" aria-label="Permalink to &quot;4、const_cast常量转换&quot;">​</a></h3><p>1、将const修饰的指针或引用 转换成 非const （支持）</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p1;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const_cast&lt;int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*&gt;</span><span style="color:#ADBAC7;">(p1);</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">ob </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">ob1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const_cast&lt;int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&gt;</span><span style="color:#ADBAC7;">(ob);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p1;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const_cast&lt;int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(p1);</span></span>
<span class="line"><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ob </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ob1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const_cast&lt;int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&gt;</span><span style="color:#24292E;">(ob);</span></span></code></pre></div><p><strong>2、将非const修饰的指针或引用 转换成 const （支持）</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p3;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p4 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const_cast&lt;int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*&gt;</span><span style="color:#ADBAC7;">(p3);</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> data </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">ob2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const_cast&lt;const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&gt;</span><span style="color:#ADBAC7;">(data);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p3;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const_cast&lt;int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(p3);</span></span>
<span class="line"><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ob2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const_cast&lt;const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&gt;</span><span style="color:#24292E;">(data);</span></span></code></pre></div><p>5、重新解释转换(reinterpret_cast) （最不安全）</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A22.png" alt=""></p>`,31);function m(s,F,b,_,v,E){const o=e,t=C("ClientOnly");return p(),r("div",null,[D,i(t,null,{default:y(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(p(),h(o,{key:0,article:s.$frontmatter},null,8,["article"])):g("",!0)]}),_:1}),u])}const O=c(B,[["render",m]]);export{w as __pageData,O as default};
