import{_ as t}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as c,v as l,b as r,t as y,O as i,F as p,L as A,R as C,M as d,C as D,B as F}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const P=JSON.parse('{"title":"模型评估方法","description":"","frontmatter":{"title":"模型评估方法","author":"阿源","date":"2023/07/02 12:00","categories":["机器学习快速入门"],"tags":["机器学习"]},"headers":[],"relativePath":"courses/tangyudi/02-机器学习篇/02-模型评估方法.md","filePath":"courses/tangyudi/02-机器学习篇/02-模型评估方法.md","lastUpdated":1695348718000}'),_={name:"courses/tangyudi/02-机器学习篇/02-模型评估方法.md"},B=p("h1",{id:"模型评估方法",tabindex:"-1"},[A("模型评估方法 "),p("a",{class:"header-anchor",href:"#模型评估方法","aria-label":'Permalink to "模型评估方法"'},"​")],-1),E=C(`<h2 id="_3-模型评估方法" tabindex="-1">3. 模型评估方法 <a class="header-anchor" href="#_3-模型评估方法" aria-label="Permalink to &quot;3. 模型评估方法&quot;">​</a></h2><h3 id="数据集切分" tabindex="-1">数据集切分 <a class="header-anchor" href="#数据集切分" aria-label="Permalink to &quot;数据集切分&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> numpy </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> np</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> os</span></span>
<span class="line"><span style="color:#F47067;">%</span><span style="color:#ADBAC7;">matplotlib inline</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> matplotlib</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> matplotlib.pyplot </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> plt</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.rcParams[</span><span style="color:#96D0FF;">&#39;axes.labelsize&#39;</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">14</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.rcParams[</span><span style="color:#96D0FF;">&#39;xtick.labelsize&#39;</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">12</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.rcParams[</span><span style="color:#96D0FF;">&#39;ytick.labelsize&#39;</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">12</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> warnings</span></span>
<span class="line"><span style="color:#ADBAC7;">warnings.filterwarnings(</span><span style="color:#96D0FF;">&#39;ignore&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">np.random.seed(</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># Mnist数据是图像数据：(28,28,1)的灰度图</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.datasets </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> fetch_mldata</span></span>
<span class="line"><span style="color:#ADBAC7;">mnist </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> fetch_mldata(</span><span style="color:#96D0FF;">&#39;MNIST original&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">mnist</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">X.shape</span></span>
<span class="line"><span style="color:#ADBAC7;">X, y </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> mnist[</span><span style="color:#96D0FF;">&quot;data&quot;</span><span style="color:#ADBAC7;">], mnist[</span><span style="color:#96D0FF;">&quot;target&quot;</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">X.shape</span></span>
<span class="line"><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">70000</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">784</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">y.shape</span></span>
<span class="line"><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">70000</span><span style="color:#ADBAC7;">,)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">matplotlib inline</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> matplotlib</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> matplotlib.pyplot </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> plt</span></span>
<span class="line"><span style="color:#24292E;">plt.rcParams[</span><span style="color:#032F62;">&#39;axes.labelsize&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">14</span></span>
<span class="line"><span style="color:#24292E;">plt.rcParams[</span><span style="color:#032F62;">&#39;xtick.labelsize&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span></span>
<span class="line"><span style="color:#24292E;">plt.rcParams[</span><span style="color:#032F62;">&#39;ytick.labelsize&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> warnings</span></span>
<span class="line"><span style="color:#24292E;">warnings.filterwarnings(</span><span style="color:#032F62;">&#39;ignore&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">np.random.seed(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Mnist数据是图像数据：(28,28,1)的灰度图</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.datasets </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fetch_mldata</span></span>
<span class="line"><span style="color:#24292E;">mnist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fetch_mldata(</span><span style="color:#032F62;">&#39;MNIST original&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">mnist</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">X.shape</span></span>
<span class="line"><span style="color:#24292E;">X, y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mnist[</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">], mnist[</span><span style="color:#032F62;">&quot;target&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">X.shape</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">70000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">784</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">y.shape</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">70000</span><span style="color:#24292E;">,)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">X_train, X_test, y_train, y_test </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> X[:</span><span style="color:#6CB6FF;">60000</span><span style="color:#ADBAC7;">], X[</span><span style="color:#6CB6FF;">60000</span><span style="color:#ADBAC7;">:], y[:</span><span style="color:#6CB6FF;">60000</span><span style="color:#ADBAC7;">], y[</span><span style="color:#6CB6FF;">60000</span><span style="color:#ADBAC7;">:]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> numpy </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> np</span></span>
<span class="line"><span style="color:#768390;"># 洗牌操作</span></span>
<span class="line"><span style="color:#ADBAC7;">shuffle_index </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.random.permutation(</span><span style="color:#6CB6FF;">60000</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">X_train, y_train </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> X_train[shuffle_index], y_train[shuffle_index]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">X_train, X_test, y_train, y_test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> X[:</span><span style="color:#005CC5;">60000</span><span style="color:#24292E;">], X[</span><span style="color:#005CC5;">60000</span><span style="color:#24292E;">:], y[:</span><span style="color:#005CC5;">60000</span><span style="color:#24292E;">], y[</span><span style="color:#005CC5;">60000</span><span style="color:#24292E;">:]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#6A737D;"># 洗牌操作</span></span>
<span class="line"><span style="color:#24292E;">shuffle_index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.random.permutation(</span><span style="color:#005CC5;">60000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">X_train, y_train </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> X_train[shuffle_index], y_train[shuffle_index]</span></span></code></pre></div><h3 id="交叉验证" tabindex="-1">交叉验证 <a class="header-anchor" href="#交叉验证" aria-label="Permalink to &quot;交叉验证&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B01.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">y_train_5 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (y_train</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">y_test_5 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (y_test</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.linear_model </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> SGDClassifier</span></span>
<span class="line"><span style="color:#ADBAC7;">sgd_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SGDClassifier(</span><span style="color:#F69D50;">max_iter</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">sgd_clf.fit(X_train,y_train_5)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.model_selection </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> cross_val_score</span></span>
<span class="line"><span style="color:#ADBAC7;">cross_val_score(sgd_clf,X_train,y_train_5,</span><span style="color:#F69D50;">cv</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">scoring</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;accuracy&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">array([</span><span style="color:#6CB6FF;">0.9502</span><span style="color:#ADBAC7;"> , </span><span style="color:#6CB6FF;">0.96565</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.96495</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">X_train.shape</span></span>
<span class="line"><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">60000</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">784</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">y_train_5.shape</span></span>
<span class="line"><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">60000</span><span style="color:#ADBAC7;">,)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">y_train_5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (y_train</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">y_test_5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (y_test</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.linear_model </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> SGDClassifier</span></span>
<span class="line"><span style="color:#24292E;">sgd_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SGDClassifier(</span><span style="color:#E36209;">max_iter</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">sgd_clf.fit(X_train,y_train_5)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.model_selection </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cross_val_score</span></span>
<span class="line"><span style="color:#24292E;">cross_val_score(sgd_clf,X_train,y_train_5,</span><span style="color:#E36209;">cv</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#E36209;">scoring</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;accuracy&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">array([</span><span style="color:#005CC5;">0.9502</span><span style="color:#24292E;"> , </span><span style="color:#005CC5;">0.96565</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.96495</span><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">X_train.shape</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">60000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">784</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">y_train_5.shape</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">60000</span><span style="color:#24292E;">,)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.model_selection </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> StratifiedKFold</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.base </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> clone</span></span>
<span class="line"><span style="color:#ADBAC7;">​</span></span>
<span class="line"><span style="color:#ADBAC7;">skflods </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> StratifiedKFold(</span><span style="color:#F69D50;">n_splits</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> train_index,test_index </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> skflods.split(X_train,y_train_5):</span></span>
<span class="line"><span style="color:#ADBAC7;">    clone_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> clone(sgd_clf)</span></span>
<span class="line"><span style="color:#ADBAC7;">    X_train_folds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> X_train[train_index]</span></span>
<span class="line"><span style="color:#ADBAC7;">    y_train_folds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> y_train_5[train_index]</span></span>
<span class="line"><span style="color:#ADBAC7;">    X_test_folds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> X_train[test_index]</span></span>
<span class="line"><span style="color:#ADBAC7;">    y_test_folds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> y_train_5[test_index]</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    clone_clf.fit(X_train_folds,y_train_folds)</span></span>
<span class="line"><span style="color:#ADBAC7;">    y_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> clone_clf.predict(X_test_folds)</span></span>
<span class="line"><span style="color:#ADBAC7;">    n_correct </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">sum</span><span style="color:#ADBAC7;">(y_pred </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> y_test_folds)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(n_correct</span><span style="color:#F47067;">/</span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(y_pred))</span></span>
<span class="line"><span style="color:#6CB6FF;">0.9502</span></span>
<span class="line"><span style="color:#6CB6FF;">0.96565</span></span>
<span class="line"><span style="color:#6CB6FF;">0.96495</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.model_selection </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> StratifiedKFold</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.base </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> clone</span></span>
<span class="line"><span style="color:#24292E;">​</span></span>
<span class="line"><span style="color:#24292E;">skflods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StratifiedKFold(</span><span style="color:#E36209;">n_splits</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> train_index,test_index </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> skflods.split(X_train,y_train_5):</span></span>
<span class="line"><span style="color:#24292E;">    clone_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clone(sgd_clf)</span></span>
<span class="line"><span style="color:#24292E;">    X_train_folds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> X_train[train_index]</span></span>
<span class="line"><span style="color:#24292E;">    y_train_folds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y_train_5[train_index]</span></span>
<span class="line"><span style="color:#24292E;">    X_test_folds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> X_train[test_index]</span></span>
<span class="line"><span style="color:#24292E;">    y_test_folds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y_train_5[test_index]</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    clone_clf.fit(X_train_folds,y_train_folds)</span></span>
<span class="line"><span style="color:#24292E;">    y_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clone_clf.predict(X_test_folds)</span></span>
<span class="line"><span style="color:#24292E;">    n_correct </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(y_pred </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> y_test_folds)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(n_correct</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(y_pred))</span></span>
<span class="line"><span style="color:#005CC5;">0.9502</span></span>
<span class="line"><span style="color:#005CC5;">0.96565</span></span>
<span class="line"><span style="color:#005CC5;">0.96495</span></span></code></pre></div><h3 id="混淆矩阵" tabindex="-1">混淆矩阵 <a class="header-anchor" href="#混淆矩阵" aria-label="Permalink to &quot;混淆矩阵&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B02.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.model_selection </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> cross_val_predict</span></span>
<span class="line"><span style="color:#ADBAC7;">y_train_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cross_val_predict(sgd_clf,X_train,y_train_5,</span><span style="color:#F69D50;">cv</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.metrics </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> confusion_matrix</span></span>
<span class="line"><span style="color:#ADBAC7;">confusion_matrix(y_train_5,y_train_pred)</span></span>
<span class="line"><span style="color:#ADBAC7;">array([[</span><span style="color:#6CB6FF;">53272</span><span style="color:#ADBAC7;">,  </span><span style="color:#6CB6FF;">1307</span><span style="color:#ADBAC7;">],</span></span>
<span class="line"><span style="color:#ADBAC7;">       [ </span><span style="color:#6CB6FF;">1077</span><span style="color:#ADBAC7;">,  </span><span style="color:#6CB6FF;">4344</span><span style="color:#ADBAC7;">]], </span><span style="color:#F69D50;">dtype</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">int64)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.model_selection </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cross_val_predict</span></span>
<span class="line"><span style="color:#24292E;">y_train_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cross_val_predict(sgd_clf,X_train,y_train_5,</span><span style="color:#E36209;">cv</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.metrics </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> confusion_matrix</span></span>
<span class="line"><span style="color:#24292E;">confusion_matrix(y_train_5,y_train_pred)</span></span>
<span class="line"><span style="color:#24292E;">array([[</span><span style="color:#005CC5;">53272</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">1307</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">       [ </span><span style="color:#005CC5;">1077</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">4344</span><span style="color:#24292E;">]], </span><span style="color:#E36209;">dtype</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">int64)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">negative class [[ true negatives , false positives ],</span></span>
<span class="line"><span style="color:#adbac7;">positive class [ false negatives , true positives ]]</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">true negatives: 53,272个数据被正确的分为非5类别</span></span>
<span class="line"><span style="color:#adbac7;">false positives：1307张被错误的分为5类别</span></span>
<span class="line"><span style="color:#adbac7;">false negatives：1077张错误的分为非5类别</span></span>
<span class="line"><span style="color:#adbac7;">true positives： 4344张被正确的分为5类别</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">negative class [[ true negatives , false positives ],</span></span>
<span class="line"><span style="color:#24292e;">positive class [ false negatives , true positives ]]</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">true negatives: 53,272个数据被正确的分为非5类别</span></span>
<span class="line"><span style="color:#24292e;">false positives：1307张被错误的分为5类别</span></span>
<span class="line"><span style="color:#24292e;">false negatives：1077张错误的分为非5类别</span></span>
<span class="line"><span style="color:#24292e;">true positives： 4344张被正确的分为5类别</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 准确率： TP/(TP+FP)</span></span>
<span class="line"><span style="color:#768390;"># 召回率： TP/(TP+FN)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.metrics </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> precision_score,recall_score</span></span>
<span class="line"><span style="color:#ADBAC7;">precision_score(y_train_5,y_train_pred)</span></span>
<span class="line"><span style="color:#6CB6FF;">0.7687135020350381</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">recall_score(y_train_5,y_train_pred)</span></span>
<span class="line"><span style="color:#6CB6FF;">0.801328168234643</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.metrics </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> f1_score</span></span>
<span class="line"><span style="color:#ADBAC7;">f1_score(y_train_5,y_train_pred)</span></span>
<span class="line"><span style="color:#6CB6FF;">0.7846820809248555</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 准确率： TP/(TP+FP)</span></span>
<span class="line"><span style="color:#6A737D;"># 召回率： TP/(TP+FN)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.metrics </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> precision_score,recall_score</span></span>
<span class="line"><span style="color:#24292E;">precision_score(y_train_5,y_train_pred)</span></span>
<span class="line"><span style="color:#005CC5;">0.7687135020350381</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">recall_score(y_train_5,y_train_pred)</span></span>
<span class="line"><span style="color:#005CC5;">0.801328168234643</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.metrics </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> f1_score</span></span>
<span class="line"><span style="color:#24292E;">f1_score(y_train_5,y_train_pred)</span></span>
<span class="line"><span style="color:#005CC5;">0.7846820809248555</span></span></code></pre></div><h3 id="评估指标对比分析" tabindex="-1">评估指标对比分析 <a class="header-anchor" href="#评估指标对比分析" aria-label="Permalink to &quot;评估指标对比分析&quot;">​</a></h3><h3 id="阈值对结果的影响" tabindex="-1">阈值对结果的影响 <a class="header-anchor" href="#阈值对结果的影响" aria-label="Permalink to &quot;阈值对结果的影响&quot;">​</a></h3><div class="language-PYTHON vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">PYTHON</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">Scikit</span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;">Learn不允许直接设置阈值，但它可以得到决策分数，调用其decision_function（）方法，而不是调用分类器的predict（）方法，该方法返回每个实例的分数，然后使用想要的阈值根据这些分数进行预测</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">y_scores </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cross_val_predict(sgd_clf, X_train, y_train_5, </span><span style="color:#F69D50;">cv</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                             </span><span style="color:#F69D50;">method</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;decision_function&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.metrics </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> precision_recall_curve</span></span>
<span class="line"><span style="color:#ADBAC7;">precisions, recalls, thresholds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> precision_recall_curve(y_train_5, y_scores)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">plot_precision_recall_vs_threshold</span><span style="color:#ADBAC7;">(precisions,recalls,thresholds):</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.plot(thresholds,</span></span>
<span class="line"><span style="color:#ADBAC7;">             precisions[:</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">],</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&quot;b--&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;Precision&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.plot(thresholds,</span></span>
<span class="line"><span style="color:#ADBAC7;">             recalls[:</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">],</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&quot;g-&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;Recall&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.xlabel(</span><span style="color:#96D0FF;">&quot;Threshold&quot;</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.legend(</span><span style="color:#F69D50;">loc</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;upper left&quot;</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.ylim([</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_precision_recall_vs_threshold(precisions,recalls,thresholds)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.xlim([</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">700000</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">700000</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Scikit</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Learn不允许直接设置阈值，但它可以得到决策分数，调用其decision_function（）方法，而不是调用分类器的predict（）方法，该方法返回每个实例的分数，然后使用想要的阈值根据这些分数进行预测</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">y_scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cross_val_predict(sgd_clf, X_train, y_train_5, </span><span style="color:#E36209;">cv</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                             </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;decision_function&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.metrics </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> precision_recall_curve</span></span>
<span class="line"><span style="color:#24292E;">precisions, recalls, thresholds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> precision_recall_curve(y_train_5, y_scores)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">plot_precision_recall_vs_threshold</span><span style="color:#24292E;">(precisions,recalls,thresholds):</span></span>
<span class="line"><span style="color:#24292E;">    plt.plot(thresholds,</span></span>
<span class="line"><span style="color:#24292E;">             precisions[:</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;b--&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Precision&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    plt.plot(thresholds,</span></span>
<span class="line"><span style="color:#24292E;">             recalls[:</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;g-&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Recall&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.xlabel(</span><span style="color:#032F62;">&quot;Threshold&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.legend(</span><span style="color:#E36209;">loc</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;upper left&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.ylim([</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">plot_precision_recall_vs_threshold(precisions,recalls,thresholds)</span></span>
<span class="line"><span style="color:#24292E;">plt.xlim([</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">700000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">700000</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B03.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">plot_precision_vs_recall</span><span style="color:#ADBAC7;">(precisions, recalls):</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.plot(recalls, </span></span>
<span class="line"><span style="color:#ADBAC7;">             precisions, </span></span>
<span class="line"><span style="color:#ADBAC7;">             </span><span style="color:#96D0FF;">&quot;b-&quot;</span><span style="color:#ADBAC7;">, </span></span>
<span class="line"><span style="color:#ADBAC7;">             </span><span style="color:#F69D50;">linewidth</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.xlabel(</span><span style="color:#96D0FF;">&quot;Recall&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.ylabel(</span><span style="color:#96D0FF;">&quot;Precision&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.axis([</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_precision_vs_recall(precisions, recalls)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">plot_precision_vs_recall</span><span style="color:#24292E;">(precisions, recalls):</span></span>
<span class="line"><span style="color:#24292E;">    plt.plot(recalls, </span></span>
<span class="line"><span style="color:#24292E;">             precisions, </span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#032F62;">&quot;b-&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#E36209;">linewidth</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    plt.xlabel(</span><span style="color:#032F62;">&quot;Recall&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.ylabel(</span><span style="color:#032F62;">&quot;Precision&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.axis([</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">plot_precision_vs_recall(precisions, recalls)</span></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B04.png" alt=""></p><h3 id="roc曲线" tabindex="-1">ROC曲线 <a class="header-anchor" href="#roc曲线" aria-label="Permalink to &quot;ROC曲线&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">receiver operating characteristic (ROC) 曲线是二元分类中的常用评估方法</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">它与精确度/召回曲线非常相似，但ROC曲线不是绘制精确度与召回率，而是绘制true positive rate(TPR) 与false positive rate(FPR)</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">要绘制ROC曲线，首先需要使用roc_curve（）函数计算各种阈值的TPR和FPR：</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">TPR = TP / (TP + FN) (Recall)</span></span>
<span class="line"><span style="color:#adbac7;">FPR = FP / (FP + TN)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">receiver operating characteristic (ROC) 曲线是二元分类中的常用评估方法</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">它与精确度/召回曲线非常相似，但ROC曲线不是绘制精确度与召回率，而是绘制true positive rate(TPR) 与false positive rate(FPR)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">要绘制ROC曲线，首先需要使用roc_curve（）函数计算各种阈值的TPR和FPR：</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">TPR = TP / (TP + FN) (Recall)</span></span>
<span class="line"><span style="color:#24292e;">FPR = FP / (FP + TN)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.metrics </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> roc_curve</span></span>
<span class="line"><span style="color:#ADBAC7;">fpr, tpr, thresholds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> roc_curve(y_train_5, y_scores)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">plot_roc_curve</span><span style="color:#ADBAC7;">(fpr, tpr, label</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.plot(fpr, tpr, </span><span style="color:#F69D50;">linewidth</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">label)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.plot([</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">], [</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">], </span><span style="color:#96D0FF;">&#39;k--&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.axis([</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.xlabel(</span><span style="color:#96D0FF;">&#39;False Positive Rate&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.ylabel(</span><span style="color:#96D0FF;">&#39;True Positive Rate&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_roc_curve(fpr, tpr)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.metrics </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> roc_curve</span></span>
<span class="line"><span style="color:#24292E;">fpr, tpr, thresholds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> roc_curve(y_train_5, y_scores)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">plot_roc_curve</span><span style="color:#24292E;">(fpr, tpr, label</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    plt.plot(fpr, tpr, </span><span style="color:#E36209;">linewidth</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">label)</span></span>
<span class="line"><span style="color:#24292E;">    plt.plot([</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&#39;k--&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.axis([</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    plt.xlabel(</span><span style="color:#032F62;">&#39;False Positive Rate&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.ylabel(</span><span style="color:#032F62;">&#39;True Positive Rate&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">plot_roc_curve(fpr, tpr)</span></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B05.png" alt=""></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">虚线表示纯随机分类器的ROC曲线; 一个好的分类器尽可能远离该线（朝左上角）。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">比较分类器的一种方法是测量曲线下面积（AUC）。完美分类器的ROC AUC等于1，而纯随机分类器的ROC AUC等于0.5。 Scikit-Learn提供了计算ROC AUC的函数：</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">虚线表示纯随机分类器的ROC曲线; 一个好的分类器尽可能远离该线（朝左上角）。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">比较分类器的一种方法是测量曲线下面积（AUC）。完美分类器的ROC AUC等于1，而纯随机分类器的ROC AUC等于0.5。 Scikit-Learn提供了计算ROC AUC的函数：</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.metrics </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> roc_auc_score</span></span>
<span class="line"><span style="color:#ADBAC7;">roc_auc_score(y_train_5, y_scores)</span></span>
<span class="line"><span style="color:#6CB6FF;">0.9624496555967156</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.metrics </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> roc_auc_score</span></span>
<span class="line"><span style="color:#24292E;">roc_auc_score(y_train_5, y_scores)</span></span>
<span class="line"><span style="color:#005CC5;">0.9624496555967156</span></span></code></pre></div>`,25);function h(s,u,m,f,g,v){const o=t,e=d("ClientOnly");return l(),r("div",null,[B,y(e,null,{default:i(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),D(o,{key:0,article:s.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),E])}const x=c(_,[["render",h]]);export{P as __pageData,x as default};
