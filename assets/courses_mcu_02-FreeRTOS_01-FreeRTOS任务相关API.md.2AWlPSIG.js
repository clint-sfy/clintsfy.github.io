import{_ as p}from"./chunks/ArticleMetadata.1_--bNMz.js";import{_ as t,D as e,o as n,c as r,I as d,w as A,k,a as g,R as C,b as y,e as D}from"./chunks/framework.Dn7lIAzt.js";import"./chunks/md5.vgHT5zCM.js";const b=JSON.parse('{"title":"FreeRTOS任务相关API","description":"","frontmatter":{"title":"FreeRTOS任务相关API","author":"阿源","date":"2024/05/01 16:30","categories":["FreeRTOS"],"tags":["FreeRTOS"]},"headers":[],"relativePath":"courses/mcu/02-FreeRTOS/01-FreeRTOS任务相关API.md","filePath":"courses/mcu/02-FreeRTOS/01-FreeRTOS任务相关API.md","lastUpdated":1714551766000}'),B={name:"courses/mcu/02-FreeRTOS/01-FreeRTOS任务相关API.md"},F=k("h1",{id:"freertos任务相关api",tabindex:"-1"},[g("FreeRTOS任务相关API "),k("a",{class:"header-anchor",href:"#freertos任务相关api","aria-label":'Permalink to "FreeRTOS任务相关API"'},"​")],-1),c=C(`<p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/freertos/20240430203312.png" alt=""></p><h2 id="_1-任务创建和删除api函数" tabindex="-1">1. 任务创建和删除API函数 <a class="header-anchor" href="#_1-任务创建和删除api函数" aria-label="Permalink to &quot;1. 任务创建和删除API函数&quot;">​</a></h2><h3 id="_1-1-xtaskcreate" tabindex="-1">1.1 xTaskCreate() <a class="header-anchor" href="#_1-1-xtaskcreate" aria-label="Permalink to &quot;1.1 xTaskCreate()&quot;">​</a></h3><p>此函数用于使用<strong>动态的方式创建任务</strong>，任务的任务控制块以及任务的栈空间所需的内存，均由 FreeRTOS <strong>从 FreeRTOS 管理的堆中分配</strong>。</p><p>若使用此函数，需要在 FreeRTOSConfig.h 文件中将宏 configSUPPORT_DYNAMIC_ALLOCATION 配置为 1。</p><p>此函数创建的任务会立刻进入就绪态，由任务调度器调度运行。</p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/freertos/20240430203430.png" style="zoom:50%;"><p>任务栈栈顶，在任务切换时的任务上下文保存、任务恢复息息相关</p><p>每个任务都有属于自己的任务控制块，类似身份证</p><h3 id="_1-2-xtaskcreatestatic" tabindex="-1">1.2 xTaskCreateStatic() <a class="header-anchor" href="#_1-2-xtaskcreatestatic" aria-label="Permalink to &quot;1.2 xTaskCreateStatic()&quot;">​</a></h3><p>此函数用于使用<strong>静态的方式创建任务</strong>，任务的任务控制块以及任务的栈空间所需的内存，需要由<strong>用户分配提供</strong></p><p>若使用此函数 ，需要在FreeRTOSConfig.h 文件中将宏configSUPPORT_STATIC_ALLOCATION配置为 1。</p><p>此函数创建的任务会立刻进入就绪态，由任务调度器调度运行。</p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/freertos/20240430203809.png" style="zoom:50%;"><h3 id="_1-3-vtaskdelete" tabindex="-1">1.3 vTaskDelete() <a class="header-anchor" href="#_1-3-vtaskdelete" aria-label="Permalink to &quot;1.3 vTaskDelete()&quot;">​</a></h3><p>此函数用于<strong>删除已被创建的任务</strong>，被删除的任务将被从就绪态任务列表、阻塞态任务列表、挂起态任务列表和事件列表中移除</p><p>当<strong>传入的参数为NULL</strong>，则代表<strong>删除任务自身</strong>（当前正在运行的任务)</p><p>要注意的是，<strong>空闲任务</strong>会负责释放<strong>被删除任务</strong>中由<strong>系统分配的内存</strong>（动态），但是由用户在任务删除前申请的内存（静态）， 则需要由用户在任务被删除前<strong>提前释放</strong>，否则<strong>将导致内存泄露</strong>。（静态创建的要提前释放）</p><p>若使用此函数，需要在 FreeRTOSConfig.h文件中将宏 INCLUDE_vTaskDelete配置为1。</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/freertos/20240430204457.png" alt=""></p><h2 id="_2-实验-任务创建和删除-动态方法" tabindex="-1">2. 实验：任务创建和删除（动态方法） <a class="header-anchor" href="#_2-实验-任务创建和删除-动态方法" aria-label="Permalink to &quot;2. 实验：任务创建和删除（动态方法）&quot;">​</a></h2><p>start_task用来创建其他三个任务</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* START_TASK 任务 配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 包括: 任务句柄 任务优先级 堆栈大小 创建任务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> START_TASK_PRIO</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                   /* 任务优先级 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> START_STK_SIZE</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  128</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                 /* 任务堆栈大小 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskHandle_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            StartTask_Handler;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  /* 任务句柄 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> start_task</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pvParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        /* 任务函数 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* TASK1 任务 配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 包括: 任务句柄 任务优先级 堆栈大小 创建任务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TASK1_PRIO</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      2</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                   /* 任务优先级 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TASK1_STK_SIZE</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  128</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                 /* 任务堆栈大小 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskHandle_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            Task1Task_Handler;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  /* 任务句柄 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> task1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pvParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">             /* 任务函数 */</span></span></code></pre></div><h3 id="_2-1-入口函数" tabindex="-1">2.1 入口函数 <a class="header-anchor" href="#_2-1-入口函数" aria-label="Permalink to &quot;2.1 入口函数&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> freertos_demo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    lcd_show_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">220</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;STM32&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, RED);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    lcd_show_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">47</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">220</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Task Create &amp; Del&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, RED);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    lcd_show_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">76</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">220</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ATOM@ALIENTEK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, RED);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    lcd_draw_rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">110</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">115</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">314</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, BLACK);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    lcd_draw_rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">125</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">110</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">234</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">314</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, BLACK);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    lcd_draw_line</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">130</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">115</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">130</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, BLACK);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    lcd_draw_line</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">125</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">130</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">234</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">130</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, BLACK);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    lcd_show_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">110</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Task1: 000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, BLUE);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    lcd_show_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">135</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">110</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Task2: 000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, BLUE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    xTaskCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskFunction_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> )start_task,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            /* 任务函数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;start_task&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">          /* 任务名称 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">       )START_STK_SIZE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        /* 任务堆栈大小 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          )</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                  /* 传入给任务函数的参数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">UBaseType_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )START_TASK_PRIO,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">       /* 任务优先级 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskHandle_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">StartTask_Handler);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   /* 任务句柄 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    vTaskStartScheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> start_task</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pvParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    taskENTER_CRITICAL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">           /* 进入临界区 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /* 创建任务1 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    xTaskCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskFunction_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> )task1,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                 /* 任务函数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;task1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">               /* 任务名称 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">       )TASK1_STK_SIZE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        /* 任务堆栈大小 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          )</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                  /* 传入给任务函数的参数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">UBaseType_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )TASK1_PRIO,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            /* 任务优先级 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskHandle_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Task1Task_Handler);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   /* 任务句柄 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /* 创建任务2 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    xTaskCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskFunction_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> )task2,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                 /* 任务函数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;task2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">               /* 任务名称 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">       )TASK2_STK_SIZE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        /* 任务堆栈大小 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          )</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                  /* 传入给任务函数的参数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">UBaseType_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )TASK2_PRIO,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            /* 任务优先级 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskHandle_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Task2Task_Handler);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   /* 任务句柄 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    /* 创建任务3 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    xTaskCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskFunction_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> )task3,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                 /* 任务函数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;task3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">               /* 任务名称 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint16_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">       )TASK3_STK_SIZE,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        /* 任务堆栈大小 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          )</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                  /* 传入给任务函数的参数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">UBaseType_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    )TASK3_PRIO,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            /* 任务优先级 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskHandle_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Task3Task_Handler);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   /* 任务句柄 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    vTaskDelete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(StartTask_Handler);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> /* 删除开始任务 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    taskEXIT_CRITICAL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            /* 退出临界区 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_2-2-任务一" tabindex="-1">2.2 任务一 <a class="header-anchor" href="#_2-2-任务一" aria-label="Permalink to &quot;2.2 任务一&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> task1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pvParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> task1_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        lcd_fill</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">131</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">114</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">313</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">lcd_discolor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">task1_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        lcd_show_xnum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">71</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, task1_num, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, BLUE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        vTaskDelay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_2-3-任务二" tabindex="-1">2.3 任务二 <a class="header-anchor" href="#_2-3-任务二" aria-label="Permalink to &quot;2.3 任务二&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> task2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pvParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> task2_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        lcd_fill</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">126</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">131</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">313</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">lcd_discolor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">task2_num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)]);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        lcd_show_xnum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">191</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, task2_num, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, BLUE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        vTaskDelay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_2-4-任务三" tabindex="-1">2.4 任务三 <a class="header-anchor" href="#_2-4-任务三" aria-label="Permalink to &quot;2.4 任务三&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> task3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pvParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> key_scan</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            case</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KEY0_PRES:</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                     /* 删除任务1 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Task1Task_Handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">                    vTaskDelete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Task1Task_Handler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    Task1Task_Handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            case</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KEY1_PRES:</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                     /* 删除任务2 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Task2Task_Handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">                    vTaskDelete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Task2Task_Handler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    Task2Task_Handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        vTaskDelay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="_3-函数详解" tabindex="-1">3. 函数详解 <a class="header-anchor" href="#_3-函数详解" aria-label="Permalink to &quot;3. 函数详解&quot;">​</a></h2><h3 id="_3-1-任务创建和删除" tabindex="-1">3.1 任务创建和删除 <a class="header-anchor" href="#_3-1-任务创建和删除" aria-label="Permalink to &quot;3.1 任务创建和删除&quot;">​</a></h3><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/freertos/20240501162151.png" style="zoom:50%;"><ul><li><p>1、寄存器xPSR被初始为0x01000000，其中bit24被置1，表示使用Thumb指令</p></li><li><p>2、寄存器PC被初始化为任务函数指针vTask_A，这样当某次任务切换后，任务A获得CPU控制权，任务函数vTask_A被出栈到PC寄存器，之后会执行任务A的代码</p></li><li><p>3、LR寄存器初始化为函数指针prvTaskExitError，这是由移植层提供的一个出错处理函数。</p></li><li><p>4、子函数的调用通过寄存器R0~R3传递参数，创建任务时，我们传入的参数被保存到R0中，用来向任务传递参数</p></li></ul><h3 id="_3-2-初始化" tabindex="-1">3.2 初始化 <a class="header-anchor" href="#_3-2-初始化" aria-label="Permalink to &quot;3.2 初始化&quot;">​</a></h3><p>调用prvInitialiseNewTask初始化任务控制块中的成员</p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/freertos/20240501143806.png" style="zoom:67%;"><p>调用prvAddNewTaskToReadyList添加新创建任务到就绪列表中</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/freertos/20240501144028.png" alt=""></p><h3 id="_3-3-删除任务源码" tabindex="-1">3.3 删除任务源码 <a class="header-anchor" href="#_3-3-删除任务源码" aria-label="Permalink to &quot;3.3 删除任务源码&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/freertos/20240501143230.png" alt=""></p><h2 id="_4-实验任务创建和删除-静态方法" tabindex="-1">4. 实验任务创建和删除（静态方法） <a class="header-anchor" href="#_4-实验任务创建和删除-静态方法" aria-label="Permalink to &quot;4. 实验任务创建和删除（静态方法）&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">configMINIMAL_STACK_SIZE  在那个FreeRTOSConfig.h里去找，这个默认是128</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">static</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> StackType_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  IdleTaskStack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[configMINIMAL_STACK_SIZE];</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        /* 空闲任务任务堆栈 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">static</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> StaticTask_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IdleTaskTCB;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                                    /* 空闲任务控制块 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">static</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> StackType_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  TimerTaskStack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[configTIMER_TASK_STACK_DEPTH];</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   /* 定时器服务任务堆栈 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">static</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> StaticTask_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TimerTaskTCB;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                                   /* 定时器服务任务控制块 */</span></span></code></pre></div><h3 id="_4-1-手动分配内存的函数" tabindex="-1">4.1 手动分配内存的函数 <a class="header-anchor" href="#_4-1-手动分配内存的函数" aria-label="Permalink to &quot;4.1 手动分配内存的函数&quot;">​</a></h3><p>空闲任务内存分配</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@brief</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">       获取空闲任务地任务堆栈和任务控制块内存，因为本例程使用的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                静态内存，因此空闲任务的任务堆栈和任务控制块的内存就应该</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                有用户来提供，FreeRTOS提供了接口函数vApplicationGetIdleTaskMemory()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                实现此函数即可。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">       ppxIdleTaskTCBBuffer</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">:任务控制块内存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                ppxIdleTaskStackBuffer:任务堆栈内存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                pulIdleTaskStackSize:任务堆栈大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@retval</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      无</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> vApplicationGetIdleTaskMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">StaticTask_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">ppxIdleTaskTCBBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">                                   StackType_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  **</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">ppxIdleTaskStackBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                                   uint32_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">     *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pulIdleTaskStackSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ppxIdleTaskTCBBuffer   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">IdleTaskTCB;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 任务控制块的地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ppxIdleTaskStackBuffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IdleTaskStack;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 自己定义的数组大小</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pulIdleTaskStackSize   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //空闲任务堆栈大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>软件定时器任务分配</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@brief</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">       获取定时器服务任务的任务堆栈和任务控制块内存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">       ppxTimerTaskTCBBuffer</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">:任务控制块内存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                ppxTimerTaskStackBuffer:任务堆栈内存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                pulTimerTaskStackSize:任务堆栈大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">@retval</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      无</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> vApplicationGetTimerTaskMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">StaticTask_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">ppxTimerTaskTCBBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">                                    StackType_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  **</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">ppxTimerTaskStackBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                                    uint32_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">     *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pulTimerTaskStackSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ppxTimerTaskTCBBuffer  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">TimerTaskTCB;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ppxTimerTaskStackBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TimerTaskStack;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pulTimerTaskStackSize  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> configTIMER_TASK_STACK_DEPTH;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_4-2-任务配置" tabindex="-1">4.2 任务配置 <a class="header-anchor" href="#_4-2-任务配置" aria-label="Permalink to &quot;4.2 任务配置&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* START_TASK 任务 配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 包括: 任务句柄 任务优先级 堆栈大小 创建任务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> START_TASK_PRIO</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                   /* 任务优先级 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> START_STK_SIZE</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  128</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                 /* 任务堆栈大小 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">StackType_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> StartTaskStack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[START_STK_SIZE];</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> /* 任务堆栈 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">StaticTask_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            StartTaskTCB;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">       /* 任务控制块 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskHandle_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            StartTask_Handler;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  /* 任务句柄 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> start_task</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pvParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        /* 任务函数 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* TASK1 任务 配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 包括: 任务句柄 任务优先级 堆栈大小 创建任务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TASK1_PRIO</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      2</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                   /* 任务优先级 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TASK1_STK_SIZE</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  128</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                 /* 任务堆栈大小 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">StackType_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> Task1TaskStack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[TASK1_STK_SIZE];</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> /* 任务堆栈 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">StaticTask_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            Task1TaskTCB;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">       /* 任务控制块 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskHandle_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            Task1Task_Handler;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  /* 任务句柄 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> task1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pvParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">             /* 任务函数 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/* TASK2 任务 配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> * 包括: 任务句柄 任务优先级 堆栈大小 创建任务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TASK2_PRIO</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      3</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                   /* 任务优先级 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TASK2_STK_SIZE</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  128</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                 /* 任务堆栈大小 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">StackType_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> Task2TaskStack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[TASK2_STK_SIZE];</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> /* 任务堆栈 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">StaticTask_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            Task2TaskTCB;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">       /* 任务控制块 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">TaskHandle_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            Task2Task_Handler;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  /* 任务句柄 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> task2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pvParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">             /* 任务函数 */</span></span></code></pre></div><h2 id="_5-任务挂起和恢复函数" tabindex="-1">5. 任务挂起和恢复函数 <a class="header-anchor" href="#_5-任务挂起和恢复函数" aria-label="Permalink to &quot;5. 任务挂起和恢复函数&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/freertos/20240501160618.png" alt=""></p><h3 id="_5-1-vtasksuspend" tabindex="-1">5.1 vTaskSuspend() <a class="header-anchor" href="#_5-1-vtasksuspend" aria-label="Permalink to &quot;5.1 vTaskSuspend()&quot;">​</a></h3><p>此函数用于挂起任务，若使用此函数，需要在FreeRTOSConfig.h文件中将宏INCLUDE_vTaskSuspend 配置为 1。</p><p>无论优先级如何，被挂起的任务都将不再被执行，直到任务被恢复。</p><p>此函数并不支持嵌套，不论使用此函数重复挂起任务多少次，只需调用一次恢复任务的函数，那么任务就不再被挂起。</p><h3 id="_5-2-vtaskresume" tabindex="-1">5.2 vTaskResume() <a class="header-anchor" href="#_5-2-vtaskresume" aria-label="Permalink to &quot;5.2 vTaskResume()&quot;">​</a></h3><p>此函数用于在任务中恢复被挂起的任务， 若使用此函数，需要在 FreeRTOSConfig.h 文件中将宏 INCLUDE_vTaskSuspend 配置为 1。</p><p>不论一个任务被函数 vTaskSuspend()挂起多少次，只需要使用函数 vTakResume()恢复一次，就可以继续运行。</p><h3 id="_5-3-xtaskresumefromisr" tabindex="-1">5.3 xTaskResumeFromISR() <a class="header-anchor" href="#_5-3-xtaskresumefromisr" aria-label="Permalink to &quot;5.3 xTaskResumeFromISR()&quot;">​</a></h3><p>此函数用于在中断中恢复被挂起的任务， 若使用此函数，需要在 FreeRTOSConfig.h 文件中将宏 INCLUDE_xTaskResumeFromISR 配置为 1。</p><p>不论一个任务被函数 vTaskSuspend()挂起多少次，只需要使用函数 vTakResumeFromISR()恢复一次，就可以继续运行。</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/freertos/20240501160932.png" alt=""></p><h2 id="_6-实验-任务挂起和恢复" tabindex="-1">6. 实验：任务挂起和恢复 <a class="header-anchor" href="#_6-实验-任务挂起和恢复" aria-label="Permalink to &quot;6. 实验：任务挂起和恢复&quot;">​</a></h2><p>只用修改任务三即可</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> task3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">pvParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> key_scan</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            case</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KEY0_PRES:</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                     /* 挂起任务1 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">                vTaskSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Task1Task_Handler);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            case</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> KEY1_PRES:</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                     /* 恢复任务1 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">                vTaskResume</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Task1Task_Handler);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        vTaskDelay</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><a href="https://www.freertos.org/RTOS-Cortex-M3-M4.html" target="_blank" rel="noreferrer">https://www.freertos.org/RTOS-Cortex-M3-M4.html</a></p><p>建议将所有优先级位分配为抢占优先级位，不保留任何优先级位作为子优先级位。任何其他配置都会使configMAX_SYSCALL_INTERRUPT_PRIORITY 设置与分配给各个外设中断的优先级之间的直接关系变得复杂。</p><p>大多数系统默认为所需的配置，但 STM32 驱动程序库除外。如果您使用带有 STM32 驱动程序库的 STM32，请在 RTOS 启动之前通过调用 <code>NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );</code> <strong>确保将所有优先级位分配为抢占优先级位</strong>。</p><p>以“FromISR”结尾的 FreeRTOS 函数是中断安全的，但即使这些函数也无法从逻辑优先级高于configMAX_SYSCALL_INTERRUPT_PRIORITY 定义的优先级的中断调用（configMAX_SYSCALL_INTERRUPT_PRIORITY 在FreeRTOSConfig.h 头文件中定义）。因此，任何使用 RTOS API 函数的中断服务例程都必须手动将其优先级设置为在数值上等于或大于configMAX_SYSCALL_INTERRUPT_PRIORITY 设置的值。这可确保中断的逻辑优先级等于或小于configMAX_SYSCALL_INTERRUPT_PRIORITY 设置。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">HAL_NVIC_SetPriority</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(KEY2_INT_IRQn,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div>`,74);function o(s,E,T,_,u,m){const h=p,l=e("ClientOnly");return n(),r("div",null,[F,d(l,null,{default:A(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),y(h,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),c])}const R=t(B,[["render",o]]);export{b as __pageData,R as default};
