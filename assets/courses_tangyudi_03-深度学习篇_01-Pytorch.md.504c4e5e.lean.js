import{_ as t}from"./chunks/ArticleMetadata.e10718d6.js";import{_ as c,v as l,b as r,E as y,O as i,F as p,L as A,R as C,M as D,C as F,B as d}from"./chunks/framework.2aeb816e.js";import"./chunks/md5.772bbdf1.js";const q=JSON.parse('{"title":"Pytorch","description":"","frontmatter":{"title":"Pytorch","author":"阿源","date":"2023/07/13 12:00","categories":["深度学习快速入门"],"tags":["深度学习","Pytorch"]},"headers":[],"relativePath":"courses/tangyudi/03-深度学习篇/01-Pytorch.md","filePath":"courses/tangyudi/03-深度学习篇/01-Pytorch.md","lastUpdated":1691327334000}'),B={name:"courses/tangyudi/03-深度学习篇/01-Pytorch.md"},E=p("h1",{id:"pytorch",tabindex:"-1"},[A("Pytorch "),p("a",{class:"header-anchor",href:"#pytorch","aria-label":'Permalink to "Pytorch"'},"​")],-1),m=C(`<h2 id="_1-神经网络实战分类与回归任务" tabindex="-1">1. 神经网络实战分类与回归任务 <a class="header-anchor" href="#_1-神经网络实战分类与回归任务" aria-label="Permalink to &quot;1. 神经网络实战分类与回归任务&quot;">​</a></h2><h3 id="mnist分类任务" tabindex="-1">Mnist分类任务 <a class="header-anchor" href="#mnist分类任务" aria-label="Permalink to &quot;Mnist分类任务&quot;">​</a></h3><ul><li>网络基本构建与训练方法，常用函数解析</li><li>torch.nn.functional模块</li><li>nn.Module模块</li></ul><h3 id="读取mnist数据集" tabindex="-1">读取Mnist数据集 <a class="header-anchor" href="#读取mnist数据集" aria-label="Permalink to &quot;读取Mnist数据集&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> pathlib </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> Path</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6CB6FF;">DATA_PATH</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Path(</span><span style="color:#96D0FF;">&quot;data&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">PATH</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">DATA_PATH</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;mnist&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6CB6FF;">PATH</span><span style="color:#ADBAC7;">.mkdir(</span><span style="color:#F69D50;">parents</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">exist_ok</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6CB6FF;">URL</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;http://deeplearning.net/data/mnist/&quot;</span></span>
<span class="line"><span style="color:#6CB6FF;">FILENAME</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;mnist.pkl.gz&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">not</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">PATH</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">FILENAME</span><span style="color:#ADBAC7;">).exists():</span></span>
<span class="line"><span style="color:#ADBAC7;">        content </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> requests.get(</span><span style="color:#6CB6FF;">URL</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">FILENAME</span><span style="color:#ADBAC7;">).content</span></span>
<span class="line"><span style="color:#ADBAC7;">        (</span><span style="color:#6CB6FF;">PATH</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">FILENAME</span><span style="color:#ADBAC7;">).open(</span><span style="color:#96D0FF;">&quot;wb&quot;</span><span style="color:#ADBAC7;">).write(content)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> pickle</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> gzip</span></span>
<span class="line"><span style="color:#768390;"># 784是mnist数据集每个样本的像素点个数</span></span>
<span class="line"><span style="color:#F47067;">with</span><span style="color:#ADBAC7;"> gzip.open((</span><span style="color:#6CB6FF;">PATH</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">FILENAME</span><span style="color:#ADBAC7;">).as_posix(), </span><span style="color:#96D0FF;">&quot;rb&quot;</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> f:</span></span>
<span class="line"><span style="color:#ADBAC7;">        ((x_train, y_train), (x_valid, y_valid), _) </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pickle.load(f, </span><span style="color:#F69D50;">encoding</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;latin-1&quot;</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pathlib </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Path</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">DATA_PATH</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Path(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">PATH</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DATA_PATH</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mnist&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">PATH</span><span style="color:#24292E;">.mkdir(</span><span style="color:#E36209;">parents</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exist_ok</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://deeplearning.net/data/mnist/&quot;</span></span>
<span class="line"><span style="color:#005CC5;">FILENAME</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mnist.pkl.gz&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">PATH</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FILENAME</span><span style="color:#24292E;">).exists():</span></span>
<span class="line"><span style="color:#24292E;">        content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.get(</span><span style="color:#005CC5;">URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FILENAME</span><span style="color:#24292E;">).content</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#005CC5;">PATH</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FILENAME</span><span style="color:#24292E;">).open(</span><span style="color:#032F62;">&quot;wb&quot;</span><span style="color:#24292E;">).write(content)</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pickle</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> gzip</span></span>
<span class="line"><span style="color:#6A737D;"># 784是mnist数据集每个样本的像素点个数</span></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> gzip.open((</span><span style="color:#005CC5;">PATH</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FILENAME</span><span style="color:#24292E;">).as_posix(), </span><span style="color:#032F62;">&quot;rb&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">        ((x_train, y_train), (x_valid, y_valid), _) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pickle.load(f, </span><span style="color:#E36209;">encoding</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;latin-1&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> matplotlib </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> pyplot</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> numpy </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">pyplot.imshow(x_train[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">].reshape((</span><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;">)), </span><span style="color:#F69D50;">cmap</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;gray&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(x_train.shape)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> matplotlib </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pyplot</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pyplot.imshow(x_train[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].reshape((</span><span style="color:#005CC5;">28</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">28</span><span style="color:#24292E;">)), </span><span style="color:#E36209;">cmap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;gray&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(x_train.shape)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 注意数据需转换成tensor才能参与后续建模训练</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch</span></span>
<span class="line"><span style="color:#768390;"># torch 里面的结构不一样</span></span>
<span class="line"><span style="color:#ADBAC7;">x_train, y_train, x_valid, y_valid </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">map</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    torch.tensor, (x_train, y_train, x_valid, y_valid)</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;"># n 样本个数  c 像素点（特征）个数</span></span>
<span class="line"><span style="color:#ADBAC7;">n, c </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> x_train.shape</span></span>
<span class="line"><span style="color:#ADBAC7;">x_train, x_train.shape, y_train.min(), y_train.max()</span></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(x_train, y_train)</span></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(x_train.shape)</span></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(y_train.min(), y_train.max())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 注意数据需转换成tensor才能参与后续建模训练</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch</span></span>
<span class="line"><span style="color:#6A737D;"># torch 里面的结构不一样</span></span>
<span class="line"><span style="color:#24292E;">x_train, y_train, x_valid, y_valid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">map</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    torch.tensor, (x_train, y_train, x_valid, y_valid)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># n 样本个数  c 像素点（特征）个数</span></span>
<span class="line"><span style="color:#24292E;">n, c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x_train.shape</span></span>
<span class="line"><span style="color:#24292E;">x_train, x_train.shape, y_train.min(), y_train.max()</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(x_train, y_train)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(x_train.shape)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(y_train.min(), y_train.max())</span></span></code></pre></div><h3 id="torch-nn-functional-很多层和函数在这里都会见到" tabindex="-1">torch.nn.functional 很多层和函数在这里都会见到 <a class="header-anchor" href="#torch-nn-functional-很多层和函数在这里都会见到" aria-label="Permalink to &quot;torch.nn.functional 很多层和函数在这里都会见到&quot;">​</a></h3><p>torch.nn.functional中有很多功能，后续会常用的。那什么时候使用nn.Module，什么时候使用nn.functional呢？一般情况下，如果模型有可学习的参数，最好用nn.Module，其他情况nn.functional相对更简单一些</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch.nn.functional </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> F</span></span>
<span class="line"><span style="color:#768390;"># 损失函数  交叉熵cross_entropy</span></span>
<span class="line"><span style="color:#ADBAC7;">loss_func </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> F.cross_entropy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">model</span><span style="color:#ADBAC7;">(xb):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">## mm矩阵乘法   x*w+b</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> xb.mm(weights) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> bias</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch.nn.functional </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> F</span></span>
<span class="line"><span style="color:#6A737D;"># 损失函数  交叉熵cross_entropy</span></span>
<span class="line"><span style="color:#24292E;">loss_func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> F.cross_entropy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">model</span><span style="color:#24292E;">(xb):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">## mm矩阵乘法   x*w+b</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> xb.mm(weights) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> bias</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">bs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">64</span></span>
<span class="line"><span style="color:#ADBAC7;">xb </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> x_train[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">:bs]  </span><span style="color:#768390;"># a mini-batch from x</span></span>
<span class="line"><span style="color:#ADBAC7;">yb </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> y_train[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">:bs]</span></span>
<span class="line"><span style="color:#768390;"># 权重参数  随机初始化</span></span>
<span class="line"><span style="color:#768390;"># [64 * 784] [784 * 10]</span></span>
<span class="line"><span style="color:#ADBAC7;">weights </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.randn([</span><span style="color:#6CB6FF;">784</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">], </span><span style="color:#F69D50;">dtype</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.float,  </span><span style="color:#F69D50;">requires_grad</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">) </span></span>
<span class="line"><span style="color:#ADBAC7;">bs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">64</span></span>
<span class="line"><span style="color:#ADBAC7;">bias </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.zeros(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">requires_grad</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;"># loss_func(预测值 ，标签)</span></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(loss_func(model(xb), yb))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">bs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span></span>
<span class="line"><span style="color:#24292E;">xb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x_train[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:bs]  </span><span style="color:#6A737D;"># a mini-batch from x</span></span>
<span class="line"><span style="color:#24292E;">yb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y_train[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:bs]</span></span>
<span class="line"><span style="color:#6A737D;"># 权重参数  随机初始化</span></span>
<span class="line"><span style="color:#6A737D;"># [64 * 784] [784 * 10]</span></span>
<span class="line"><span style="color:#24292E;">weights </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.randn([</span><span style="color:#005CC5;">784</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">], </span><span style="color:#E36209;">dtype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.float,  </span><span style="color:#E36209;">requires_grad</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">bs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span></span>
<span class="line"><span style="color:#24292E;">bias </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.zeros(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#E36209;">requires_grad</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># loss_func(预测值 ，标签)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(loss_func(model(xb), yb))</span></span></code></pre></div><h3 id="创建一个model来更简化代码" tabindex="-1">创建一个model来更简化代码 <a class="header-anchor" href="#创建一个model来更简化代码" aria-label="Permalink to &quot;创建一个model来更简化代码&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">必须继承nn.Module且在其构造函数中需调用nn.Module的构造函数</span></span>
<span class="line"><span style="color:#adbac7;">无需写反向传播函数，nn.Module能够利用autograd自动实现反向传播</span></span>
<span class="line"><span style="color:#adbac7;">Module中的可学习参数可以通过named_parameters()或者parameters()返回迭代器</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">必须继承nn.Module且在其构造函数中需调用nn.Module的构造函数</span></span>
<span class="line"><span style="color:#24292e;">无需写反向传播函数，nn.Module能够利用autograd自动实现反向传播</span></span>
<span class="line"><span style="color:#24292e;">Module中的可学习参数可以通过named_parameters()或者parameters()返回迭代器</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> torch </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> nn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Mnist_NN</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">nn</span><span style="color:#ADBAC7;">.</span><span style="color:#6CB6FF;">Module</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">__init__</span><span style="color:#ADBAC7;">(self):</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">().</span><span style="color:#6CB6FF;">__init__</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.hidden1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.Linear(</span><span style="color:#6CB6FF;">784</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">) </span><span style="color:#768390;"># 输入层 和 中间层1</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.hidden2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.Linear(</span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">256</span><span style="color:#ADBAC7;">) </span><span style="color:#768390;"># 中间层1 和 中间层2</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.out  </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.Linear(</span><span style="color:#6CB6FF;">256</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;"># 中间层2 和 输出层（10个类别）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">forward</span><span style="color:#ADBAC7;">(self, x): </span><span style="color:#768390;"># 前向传播 </span></span>
<span class="line"><span style="color:#ADBAC7;">        x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> F.relu(</span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.hidden1(x))</span></span>
<span class="line"><span style="color:#ADBAC7;">        x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> F.relu(</span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.hidden2(x))</span></span>
<span class="line"><span style="color:#ADBAC7;">        x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.out(x)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> x</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> torch </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> nn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mnist_NN</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nn</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.hidden1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.Linear(</span><span style="color:#005CC5;">784</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># 输入层 和 中间层1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.hidden2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.Linear(</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">256</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># 中间层1 和 中间层2</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.out  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.Linear(</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"># 中间层2 和 输出层（10个类别）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(self, x): </span><span style="color:#6A737D;"># 前向传播 </span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> F.relu(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.hidden1(x))</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> F.relu(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.hidden2(x))</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.out(x)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">net </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Mnist_NN()</span></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(net)</span></span>
<span class="line"><span style="color:#ADBAC7;">Mnist_NN(</span></span>
<span class="line"><span style="color:#ADBAC7;">  (hidden1): Linear(</span><span style="color:#F69D50;">in_features</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">784</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">out_features</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">bias</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">  (hidden2): Linear(</span><span style="color:#F69D50;">in_features</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">out_features</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">256</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">bias</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">  (out): Linear(</span><span style="color:#F69D50;">in_features</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">256</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">out_features</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">bias</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 可以打印我们定义好名字里的权重和偏置项</span></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> name, parameter </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> net.named_parameters():</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(name, parameter,parameter.size())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">net </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Mnist_NN()</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(net)</span></span>
<span class="line"><span style="color:#24292E;">Mnist_NN(</span></span>
<span class="line"><span style="color:#24292E;">  (hidden1): Linear(</span><span style="color:#E36209;">in_features</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">784</span><span style="color:#24292E;">, </span><span style="color:#E36209;">out_features</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, </span><span style="color:#E36209;">bias</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  (hidden2): Linear(</span><span style="color:#E36209;">in_features</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, </span><span style="color:#E36209;">out_features</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">, </span><span style="color:#E36209;">bias</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  (out): Linear(</span><span style="color:#E36209;">in_features</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">, </span><span style="color:#E36209;">out_features</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#E36209;">bias</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 可以打印我们定义好名字里的权重和偏置项</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name, parameter </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> net.named_parameters():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(name, parameter,parameter.size())</span></span></code></pre></div><h3 id="使用tensordataset和dataloader来简化" tabindex="-1">使用TensorDataset和DataLoader来简化 <a class="header-anchor" href="#使用tensordataset和dataloader来简化" aria-label="Permalink to &quot;使用TensorDataset和DataLoader来简化&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> torch.utils.data </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> TensorDataset</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> torch.utils.data </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> DataLoader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">train_ds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TensorDataset(x_train, y_train)</span></span>
<span class="line"><span style="color:#768390;"># batch_size 打包完数     shuffle 洗牌操作</span></span>
<span class="line"><span style="color:#ADBAC7;">train_dl </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DataLoader(train_ds, </span><span style="color:#F69D50;">batch_size</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">bs, </span><span style="color:#F69D50;">shuffle</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">valid_ds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TensorDataset(x_valid, y_valid)</span></span>
<span class="line"><span style="color:#ADBAC7;">valid_dl </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DataLoader(valid_ds, </span><span style="color:#F69D50;">batch_size</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">bs </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> torch.utils.data </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> TensorDataset</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> torch.utils.data </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> DataLoader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">train_ds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TensorDataset(x_train, y_train)</span></span>
<span class="line"><span style="color:#6A737D;"># batch_size 打包完数     shuffle 洗牌操作</span></span>
<span class="line"><span style="color:#24292E;">train_dl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DataLoader(train_ds, </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bs, </span><span style="color:#E36209;">shuffle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">valid_ds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TensorDataset(x_valid, y_valid)</span></span>
<span class="line"><span style="color:#24292E;">valid_dl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DataLoader(valid_ds, </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bs </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">get_data</span><span style="color:#ADBAC7;">(train_ds, valid_ds, bs):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> (</span></span>
<span class="line"><span style="color:#ADBAC7;">        DataLoader(train_ds, </span><span style="color:#F69D50;">batch_size</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">bs, </span><span style="color:#F69D50;">shuffle</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">        DataLoader(valid_ds, </span><span style="color:#F69D50;">batch_size</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">bs </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#768390;"># 一般在训练模型时加上model.train()，这样会正常使用Batch Normalization和 Dropout</span></span>
<span class="line"><span style="color:#768390;"># 测试的时候一般选择model.eval()，这样就不会使用Batch Normalization和 Dropout</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_data</span><span style="color:#24292E;">(train_ds, valid_ds, bs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        DataLoader(train_ds, </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bs, </span><span style="color:#E36209;">shuffle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        DataLoader(valid_ds, </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">bs </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#6A737D;"># 一般在训练模型时加上model.train()，这样会正常使用Batch Normalization和 Dropout</span></span>
<span class="line"><span style="color:#6A737D;"># 测试的时候一般选择model.eval()，这样就不会使用Batch Normalization和 Dropout</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> numpy </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># steps迭代次数 ，model , loss_func , opt 优化器, train_dl 数据的打包器, valid_dl</span></span>
<span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">fit</span><span style="color:#ADBAC7;">(steps, model, loss_func, opt, train_dl, valid_dl):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> step </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">range</span><span style="color:#ADBAC7;">(steps):</span></span>
<span class="line"><span style="color:#ADBAC7;">        model.train()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> xb, yb </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> train_dl:</span></span>
<span class="line"><span style="color:#ADBAC7;">            loss_batch(model, loss_func, xb, yb, opt)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># 验证的模式  不更新权重</span></span>
<span class="line"><span style="color:#ADBAC7;">        model.eval()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">with</span><span style="color:#ADBAC7;"> torch.no_grad():</span></span>
<span class="line"><span style="color:#ADBAC7;">            losses, nums </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">zip</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">[loss_batch(model, loss_func, xb, yb) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> xb, yb </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> valid_dl]</span></span>
<span class="line"><span style="color:#ADBAC7;">            )</span></span>
<span class="line"><span style="color:#ADBAC7;">        val_loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.sum(np.multiply(losses, nums)) </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> np.sum(nums)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;当前step:&#39;</span><span style="color:#F47067;">+</span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(step), </span><span style="color:#96D0FF;">&#39;验证集损失：&#39;</span><span style="color:#F47067;">+</span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(val_loss))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># steps迭代次数 ，model , loss_func , opt 优化器, train_dl 数据的打包器, valid_dl</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fit</span><span style="color:#24292E;">(steps, model, loss_func, opt, train_dl, valid_dl):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> step </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(steps):</span></span>
<span class="line"><span style="color:#24292E;">        model.train()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> xb, yb </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> train_dl:</span></span>
<span class="line"><span style="color:#24292E;">            loss_batch(model, loss_func, xb, yb, opt)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 验证的模式  不更新权重</span></span>
<span class="line"><span style="color:#24292E;">        model.eval()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> torch.no_grad():</span></span>
<span class="line"><span style="color:#24292E;">            losses, nums </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">[loss_batch(model, loss_func, xb, yb) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> xb, yb </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> valid_dl]</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span>
<span class="line"><span style="color:#24292E;">        val_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.sum(np.multiply(losses, nums)) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> np.sum(nums)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;当前step:&#39;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(step), </span><span style="color:#032F62;">&#39;验证集损失：&#39;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(val_loss))</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> torch </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> optim</span></span>
<span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">get_model</span><span style="color:#ADBAC7;">():</span></span>
<span class="line"><span style="color:#ADBAC7;">    model </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Mnist_NN()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> model, optim.SGD(model.parameters(), </span><span style="color:#F69D50;">lr</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.001</span><span style="color:#ADBAC7;">) </span><span style="color:#768390;"># lr学习率</span></span>
<span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">loss_batch</span><span style="color:#ADBAC7;">(model, loss_func, xb, yb, opt</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> loss_func(model(xb), yb)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> opt </span><span style="color:#F47067;">is</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">not</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">        loss.backward() </span><span style="color:#768390;"># 算梯度</span></span>
<span class="line"><span style="color:#ADBAC7;">        opt.step()      </span><span style="color:#768390;"># 沿着梯度更新</span></span>
<span class="line"><span style="color:#ADBAC7;">        opt.zero_grad() </span><span style="color:#768390;"># 清0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> loss.item(), </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(xb) </span><span style="color:#768390;"># 损失 , 训练样本总数（要算平均）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> torch </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> optim</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_model</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Mnist_NN()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model, optim.SGD(model.parameters(), </span><span style="color:#E36209;">lr</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.001</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># lr学习率</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loss_batch</span><span style="color:#24292E;">(model, loss_func, xb, yb, opt</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loss_func(model(xb), yb)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> opt </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        loss.backward() </span><span style="color:#6A737D;"># 算梯度</span></span>
<span class="line"><span style="color:#24292E;">        opt.step()      </span><span style="color:#6A737D;"># 沿着梯度更新</span></span>
<span class="line"><span style="color:#24292E;">        opt.zero_grad() </span><span style="color:#6A737D;"># 清0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loss.item(), </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(xb) </span><span style="color:#6A737D;"># 损失 , 训练样本总数（要算平均）</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">train_dl, valid_dl </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> get_data(train_ds, valid_ds, bs)</span></span>
<span class="line"><span style="color:#ADBAC7;">model, opt </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> get_model()</span></span>
<span class="line"><span style="color:#ADBAC7;">fit(</span><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;">, model, loss_func, opt, train_dl, valid_dl)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">train_dl, valid_dl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_data(train_ds, valid_ds, bs)</span></span>
<span class="line"><span style="color:#24292E;">model, opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_model()</span></span>
<span class="line"><span style="color:#24292E;">fit(</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, model, loss_func, opt, train_dl, valid_dl)</span></span></code></pre></div><h2 id="_2-利用pytorch神经网络进行气温预测" tabindex="-1">2. 利用pytorch神经网络进行气温预测 <a class="header-anchor" href="#_2-利用pytorch神经网络进行气温预测" aria-label="Permalink to &quot;2. 利用pytorch神经网络进行气温预测&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> numpy </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> np</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> pandas </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> pd </span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> matplotlib.pyplot </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> plt</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch.optim </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> optim</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> warnings</span></span>
<span class="line"><span style="color:#ADBAC7;">warnings.filterwarnings(</span><span style="color:#96D0FF;">&quot;ignore&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">%</span><span style="color:#ADBAC7;">matplotlib inline</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">features </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pd.read_csv(</span><span style="color:#96D0FF;">&#39;temps.csv&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#看看数据长什么样子</span></span>
<span class="line"><span style="color:#ADBAC7;">features.head()</span></span>
<span class="line"><span style="color:#ADBAC7;">	year	month	day	week	temp_2	temp_1	average	actual	friend</span></span>
<span class="line"><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">2016</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">	Fri	</span><span style="color:#6CB6FF;">45</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">45</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">45.6</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">45</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">29</span></span>
<span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">2016</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">	Sat	</span><span style="color:#6CB6FF;">44</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">45</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">45.7</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">44</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">61</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">2016</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">	Sun	</span><span style="color:#6CB6FF;">45</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">44</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">45.8</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">41</span><span style="color:#ADBAC7;">	</span><span style="color:#6CB6FF;">56</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pandas </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pd </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> matplotlib.pyplot </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> plt</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch.optim </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> optim</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> warnings</span></span>
<span class="line"><span style="color:#24292E;">warnings.filterwarnings(</span><span style="color:#032F62;">&quot;ignore&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">matplotlib inline</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.read_csv(</span><span style="color:#032F62;">&#39;temps.csv&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#看看数据长什么样子</span></span>
<span class="line"><span style="color:#24292E;">features.head()</span></span>
<span class="line"><span style="color:#24292E;">	year	month	day	week	temp_2	temp_1	average	actual	friend</span></span>
<span class="line"><span style="color:#005CC5;">0</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">2016</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">	Fri	</span><span style="color:#005CC5;">45</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">45</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">45.6</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">45</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">29</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">2016</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">	Sat	</span><span style="color:#005CC5;">44</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">45</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">45.7</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">44</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">61</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">2016</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">	Sun	</span><span style="color:#005CC5;">45</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">44</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">45.8</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">41</span><span style="color:#24292E;">	</span><span style="color:#005CC5;">56</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">数据表中:</span></span>
<span class="line"><span style="color:#adbac7;">year,moth,day,week分别表示的具体的时间</span></span>
<span class="line"><span style="color:#adbac7;">temp_2：前天的最高温度值</span></span>
<span class="line"><span style="color:#adbac7;">temp_1：昨天的最高温度值</span></span>
<span class="line"><span style="color:#adbac7;">average：在历史中，每年这一天的平均最高温度值</span></span>
<span class="line"><span style="color:#adbac7;">actual：这就是我们的标签值了，当天的真实最高温度</span></span>
<span class="line"><span style="color:#adbac7;">friend：这一列可能是凑热闹的，你的朋友猜测的可能值，咱们不管它就好了</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">数据表中:</span></span>
<span class="line"><span style="color:#24292e;">year,moth,day,week分别表示的具体的时间</span></span>
<span class="line"><span style="color:#24292e;">temp_2：前天的最高温度值</span></span>
<span class="line"><span style="color:#24292e;">temp_1：昨天的最高温度值</span></span>
<span class="line"><span style="color:#24292e;">average：在历史中，每年这一天的平均最高温度值</span></span>
<span class="line"><span style="color:#24292e;">actual：这就是我们的标签值了，当天的真实最高温度</span></span>
<span class="line"><span style="color:#24292e;">friend：这一列可能是凑热闹的，你的朋友猜测的可能值，咱们不管它就好了</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;数据维度:&#39;</span><span style="color:#ADBAC7;">, features.shape)</span></span>
<span class="line"><span style="color:#ADBAC7;">数据维度: (</span><span style="color:#6CB6FF;">348</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;数据维度:&#39;</span><span style="color:#24292E;">, features.shape)</span></span>
<span class="line"><span style="color:#24292E;">数据维度: (</span><span style="color:#005CC5;">348</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 处理时间数据</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> datetime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 分别得到年，月，日</span></span>
<span class="line"><span style="color:#ADBAC7;">years </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> features[</span><span style="color:#96D0FF;">&#39;year&#39;</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">months </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> features[</span><span style="color:#96D0FF;">&#39;month&#39;</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">days </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> features[</span><span style="color:#96D0FF;">&#39;day&#39;</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># datetime格式</span></span>
<span class="line"><span style="color:#ADBAC7;">dates </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">int</span><span style="color:#ADBAC7;">(year)) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;-&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">int</span><span style="color:#ADBAC7;">(month)) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;-&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">int</span><span style="color:#ADBAC7;">(day)) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> year, month, day </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">zip</span><span style="color:#ADBAC7;">(years, months, days)]</span></span>
<span class="line"><span style="color:#ADBAC7;">dates </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [datetime.datetime.strptime(date, </span><span style="color:#96D0FF;">&#39;%Y-%m-</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> date </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> dates]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">dates[:</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">[datetime.datetime(</span><span style="color:#6CB6FF;">2016</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;"> datetime.datetime(</span><span style="color:#6CB6FF;">2016</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;"> datetime.datetime(</span><span style="color:#6CB6FF;">2016</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;"> datetime.datetime(</span><span style="color:#6CB6FF;">2016</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;"> datetime.datetime(</span><span style="color:#6CB6FF;">2016</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 处理时间数据</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> datetime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 分别得到年，月，日</span></span>
<span class="line"><span style="color:#24292E;">years </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> features[</span><span style="color:#032F62;">&#39;year&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">months </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> features[</span><span style="color:#032F62;">&#39;month&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">days </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> features[</span><span style="color:#032F62;">&#39;day&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># datetime格式</span></span>
<span class="line"><span style="color:#24292E;">dates </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(year)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(month)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(day)) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> year, month, day </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(years, months, days)]</span></span>
<span class="line"><span style="color:#24292E;">dates </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [datetime.datetime.strptime(date, </span><span style="color:#032F62;">&#39;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> date </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> dates]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">dates[:</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[datetime.datetime(</span><span style="color:#005CC5;">2016</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;"> datetime.datetime(</span><span style="color:#005CC5;">2016</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;"> datetime.datetime(</span><span style="color:#005CC5;">2016</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;"> datetime.datetime(</span><span style="color:#005CC5;">2016</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;"> datetime.datetime(</span><span style="color:#005CC5;">2016</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)]</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 准备画图</span></span>
<span class="line"><span style="color:#768390;"># 指定默认风格</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.style.use(</span><span style="color:#96D0FF;">&#39;fivethirtyeight&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 设置布局</span></span>
<span class="line"><span style="color:#ADBAC7;">fig, ((ax1, ax2), (ax3, ax4)) </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> plt.subplots(</span><span style="color:#F69D50;">nrows</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">ncols</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">figsize</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">fig.autofmt_xdate(</span><span style="color:#F69D50;">rotation</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">45</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 标签值</span></span>
<span class="line"><span style="color:#ADBAC7;">ax1.plot(dates, features[</span><span style="color:#96D0FF;">&#39;actual&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">ax1.set_xlabel(</span><span style="color:#96D0FF;">&#39;&#39;</span><span style="color:#ADBAC7;">); ax1.set_ylabel(</span><span style="color:#96D0FF;">&#39;Temperature&#39;</span><span style="color:#ADBAC7;">); ax1.set_title(</span><span style="color:#96D0FF;">&#39;Max Temp&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 昨天</span></span>
<span class="line"><span style="color:#ADBAC7;">ax2.plot(dates, features[</span><span style="color:#96D0FF;">&#39;temp_1&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">ax2.set_xlabel(</span><span style="color:#96D0FF;">&#39;&#39;</span><span style="color:#ADBAC7;">); ax2.set_ylabel(</span><span style="color:#96D0FF;">&#39;Temperature&#39;</span><span style="color:#ADBAC7;">); ax2.set_title(</span><span style="color:#96D0FF;">&#39;Previous Max Temp&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 前天</span></span>
<span class="line"><span style="color:#ADBAC7;">ax3.plot(dates, features[</span><span style="color:#96D0FF;">&#39;temp_2&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">ax3.set_xlabel(</span><span style="color:#96D0FF;">&#39;Date&#39;</span><span style="color:#ADBAC7;">); ax3.set_ylabel(</span><span style="color:#96D0FF;">&#39;Temperature&#39;</span><span style="color:#ADBAC7;">); ax3.set_title(</span><span style="color:#96D0FF;">&#39;Two Days Prior Max Temp&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 我的逗逼朋友</span></span>
<span class="line"><span style="color:#ADBAC7;">ax4.plot(dates, features[</span><span style="color:#96D0FF;">&#39;friend&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">ax4.set_xlabel(</span><span style="color:#96D0FF;">&#39;Date&#39;</span><span style="color:#ADBAC7;">); ax4.set_ylabel(</span><span style="color:#96D0FF;">&#39;Temperature&#39;</span><span style="color:#ADBAC7;">); ax4.set_title(</span><span style="color:#96D0FF;">&#39;Friend Estimate&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.tight_layout(</span><span style="color:#F69D50;">pad</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 准备画图</span></span>
<span class="line"><span style="color:#6A737D;"># 指定默认风格</span></span>
<span class="line"><span style="color:#24292E;">plt.style.use(</span><span style="color:#032F62;">&#39;fivethirtyeight&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设置布局</span></span>
<span class="line"><span style="color:#24292E;">fig, ((ax1, ax2), (ax3, ax4)) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> plt.subplots(</span><span style="color:#E36209;">nrows</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">ncols</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">figsize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">fig.autofmt_xdate(</span><span style="color:#E36209;">rotation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">45</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 标签值</span></span>
<span class="line"><span style="color:#24292E;">ax1.plot(dates, features[</span><span style="color:#032F62;">&#39;actual&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">ax1.set_xlabel(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">); ax1.set_ylabel(</span><span style="color:#032F62;">&#39;Temperature&#39;</span><span style="color:#24292E;">); ax1.set_title(</span><span style="color:#032F62;">&#39;Max Temp&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 昨天</span></span>
<span class="line"><span style="color:#24292E;">ax2.plot(dates, features[</span><span style="color:#032F62;">&#39;temp_1&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">ax2.set_xlabel(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">); ax2.set_ylabel(</span><span style="color:#032F62;">&#39;Temperature&#39;</span><span style="color:#24292E;">); ax2.set_title(</span><span style="color:#032F62;">&#39;Previous Max Temp&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 前天</span></span>
<span class="line"><span style="color:#24292E;">ax3.plot(dates, features[</span><span style="color:#032F62;">&#39;temp_2&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">ax3.set_xlabel(</span><span style="color:#032F62;">&#39;Date&#39;</span><span style="color:#24292E;">); ax3.set_ylabel(</span><span style="color:#032F62;">&#39;Temperature&#39;</span><span style="color:#24292E;">); ax3.set_title(</span><span style="color:#032F62;">&#39;Two Days Prior Max Temp&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 我的逗逼朋友</span></span>
<span class="line"><span style="color:#24292E;">ax4.plot(dates, features[</span><span style="color:#032F62;">&#39;friend&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">ax4.set_xlabel(</span><span style="color:#032F62;">&#39;Date&#39;</span><span style="color:#24292E;">); ax4.set_ylabel(</span><span style="color:#032F62;">&#39;Temperature&#39;</span><span style="color:#24292E;">); ax4.set_title(</span><span style="color:#032F62;">&#39;Friend Estimate&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.tight_layout(</span><span style="color:#E36209;">pad</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 独热编码</span></span>
<span class="line"><span style="color:#ADBAC7;">features </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pd.get_dummies(features)</span></span>
<span class="line"><span style="color:#ADBAC7;">features.head(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 标签</span></span>
<span class="line"><span style="color:#ADBAC7;">labels </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.array(features[</span><span style="color:#96D0FF;">&#39;actual&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 在特征中去掉标签</span></span>
<span class="line"><span style="color:#ADBAC7;">features</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> features.drop(</span><span style="color:#96D0FF;">&#39;actual&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">axis</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 名字单独保存一下，以备后患</span></span>
<span class="line"><span style="color:#ADBAC7;">feature_list </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">list</span><span style="color:#ADBAC7;">(features.columns)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 转换成合适的格式</span></span>
<span class="line"><span style="color:#ADBAC7;">features </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.array(features)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">features.shape</span></span>
<span class="line"><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">348</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> preprocessing</span></span>
<span class="line"><span style="color:#ADBAC7;">input_features </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> preprocessing.StandardScaler().fit_transform(features)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 独热编码</span></span>
<span class="line"><span style="color:#24292E;">features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.get_dummies(features)</span></span>
<span class="line"><span style="color:#24292E;">features.head(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 标签</span></span>
<span class="line"><span style="color:#24292E;">labels </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.array(features[</span><span style="color:#032F62;">&#39;actual&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 在特征中去掉标签</span></span>
<span class="line"><span style="color:#24292E;">features</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> features.drop(</span><span style="color:#032F62;">&#39;actual&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">axis</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 名字单独保存一下，以备后患</span></span>
<span class="line"><span style="color:#24292E;">feature_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(features.columns)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 转换成合适的格式</span></span>
<span class="line"><span style="color:#24292E;">features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.array(features)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">features.shape</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">348</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">14</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> preprocessing</span></span>
<span class="line"><span style="color:#24292E;">input_features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preprocessing.StandardScaler().fit_transform(features)</span></span></code></pre></div><h3 id="_1-构建网络模型" tabindex="-1">1 构建网络模型 <a class="header-anchor" href="#_1-构建网络模型" aria-label="Permalink to &quot;1 构建网络模型&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.tensor(input_features, </span><span style="color:#F69D50;">dtype</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">float</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">y </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.tensor(labels, </span><span style="color:#F69D50;">dtype</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">float</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 权重参数初始化</span></span>
<span class="line"><span style="color:#ADBAC7;">weights </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.randn((</span><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">), </span><span style="color:#F69D50;">dtype</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">float</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">requires_grad</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">) </span></span>
<span class="line"><span style="color:#ADBAC7;">biases </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.randn(</span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">dtype</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">float</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">requires_grad</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">) </span></span>
<span class="line"><span style="color:#ADBAC7;">weights2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.randn((</span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">), </span><span style="color:#F69D50;">dtype</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">float</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">requires_grad</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">) </span></span>
<span class="line"><span style="color:#ADBAC7;">biases2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.randn(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">dtype</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">float</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">requires_grad</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">learning_rate </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.001</span><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">losses </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">range</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1000</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 计算隐层</span></span>
<span class="line"><span style="color:#ADBAC7;">    hidden </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> x.mm(weights) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> biases</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 加入激活函数</span></span>
<span class="line"><span style="color:#ADBAC7;">    hidden </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">  .relu(hidden)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 预测结果</span></span>
<span class="line"><span style="color:#ADBAC7;">    predictions </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> hidden.mm(weights2) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> biases2</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 通计算损失</span></span>
<span class="line"><span style="color:#ADBAC7;">    loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.mean((predictions </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> y) </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">) </span></span>
<span class="line"><span style="color:#ADBAC7;">    losses.append(loss.data.numpy())</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 打印损失值</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">%</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;loss:&#39;</span><span style="color:#ADBAC7;">, loss)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#返向传播计算</span></span>
<span class="line"><span style="color:#ADBAC7;">    loss.backward()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#更新参数</span></span>
<span class="line"><span style="color:#ADBAC7;">    weights.data.add_(</span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> learning_rate </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> weights.grad.data)  </span></span>
<span class="line"><span style="color:#ADBAC7;">    biases.data.add_(</span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> learning_rate </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> biases.grad.data)</span></span>
<span class="line"><span style="color:#ADBAC7;">    weights2.data.add_(</span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> learning_rate </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> weights2.grad.data)</span></span>
<span class="line"><span style="color:#ADBAC7;">    biases2.data.add_(</span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> learning_rate </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> biases2.grad.data)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 每次迭代都得记得清空</span></span>
<span class="line"><span style="color:#ADBAC7;">    weights.grad.data.zero_()</span></span>
<span class="line"><span style="color:#ADBAC7;">    biases.grad.data.zero_()</span></span>
<span class="line"><span style="color:#ADBAC7;">    weights2.grad.data.zero_()</span></span>
<span class="line"><span style="color:#ADBAC7;">    biases2.grad.data.zero_()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">predictions.shape</span></span>
<span class="line"><span style="color:#ADBAC7;">torch.Size([</span><span style="color:#6CB6FF;">348</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.tensor(input_features, </span><span style="color:#E36209;">dtype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.tensor(labels, </span><span style="color:#E36209;">dtype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 权重参数初始化</span></span>
<span class="line"><span style="color:#24292E;">weights </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.randn((</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">), </span><span style="color:#E36209;">dtype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">, </span><span style="color:#E36209;">requires_grad</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">biases </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.randn(</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, </span><span style="color:#E36209;">dtype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">, </span><span style="color:#E36209;">requires_grad</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">weights2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.randn((</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#E36209;">dtype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">, </span><span style="color:#E36209;">requires_grad</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">biases2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.randn(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">dtype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">, </span><span style="color:#E36209;">requires_grad</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">learning_rate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.001</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">losses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 计算隐层</span></span>
<span class="line"><span style="color:#24292E;">    hidden </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.mm(weights) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> biases</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 加入激活函数</span></span>
<span class="line"><span style="color:#24292E;">    hidden </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  .relu(hidden)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 预测结果</span></span>
<span class="line"><span style="color:#24292E;">    predictions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hidden.mm(weights2) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> biases2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 通计算损失</span></span>
<span class="line"><span style="color:#24292E;">    loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.mean((predictions </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> y) </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    losses.append(loss.data.numpy())</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 打印损失值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;loss:&#39;</span><span style="color:#24292E;">, loss)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#返向传播计算</span></span>
<span class="line"><span style="color:#24292E;">    loss.backward()</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#更新参数</span></span>
<span class="line"><span style="color:#24292E;">    weights.data.add_(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> learning_rate </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> weights.grad.data)  </span></span>
<span class="line"><span style="color:#24292E;">    biases.data.add_(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> learning_rate </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> biases.grad.data)</span></span>
<span class="line"><span style="color:#24292E;">    weights2.data.add_(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> learning_rate </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> weights2.grad.data)</span></span>
<span class="line"><span style="color:#24292E;">    biases2.data.add_(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> learning_rate </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> biases2.grad.data)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 每次迭代都得记得清空</span></span>
<span class="line"><span style="color:#24292E;">    weights.grad.data.zero_()</span></span>
<span class="line"><span style="color:#24292E;">    biases.grad.data.zero_()</span></span>
<span class="line"><span style="color:#24292E;">    weights2.grad.data.zero_()</span></span>
<span class="line"><span style="color:#24292E;">    biases2.grad.data.zero_()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">predictions.shape</span></span>
<span class="line"><span style="color:#24292E;">torch.Size([</span><span style="color:#005CC5;">348</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span></code></pre></div><h3 id="_2-更简单的构建网络模型" tabindex="-1">2 更简单的构建网络模型 <a class="header-anchor" href="#_2-更简单的构建网络模型" aria-label="Permalink to &quot;2 更简单的构建网络模型&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">input_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> input_features.shape[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">hidden_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">128</span></span>
<span class="line"><span style="color:#ADBAC7;">output_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span></span>
<span class="line"><span style="color:#ADBAC7;">batch_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">16</span></span>
<span class="line"><span style="color:#ADBAC7;">my_nn </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.nn.Sequential(</span></span>
<span class="line"><span style="color:#ADBAC7;">    torch.nn.Linear(input_size, hidden_size),</span></span>
<span class="line"><span style="color:#ADBAC7;">    torch.nn.Sigmoid(),</span></span>
<span class="line"><span style="color:#ADBAC7;">    torch.nn.Linear(hidden_size, output_size),</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;"># 损失函数</span></span>
<span class="line"><span style="color:#ADBAC7;">cost </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.nn.MSELoss(</span><span style="color:#F69D50;">reduction</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;mean&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;"># adam 论文引文第一 </span></span>
<span class="line"><span style="color:#ADBAC7;">optimizer </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.optim.Adam(my_nn.parameters(), </span><span style="color:#F69D50;">lr</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.001</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input_features.shape[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">hidden_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span></span>
<span class="line"><span style="color:#24292E;">output_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">batch_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span></span>
<span class="line"><span style="color:#24292E;">my_nn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.nn.Sequential(</span></span>
<span class="line"><span style="color:#24292E;">    torch.nn.Linear(input_size, hidden_size),</span></span>
<span class="line"><span style="color:#24292E;">    torch.nn.Sigmoid(),</span></span>
<span class="line"><span style="color:#24292E;">    torch.nn.Linear(hidden_size, output_size),</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 损失函数</span></span>
<span class="line"><span style="color:#24292E;">cost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.nn.MSELoss(</span><span style="color:#E36209;">reduction</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;mean&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># adam 论文引文第一 </span></span>
<span class="line"><span style="color:#24292E;">optimizer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.optim.Adam(my_nn.parameters(), </span><span style="color:#E36209;">lr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.001</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 训练网络</span></span>
<span class="line"><span style="color:#ADBAC7;">losses </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">range</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1000</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    batch_loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># MINI-Batch方法来进行训练    batch_size间隔</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> start </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">range</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(input_features), batch_size):</span></span>
<span class="line"><span style="color:#ADBAC7;">        end </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> start </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> batch_size </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> start </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> batch_size </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(input_features) </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(input_features)</span></span>
<span class="line"><span style="color:#ADBAC7;">        xx </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.tensor(input_features[start:end], </span><span style="color:#F69D50;">dtype</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.float, </span><span style="color:#F69D50;">requires_grad</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        yy </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.tensor(labels[start:end], </span><span style="color:#F69D50;">dtype</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.float, </span><span style="color:#F69D50;">requires_grad</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        prediction </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> my_nn(xx)</span></span>
<span class="line"><span style="color:#ADBAC7;">        loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cost(prediction, yy)</span></span>
<span class="line"><span style="color:#ADBAC7;">        optimizer.zero_grad()</span></span>
<span class="line"><span style="color:#ADBAC7;">        loss.backward(</span><span style="color:#F69D50;">retain_graph</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        optimizer.step()</span></span>
<span class="line"><span style="color:#ADBAC7;">        batch_loss.append(loss.data.numpy())</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 打印损失</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">%</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">        losses.append(np.mean(batch_loss))</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(i, np.mean(batch_loss))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 训练网络</span></span>
<span class="line"><span style="color:#24292E;">losses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    batch_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># MINI-Batch方法来进行训练    batch_size间隔</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(input_features), batch_size):</span></span>
<span class="line"><span style="color:#24292E;">        end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> batch_size </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> batch_size </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(input_features) </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(input_features)</span></span>
<span class="line"><span style="color:#24292E;">        xx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.tensor(input_features[start:end], </span><span style="color:#E36209;">dtype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.float, </span><span style="color:#E36209;">requires_grad</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        yy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.tensor(labels[start:end], </span><span style="color:#E36209;">dtype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.float, </span><span style="color:#E36209;">requires_grad</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        prediction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> my_nn(xx)</span></span>
<span class="line"><span style="color:#24292E;">        loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cost(prediction, yy)</span></span>
<span class="line"><span style="color:#24292E;">        optimizer.zero_grad()</span></span>
<span class="line"><span style="color:#24292E;">        loss.backward(</span><span style="color:#E36209;">retain_graph</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        optimizer.step()</span></span>
<span class="line"><span style="color:#24292E;">        batch_loss.append(loss.data.numpy())</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 打印损失</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        losses.append(np.mean(batch_loss))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(i, np.mean(batch_loss))</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.tensor(input_features, </span><span style="color:#F69D50;">dtype</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.float)</span></span>
<span class="line"><span style="color:#ADBAC7;">predict </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> my_nn(x).data.numpy()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.tensor(input_features, </span><span style="color:#E36209;">dtype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.float)</span></span>
<span class="line"><span style="color:#24292E;">predict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> my_nn(x).data.numpy()</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 转换日期格式</span></span>
<span class="line"><span style="color:#ADBAC7;">dates </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">int</span><span style="color:#ADBAC7;">(year)) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;-&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">int</span><span style="color:#ADBAC7;">(month)) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;-&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">int</span><span style="color:#ADBAC7;">(day)) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> year, month, day </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">zip</span><span style="color:#ADBAC7;">(years, months, days)]</span></span>
<span class="line"><span style="color:#ADBAC7;">dates </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [datetime.datetime.strptime(date, </span><span style="color:#96D0FF;">&#39;%Y-%m-</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> date </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> dates]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 创建一个表格来存日期和其对应的标签数值</span></span>
<span class="line"><span style="color:#ADBAC7;">true_data </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pd.DataFrame(</span><span style="color:#F69D50;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span><span style="color:#96D0FF;">&#39;date&#39;</span><span style="color:#ADBAC7;">: dates, </span><span style="color:#96D0FF;">&#39;actual&#39;</span><span style="color:#ADBAC7;">: labels})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 同理，再创建一个来存日期和其对应的模型预测值</span></span>
<span class="line"><span style="color:#ADBAC7;">months </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> features[:, feature_list.index(</span><span style="color:#96D0FF;">&#39;month&#39;</span><span style="color:#ADBAC7;">)]</span></span>
<span class="line"><span style="color:#ADBAC7;">days </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> features[:, feature_list.index(</span><span style="color:#96D0FF;">&#39;day&#39;</span><span style="color:#ADBAC7;">)]</span></span>
<span class="line"><span style="color:#ADBAC7;">years </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> features[:, feature_list.index(</span><span style="color:#96D0FF;">&#39;year&#39;</span><span style="color:#ADBAC7;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">test_dates </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">int</span><span style="color:#ADBAC7;">(year)) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;-&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">int</span><span style="color:#ADBAC7;">(month)) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;-&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">int</span><span style="color:#ADBAC7;">(day)) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> year, month, day </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">zip</span><span style="color:#ADBAC7;">(years, months, days)]</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">test_dates </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [datetime.datetime.strptime(date, </span><span style="color:#96D0FF;">&#39;%Y-%m-</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> date </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> test_dates]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">predictions_data </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pd.DataFrame(</span><span style="color:#F69D50;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span><span style="color:#96D0FF;">&#39;date&#39;</span><span style="color:#ADBAC7;">: test_dates, </span><span style="color:#96D0FF;">&#39;prediction&#39;</span><span style="color:#ADBAC7;">: predict.reshape(</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 转换日期格式</span></span>
<span class="line"><span style="color:#24292E;">dates </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(year)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(month)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(day)) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> year, month, day </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(years, months, days)]</span></span>
<span class="line"><span style="color:#24292E;">dates </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [datetime.datetime.strptime(date, </span><span style="color:#032F62;">&#39;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> date </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> dates]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 创建一个表格来存日期和其对应的标签数值</span></span>
<span class="line"><span style="color:#24292E;">true_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.DataFrame(</span><span style="color:#E36209;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;date&#39;</span><span style="color:#24292E;">: dates, </span><span style="color:#032F62;">&#39;actual&#39;</span><span style="color:#24292E;">: labels})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 同理，再创建一个来存日期和其对应的模型预测值</span></span>
<span class="line"><span style="color:#24292E;">months </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> features[:, feature_list.index(</span><span style="color:#032F62;">&#39;month&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">days </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> features[:, feature_list.index(</span><span style="color:#032F62;">&#39;day&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">years </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> features[:, feature_list.index(</span><span style="color:#032F62;">&#39;year&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test_dates </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(year)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(month)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(day)) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> year, month, day </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(years, months, days)]</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">test_dates </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [datetime.datetime.strptime(date, </span><span style="color:#032F62;">&#39;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> date </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> test_dates]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">predictions_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.DataFrame(</span><span style="color:#E36209;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;date&#39;</span><span style="color:#24292E;">: test_dates, </span><span style="color:#032F62;">&#39;prediction&#39;</span><span style="color:#24292E;">: predict.reshape(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)})</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 真实值</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.plot(true_data[</span><span style="color:#96D0FF;">&#39;date&#39;</span><span style="color:#ADBAC7;">], true_data[</span><span style="color:#96D0FF;">&#39;actual&#39;</span><span style="color:#ADBAC7;">], </span><span style="color:#96D0FF;">&#39;b-&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">label</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;actual&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 预测值</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.plot(predictions_data[</span><span style="color:#96D0FF;">&#39;date&#39;</span><span style="color:#ADBAC7;">], predictions_data[</span><span style="color:#96D0FF;">&#39;prediction&#39;</span><span style="color:#ADBAC7;">], </span><span style="color:#96D0FF;">&#39;ro&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">label</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;prediction&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.xticks(</span><span style="color:#F69D50;">rotation</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;60&#39;</span><span style="color:#ADBAC7;">); </span></span>
<span class="line"><span style="color:#ADBAC7;">plt.legend()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 图名</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.xlabel(</span><span style="color:#96D0FF;">&#39;Date&#39;</span><span style="color:#ADBAC7;">); plt.ylabel(</span><span style="color:#96D0FF;">&#39;Maximum Temperature (F)&#39;</span><span style="color:#ADBAC7;">); plt.title(</span><span style="color:#96D0FF;">&#39;Actual and Predicted Values&#39;</span><span style="color:#ADBAC7;">)</span><span style="color:#FF938A;font-style:italic;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 真实值</span></span>
<span class="line"><span style="color:#24292E;">plt.plot(true_data[</span><span style="color:#032F62;">&#39;date&#39;</span><span style="color:#24292E;">], true_data[</span><span style="color:#032F62;">&#39;actual&#39;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&#39;b-&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">label</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;actual&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 预测值</span></span>
<span class="line"><span style="color:#24292E;">plt.plot(predictions_data[</span><span style="color:#032F62;">&#39;date&#39;</span><span style="color:#24292E;">], predictions_data[</span><span style="color:#032F62;">&#39;prediction&#39;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&#39;ro&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">label</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;prediction&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.xticks(</span><span style="color:#E36209;">rotation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;60&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">plt.legend()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 图名</span></span>
<span class="line"><span style="color:#24292E;">plt.xlabel(</span><span style="color:#032F62;">&#39;Date&#39;</span><span style="color:#24292E;">); plt.ylabel(</span><span style="color:#032F62;">&#39;Maximum Temperature (F)&#39;</span><span style="color:#24292E;">); plt.title(</span><span style="color:#032F62;">&#39;Actual and Predicted Values&#39;</span><span style="color:#24292E;">)</span><span style="color:#B31D28;font-style:italic;">;</span></span></code></pre></div><h2 id="_3-卷积神将网络参数解读" tabindex="-1">3. 卷积神将网络参数解读 <a class="header-anchor" href="#_3-卷积神将网络参数解读" aria-label="Permalink to &quot;3. 卷积神将网络参数解读&quot;">​</a></h2><h3 id="_1-构建卷积神经网络" tabindex="-1">1 构建卷积神经网络 <a class="header-anchor" href="#_1-构建卷积神经网络" aria-label="Permalink to &quot;1 构建卷积神经网络&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 卷积网络中的输入和层与传统神经网络有些区别，需重新设计，训练模块基本一致</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch.nn </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> nn</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch.optim </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> optim</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch.nn.functional </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> F</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> torchvision </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> datasets,transforms </span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> matplotlib.pyplot </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> plt</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> numpy </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> np</span></span>
<span class="line"><span style="color:#F47067;">%</span><span style="color:#ADBAC7;">matplotlib inline</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 卷积网络中的输入和层与传统神经网络有些区别，需重新设计，训练模块基本一致</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch.nn </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> nn</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch.optim </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> optim</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch.nn.functional </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> F</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> torchvision </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> datasets,transforms </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> matplotlib.pyplot </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> plt</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">matplotlib inline</span></span></code></pre></div><h3 id="_2-首先读取数据" tabindex="-1">2 首先读取数据 <a class="header-anchor" href="#_2-首先读取数据" aria-label="Permalink to &quot;2 首先读取数据&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 分别构建训练集和测试集（验证集）</span></span>
<span class="line"><span style="color:#768390;"># DataLoader来迭代取数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 定义超参数 </span></span>
<span class="line"><span style="color:#ADBAC7;">input_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;">  </span><span style="color:#768390;">#图像的总尺寸28*28</span></span>
<span class="line"><span style="color:#ADBAC7;">num_classes </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">  </span><span style="color:#768390;">#标签的种类数</span></span>
<span class="line"><span style="color:#ADBAC7;">num_epochs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">  </span><span style="color:#768390;">#训练的总循环周期</span></span>
<span class="line"><span style="color:#ADBAC7;">batch_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">  </span><span style="color:#768390;">#一个撮（批次）的大小，64张图片</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 训练集</span></span>
<span class="line"><span style="color:#ADBAC7;">train_dataset </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> datasets.MNIST(</span><span style="color:#F69D50;">root</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;./data&#39;</span><span style="color:#ADBAC7;">,  </span></span>
<span class="line"><span style="color:#ADBAC7;">                            </span><span style="color:#F69D50;">train</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">,   </span></span>
<span class="line"><span style="color:#ADBAC7;">                            </span><span style="color:#F69D50;">transform</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">transforms.ToTensor(),  </span></span>
<span class="line"><span style="color:#ADBAC7;">                            </span><span style="color:#F69D50;">download</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 测试集</span></span>
<span class="line"><span style="color:#ADBAC7;">test_dataset </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> datasets.MNIST(</span><span style="color:#F69D50;">root</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;./data&#39;</span><span style="color:#ADBAC7;">, </span></span>
<span class="line"><span style="color:#ADBAC7;">                           </span><span style="color:#F69D50;">train</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">False</span><span style="color:#ADBAC7;">, </span></span>
<span class="line"><span style="color:#ADBAC7;">                           </span><span style="color:#F69D50;">transform</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">transforms.ToTensor())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 构建batch数据</span></span>
<span class="line"><span style="color:#ADBAC7;">train_loader </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.utils.data.DataLoader(</span><span style="color:#F69D50;">dataset</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">train_dataset, </span></span>
<span class="line"><span style="color:#ADBAC7;">                                           </span><span style="color:#F69D50;">batch_size</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">batch_size, </span></span>
<span class="line"><span style="color:#ADBAC7;">                                           </span><span style="color:#F69D50;">shuffle</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">test_loader </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.utils.data.DataLoader(</span><span style="color:#F69D50;">dataset</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">test_dataset, </span></span>
<span class="line"><span style="color:#ADBAC7;">                                           </span><span style="color:#F69D50;">batch_size</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">batch_size, </span></span>
<span class="line"><span style="color:#ADBAC7;">                                           </span><span style="color:#F69D50;">shuffle</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 分别构建训练集和测试集（验证集）</span></span>
<span class="line"><span style="color:#6A737D;"># DataLoader来迭代取数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 定义超参数 </span></span>
<span class="line"><span style="color:#24292E;">input_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">28</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#图像的总尺寸28*28</span></span>
<span class="line"><span style="color:#24292E;">num_classes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#标签的种类数</span></span>
<span class="line"><span style="color:#24292E;">num_epochs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#训练的总循环周期</span></span>
<span class="line"><span style="color:#24292E;">batch_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#一个撮（批次）的大小，64张图片</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 训练集</span></span>
<span class="line"><span style="color:#24292E;">train_dataset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> datasets.MNIST(</span><span style="color:#E36209;">root</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;./data&#39;</span><span style="color:#24292E;">,  </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#E36209;">train</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,   </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#E36209;">transform</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">transforms.ToTensor(),  </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#E36209;">download</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 测试集</span></span>
<span class="line"><span style="color:#24292E;">test_dataset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> datasets.MNIST(</span><span style="color:#E36209;">root</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;./data&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#E36209;">train</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#E36209;">transform</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">transforms.ToTensor())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 构建batch数据</span></span>
<span class="line"><span style="color:#24292E;">train_loader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.utils.data.DataLoader(</span><span style="color:#E36209;">dataset</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">train_dataset, </span></span>
<span class="line"><span style="color:#24292E;">                                           </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">batch_size, </span></span>
<span class="line"><span style="color:#24292E;">                                           </span><span style="color:#E36209;">shuffle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">test_loader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.utils.data.DataLoader(</span><span style="color:#E36209;">dataset</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">test_dataset, </span></span>
<span class="line"><span style="color:#24292E;">                                           </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">batch_size, </span></span>
<span class="line"><span style="color:#24292E;">                                           </span><span style="color:#E36209;">shuffle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="_3-卷积网络模块构建" tabindex="-1">3 卷积网络模块构建 <a class="header-anchor" href="#_3-卷积网络模块构建" aria-label="Permalink to &quot;3 卷积网络模块构建&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 一般卷积层，relu层，池化层可以写成一个套餐</span></span>
<span class="line"><span style="color:#768390;"># 注意卷积最后结果还是一个特征图，需要把图转换成向量才能做分类或者回归任务</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">CNN</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">nn</span><span style="color:#ADBAC7;">.</span><span style="color:#6CB6FF;">Module</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">__init__</span><span style="color:#ADBAC7;">(self):</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">CNN</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">).</span><span style="color:#6CB6FF;">__init__</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.conv1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.Sequential(         </span><span style="color:#768390;"># 输入大小 (1, 28, 28)</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;"># 2d的卷积做任务   图像    3d的话就是视频数据</span></span>
<span class="line"><span style="color:#ADBAC7;">            nn.Conv2d(</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">in_channels</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,              </span><span style="color:#768390;"># 灰度图</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">out_channels</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">,            </span><span style="color:#768390;"># 要得到几多少个特征图  卷积核的个数</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">kernel_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">,              </span><span style="color:#768390;"># 卷积核大小 5*5</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">stride</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,                   </span><span style="color:#768390;"># 步长 </span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F69D50;">padding</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,                  </span><span style="color:#768390;"># 如果希望卷积后大小跟原来一样，需要设置padding=(kernel_size-1)/2 if stride=1</span></span>
<span class="line"><span style="color:#ADBAC7;">            ),                              </span><span style="color:#768390;"># 输出的特征图为 (16, 28, 28)</span></span>
<span class="line"><span style="color:#ADBAC7;">            nn.ReLU(),                      </span><span style="color:#768390;"># relu层</span></span>
<span class="line"><span style="color:#ADBAC7;">            nn.MaxPool2d(</span><span style="color:#F69D50;">kernel_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">),    </span><span style="color:#768390;"># 进行池化操作（2x2 区域）, 输出结果为： (16, 14, 14) 压缩完为原来的一半</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.conv2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.Sequential(         </span><span style="color:#768390;"># 下一个套餐的输入 (16, 14, 14)</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;"># 输出 16  需要32个特征</span></span>
<span class="line"><span style="color:#ADBAC7;">            nn.Conv2d(</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">),     </span><span style="color:#768390;"># 输出 (32, 14, 14) </span></span>
<span class="line"><span style="color:#ADBAC7;">            nn.ReLU(),                      </span><span style="color:#768390;"># relu层</span></span>
<span class="line"><span style="color:#ADBAC7;">            nn.Conv2d(</span><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">            nn.ReLU(),</span></span>
<span class="line"><span style="color:#ADBAC7;">            nn.MaxPool2d(</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">),                </span><span style="color:#768390;"># 输出 (32, 7, 7)</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.conv3 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.Sequential(         </span><span style="color:#768390;"># 下一个套餐的输入 (16, 14, 14)</span></span>
<span class="line"><span style="color:#ADBAC7;">            nn.Conv2d(</span><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">),     </span><span style="color:#768390;"># 输出 (32, 14, 14)</span></span>
<span class="line"><span style="color:#ADBAC7;">            nn.ReLU(),             </span><span style="color:#768390;"># 输出 (64, 7, 7)</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.out </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.Linear(</span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">)   </span><span style="color:#768390;"># 全连接层得到的结果</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">forward</span><span style="color:#ADBAC7;">(self, x): </span><span style="color:#768390;"># 前向传播</span></span>
<span class="line"><span style="color:#ADBAC7;">        x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.conv1(x) </span><span style="color:#768390;"># x有4个维度   bactch,c,h,w</span></span>
<span class="line"><span style="color:#ADBAC7;">        x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.conv2(x)</span></span>
<span class="line"><span style="color:#ADBAC7;">        x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.conv3(x)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># view = reshape   （bactch不变,特征个数） 四维变成二维矩阵</span></span>
<span class="line"><span style="color:#ADBAC7;">        x </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> x.view(x.size(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">), </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)           </span><span style="color:#768390;"># flatten操作，结果为：(batch_size, 32 * 7 * 7)</span></span>
<span class="line"><span style="color:#ADBAC7;">        output </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.out(x)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> output</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 一般卷积层，relu层，池化层可以写成一个套餐</span></span>
<span class="line"><span style="color:#6A737D;"># 注意卷积最后结果还是一个特征图，需要把图转换成向量才能做分类或者回归任务</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CNN</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nn</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">CNN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.conv1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.Sequential(         </span><span style="color:#6A737D;"># 输入大小 (1, 28, 28)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 2d的卷积做任务   图像    3d的话就是视频数据</span></span>
<span class="line"><span style="color:#24292E;">            nn.Conv2d(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">in_channels</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,              </span><span style="color:#6A737D;"># 灰度图</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">out_channels</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">,            </span><span style="color:#6A737D;"># 要得到几多少个特征图  卷积核的个数</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">kernel_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,              </span><span style="color:#6A737D;"># 卷积核大小 5*5</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">stride</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,                   </span><span style="color:#6A737D;"># 步长 </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#E36209;">padding</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,                  </span><span style="color:#6A737D;"># 如果希望卷积后大小跟原来一样，需要设置padding=(kernel_size-1)/2 if stride=1</span></span>
<span class="line"><span style="color:#24292E;">            ),                              </span><span style="color:#6A737D;"># 输出的特征图为 (16, 28, 28)</span></span>
<span class="line"><span style="color:#24292E;">            nn.ReLU(),                      </span><span style="color:#6A737D;"># relu层</span></span>
<span class="line"><span style="color:#24292E;">            nn.MaxPool2d(</span><span style="color:#E36209;">kernel_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),    </span><span style="color:#6A737D;"># 进行池化操作（2x2 区域）, 输出结果为： (16, 14, 14) 压缩完为原来的一半</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.conv2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.Sequential(         </span><span style="color:#6A737D;"># 下一个套餐的输入 (16, 14, 14)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 输出 16  需要32个特征</span></span>
<span class="line"><span style="color:#24292E;">            nn.Conv2d(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),     </span><span style="color:#6A737D;"># 输出 (32, 14, 14) </span></span>
<span class="line"><span style="color:#24292E;">            nn.ReLU(),                      </span><span style="color:#6A737D;"># relu层</span></span>
<span class="line"><span style="color:#24292E;">            nn.Conv2d(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            nn.ReLU(),</span></span>
<span class="line"><span style="color:#24292E;">            nn.MaxPool2d(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),                </span><span style="color:#6A737D;"># 输出 (32, 7, 7)</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.conv3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.Sequential(         </span><span style="color:#6A737D;"># 下一个套餐的输入 (16, 14, 14)</span></span>
<span class="line"><span style="color:#24292E;">            nn.Conv2d(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">64</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),     </span><span style="color:#6A737D;"># 输出 (32, 14, 14)</span></span>
<span class="line"><span style="color:#24292E;">            nn.ReLU(),             </span><span style="color:#6A737D;"># 输出 (64, 7, 7)</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.Linear(</span><span style="color:#005CC5;">64</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;"># 全连接层得到的结果</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(self, x): </span><span style="color:#6A737D;"># 前向传播</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.conv1(x) </span><span style="color:#6A737D;"># x有4个维度   bactch,c,h,w</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.conv2(x)</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.conv3(x)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># view = reshape   （bactch不变,特征个数） 四维变成二维矩阵</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.view(x.size(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">), </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)           </span><span style="color:#6A737D;"># flatten操作，结果为：(batch_size, 32 * 7 * 7)</span></span>
<span class="line"><span style="color:#24292E;">        output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.out(x)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> output</span></span></code></pre></div><h3 id="_4-准确率作为评估标准" tabindex="-1">4 准确率作为评估标准 <a class="header-anchor" href="#_4-准确率作为评估标准" aria-label="Permalink to &quot;4 准确率作为评估标准&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">accuracy</span><span style="color:#ADBAC7;">(predictions, labels):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># torch.max有两个返回值  [0]最大值  [1]索引</span></span>
<span class="line"><span style="color:#ADBAC7;">    pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.max(predictions.data, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span></span>
<span class="line"><span style="color:#ADBAC7;">    rights </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pred.eq(labels.data.view_as(pred)).sum() </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> rights, </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(labels)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">accuracy</span><span style="color:#24292E;">(predictions, labels):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># torch.max有两个返回值  [0]最大值  [1]索引</span></span>
<span class="line"><span style="color:#24292E;">    pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.max(predictions.data, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span></span>
<span class="line"><span style="color:#24292E;">    rights </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pred.eq(labels.data.view_as(pred)).sum() </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rights, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(labels)</span></span></code></pre></div><h3 id="_5-训练网络模型" tabindex="-1">5 训练网络模型 <a class="header-anchor" href="#_5-训练网络模型" aria-label="Permalink to &quot;5 训练网络模型&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 实例化</span></span>
<span class="line"><span style="color:#ADBAC7;">net </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> CNN() </span></span>
<span class="line"><span style="color:#768390;">#损失函数</span></span>
<span class="line"><span style="color:#ADBAC7;">criterion </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.CrossEntropyLoss() </span></span>
<span class="line"><span style="color:#768390;">#优化器</span></span>
<span class="line"><span style="color:#ADBAC7;">optimizer </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> optim.Adam(net.parameters(), </span><span style="color:#F69D50;">lr</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.001</span><span style="color:#ADBAC7;">) </span><span style="color:#768390;">#定义优化器，普通的随机梯度下降算法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#开始训练循环</span></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> epoch </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">range</span><span style="color:#ADBAC7;">(num_epochs):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#当前epoch的结果保存下来</span></span>
<span class="line"><span style="color:#ADBAC7;">    train_rights </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [] </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> batch_idx, (data, target) </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">enumerate</span><span style="color:#ADBAC7;">(train_loader):  </span><span style="color:#768390;">#针对容器中的每一个批进行循环</span></span>
<span class="line"><span style="color:#ADBAC7;">        net.train()                             </span></span>
<span class="line"><span style="color:#ADBAC7;">        output </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> net(data) </span></span>
<span class="line"><span style="color:#ADBAC7;">        loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> criterion(output, target) </span></span>
<span class="line"><span style="color:#ADBAC7;">        optimizer.zero_grad() </span></span>
<span class="line"><span style="color:#ADBAC7;">        loss.backward() </span></span>
<span class="line"><span style="color:#ADBAC7;">        optimizer.step() </span></span>
<span class="line"><span style="color:#ADBAC7;">        right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> accuracy(output, target) </span></span>
<span class="line"><span style="color:#ADBAC7;">        train_rights.append(right) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> batch_idx </span><span style="color:#F47067;">%</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">: </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            net.eval() </span></span>
<span class="line"><span style="color:#ADBAC7;">            val_rights </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [] </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (data, target) </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> test_loader:</span></span>
<span class="line"><span style="color:#ADBAC7;">                output </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> net(data) </span></span>
<span class="line"><span style="color:#ADBAC7;">                right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> accuracy(output, target) </span></span>
<span class="line"><span style="color:#ADBAC7;">                val_rights.append(right)</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">#准确率计算</span></span>
<span class="line"><span style="color:#ADBAC7;">            train_r </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">sum</span><span style="color:#ADBAC7;">([tup[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> tup </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> train_rights]), </span><span style="color:#6CB6FF;">sum</span><span style="color:#ADBAC7;">([tup[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> tup </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> train_rights]))</span></span>
<span class="line"><span style="color:#ADBAC7;">            val_r </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">sum</span><span style="color:#ADBAC7;">([tup[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> tup </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> val_rights]), </span><span style="color:#6CB6FF;">sum</span><span style="color:#ADBAC7;">([tup[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> tup </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> val_rights]))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;当前epoch: </span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;"> [</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">/</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;"> (</span><span style="color:#F47067;">{:.0f}</span><span style="color:#96D0FF;">%)]</span><span style="color:#F47067;">\\t</span><span style="color:#96D0FF;">损失: </span><span style="color:#F47067;">{:.6f}\\t</span><span style="color:#96D0FF;">训练集准确率: </span><span style="color:#F47067;">{:.2f}</span><span style="color:#96D0FF;">%</span><span style="color:#F47067;">\\t</span><span style="color:#96D0FF;">测试集正确率: </span><span style="color:#F47067;">{:.2f}</span><span style="color:#96D0FF;">%&#39;</span><span style="color:#ADBAC7;">.format(</span></span>
<span class="line"><span style="color:#ADBAC7;">                epoch, batch_idx </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> batch_size, </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(train_loader.dataset),</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">. </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> batch_idx </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(train_loader), </span></span>
<span class="line"><span style="color:#ADBAC7;">                loss.data, </span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">. </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> train_r[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">].numpy() </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> train_r[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">], </span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">. </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> val_r[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">].numpy() </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> val_r[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">]))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 实例化</span></span>
<span class="line"><span style="color:#24292E;">net </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CNN() </span></span>
<span class="line"><span style="color:#6A737D;">#损失函数</span></span>
<span class="line"><span style="color:#24292E;">criterion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.CrossEntropyLoss() </span></span>
<span class="line"><span style="color:#6A737D;">#优化器</span></span>
<span class="line"><span style="color:#24292E;">optimizer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> optim.Adam(net.parameters(), </span><span style="color:#E36209;">lr</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.001</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">#定义优化器，普通的随机梯度下降算法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#开始训练循环</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> epoch </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(num_epochs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#当前epoch的结果保存下来</span></span>
<span class="line"><span style="color:#24292E;">    train_rights </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [] </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> batch_idx, (data, target) </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(train_loader):  </span><span style="color:#6A737D;">#针对容器中的每一个批进行循环</span></span>
<span class="line"><span style="color:#24292E;">        net.train()                             </span></span>
<span class="line"><span style="color:#24292E;">        output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> net(data) </span></span>
<span class="line"><span style="color:#24292E;">        loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> criterion(output, target) </span></span>
<span class="line"><span style="color:#24292E;">        optimizer.zero_grad() </span></span>
<span class="line"><span style="color:#24292E;">        loss.backward() </span></span>
<span class="line"><span style="color:#24292E;">        optimizer.step() </span></span>
<span class="line"><span style="color:#24292E;">        right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> accuracy(output, target) </span></span>
<span class="line"><span style="color:#24292E;">        train_rights.append(right) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> batch_idx </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            net.eval() </span></span>
<span class="line"><span style="color:#24292E;">            val_rights </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [] </span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (data, target) </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> test_loader:</span></span>
<span class="line"><span style="color:#24292E;">                output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> net(data) </span></span>
<span class="line"><span style="color:#24292E;">                right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> accuracy(output, target) </span></span>
<span class="line"><span style="color:#24292E;">                val_rights.append(right)</span></span>
<span class="line"><span style="color:#24292E;">                </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">#准确率计算</span></span>
<span class="line"><span style="color:#24292E;">            train_r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">([tup[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> tup </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> train_rights]), </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">([tup[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> tup </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> train_rights]))</span></span>
<span class="line"><span style="color:#24292E;">            val_r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">([tup[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> tup </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> val_rights]), </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">([tup[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> tup </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> val_rights]))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;当前epoch: </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;"> [</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;"> (</span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.0f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">%)]</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">损失: </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.6f</span><span style="color:#005CC5;">}\\t</span><span style="color:#032F62;">训练集准确率: </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.2f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">%</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">测试集正确率: </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.2f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">%&#39;</span><span style="color:#24292E;">.format(</span></span>
<span class="line"><span style="color:#24292E;">                epoch, batch_idx </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> batch_size, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(train_loader.dataset),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">. </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> batch_idx </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(train_loader), </span></span>
<span class="line"><span style="color:#24292E;">                loss.data, </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">. </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> train_r[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].numpy() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> train_r[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">. </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> val_r[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].numpy() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> val_r[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]))</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">当前epoch: 2 [25600/60000 (43%)]	损失: 0.018130	训练集准确率: 99.16%	测试集正确率: 99.09%</span></span>
<span class="line"><span style="color:#adbac7;">当前epoch: 2 [32000/60000 (53%)]	损失: 0.006968	训练集准确率: 99.15%	测试集正确率: 99.11%</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">当前epoch: 2 [25600/60000 (43%)]	损失: 0.018130	训练集准确率: 99.16%	测试集正确率: 99.09%</span></span>
<span class="line"><span style="color:#24292e;">当前epoch: 2 [32000/60000 (53%)]	损失: 0.006968	训练集准确率: 99.15%	测试集正确率: 99.11%</span></span></code></pre></div><h2 id="_4-图像识别模型与训练策略" tabindex="-1">4. 图像识别模型与训练策略 <a class="header-anchor" href="#_4-图像识别模型与训练策略" aria-label="Permalink to &quot;4. 图像识别模型与训练策略&quot;">​</a></h2><h3 id="_1-0-1-数据预处理部分" tabindex="-1">1.0.1 数据预处理部分： <a class="header-anchor" href="#_1-0-1-数据预处理部分" aria-label="Permalink to &quot;1.0.1 数据预处理部分：&quot;">​</a></h3><ul><li>数据增强：torchvision中transforms模块自带功能，比较实用</li><li>数据预处理：torchvision中transforms也帮我们实现好了，直接调用即可</li><li>DataLoader模块直接读取batch数据</li></ul><h3 id="_1-0-2-网络模块设置" tabindex="-1">1.0.2 网络模块设置： <a class="header-anchor" href="#_1-0-2-网络模块设置" aria-label="Permalink to &quot;1.0.2 网络模块设置：&quot;">​</a></h3><ul><li>加载预训练模型，torchvision中有很多经典网络架构，调用起来十分方便，并且可以用人家训练好的权重参数来继续训练，也就是所谓的迁移学习</li><li>需要注意的是别人训练好的任务跟咱们的可不是完全一样，需要把最后的head层改一改，一般也就是最后的全连接层，改成咱们自己的任务</li><li>训练时可以全部重头训练，也可以只训练最后咱们任务的层，因为前几层都是做特征提取的，本质任务目标是一致的</li></ul><h3 id="_1-0-3-网络模型保存与测试" tabindex="-1">1.0.3 网络模型保存与测试 <a class="header-anchor" href="#_1-0-3-网络模型保存与测试" aria-label="Permalink to &quot;1.0.3 网络模型保存与测试&quot;">​</a></h3><ul><li>模型保存的时候可以带有选择性，例如在验证集中如果当前效果好则保存</li><li>读取模型进行实际测试</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> os</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> matplotlib.pyplot </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> plt</span></span>
<span class="line"><span style="color:#F47067;">%</span><span style="color:#ADBAC7;">matplotlib inline</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> numpy </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> np</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> torch </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> nn</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch.optim </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> optim</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torchvision</span></span>
<span class="line"><span style="color:#768390;">#pip install torchvision</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> torchvision </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> transforms, models, datasets</span></span>
<span class="line"><span style="color:#768390;">#https://pytorch.org/docs/stable/torchvision/index.html</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> imageio</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> time</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> warnings</span></span>
<span class="line"><span style="color:#ADBAC7;">warnings.filterwarnings(</span><span style="color:#96D0FF;">&quot;ignore&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> random</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> sys</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> copy</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> json</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">PIL</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> Image</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> matplotlib.pyplot </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> plt</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">matplotlib inline</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> torch </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> nn</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch.optim </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> optim</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torchvision</span></span>
<span class="line"><span style="color:#6A737D;">#pip install torchvision</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> torchvision </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> transforms, models, datasets</span></span>
<span class="line"><span style="color:#6A737D;">#https://pytorch.org/docs/stable/torchvision/index.html</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> imageio</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> warnings</span></span>
<span class="line"><span style="color:#24292E;">warnings.filterwarnings(</span><span style="color:#032F62;">&quot;ignore&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> random</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sys</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> copy</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PIL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Image</span></span></code></pre></div><h3 id="_1-0-4-数据读取与预处理操作" tabindex="-1">1.0.4 数据读取与预处理操作 <a class="header-anchor" href="#_1-0-4-数据读取与预处理操作" aria-label="Permalink to &quot;1.0.4 数据读取与预处理操作&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">data_dir </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./flower_data/&#39;</span></span>
<span class="line"><span style="color:#ADBAC7;">train_dir </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> data_dir </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;/train&#39;</span></span>
<span class="line"><span style="color:#ADBAC7;">valid_dir </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> data_dir </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;/valid&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data_dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./flower_data/&#39;</span></span>
<span class="line"><span style="color:#24292E;">train_dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data_dir </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/train&#39;</span></span>
<span class="line"><span style="color:#24292E;">valid_dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data_dir </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/valid&#39;</span></span></code></pre></div><h3 id="_1-0-5-制作好数据源" tabindex="-1">1.0.5 制作好数据源： <a class="header-anchor" href="#_1-0-5-制作好数据源" aria-label="Permalink to &quot;1.0.5 制作好数据源：&quot;">​</a></h3><ul><li>data_transforms中指定了所有图像预处理操作</li><li>ImageFolder假设所有的文件按文件夹保存好，每个文件夹下面存贮同一类别的图片，文件夹的名字为分类的名字</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">data_transforms </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">: </span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Compose([</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Resize([</span><span style="color:#6CB6FF;">96</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">96</span><span style="color:#ADBAC7;">]),</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.RandomRotation(</span><span style="color:#6CB6FF;">45</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#随机旋转，-45到45度之间随机选  数据增强</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.CenterCrop(</span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#从中心开始裁剪</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.RandomHorizontalFlip(</span><span style="color:#F69D50;">p</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#随机水平翻转 选择一个概率概率</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.RandomVerticalFlip(</span><span style="color:#F69D50;">p</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#随机垂直翻转</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.ColorJitter(</span><span style="color:#F69D50;">brightness</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.2</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">contrast</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">saturation</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">hue</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#参数1为亮度，参数2为对比度，参数3为饱和度，参数4为色相</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.RandomGrayscale(</span><span style="color:#F69D50;">p</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.025</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#概率转换成灰度率，3通道就是R=G=B</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.ToTensor(), </span><span style="color:#768390;"># 转化为torch支持的数据结构</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Normalize([</span><span style="color:#6CB6FF;">0.485</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.456</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.406</span><span style="color:#ADBAC7;">], [</span><span style="color:#6CB6FF;">0.229</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.224</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.225</span><span style="color:#ADBAC7;">])</span><span style="color:#768390;">#均值，标准差</span></span>
<span class="line"><span style="color:#ADBAC7;">    ]),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">: </span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Compose([</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Resize([</span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">]),</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.ToTensor(),</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Normalize([</span><span style="color:#6CB6FF;">0.485</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.456</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.406</span><span style="color:#ADBAC7;">], [</span><span style="color:#6CB6FF;">0.229</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.224</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.225</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">    ]),</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">batch_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">image_datasets </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> x </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> [</span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">]}</span></span>
<span class="line"><span style="color:#ADBAC7;">dataloaders </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {x: torch.utils.data.DataLoader(image_datasets[x], </span><span style="color:#F69D50;">batch_size</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">batch_size, </span><span style="color:#F69D50;">shuffle</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> x </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> [</span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">]}</span></span>
<span class="line"><span style="color:#ADBAC7;">dataset_sizes </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {x: </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(image_datasets[x]) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> x </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> [</span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">]}</span></span>
<span class="line"><span style="color:#ADBAC7;">class_names </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> image_datasets[</span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">].classes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data_transforms </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        transforms.Compose([</span></span>
<span class="line"><span style="color:#24292E;">        transforms.Resize([</span><span style="color:#005CC5;">96</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">96</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">        transforms.RandomRotation(</span><span style="color:#005CC5;">45</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#随机旋转，-45到45度之间随机选  数据增强</span></span>
<span class="line"><span style="color:#24292E;">        transforms.CenterCrop(</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#从中心开始裁剪</span></span>
<span class="line"><span style="color:#24292E;">        transforms.RandomHorizontalFlip(</span><span style="color:#E36209;">p</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#随机水平翻转 选择一个概率概率</span></span>
<span class="line"><span style="color:#24292E;">        transforms.RandomVerticalFlip(</span><span style="color:#E36209;">p</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#随机垂直翻转</span></span>
<span class="line"><span style="color:#24292E;">        transforms.ColorJitter(</span><span style="color:#E36209;">brightness</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">contrast</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">saturation</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">hue</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#参数1为亮度，参数2为对比度，参数3为饱和度，参数4为色相</span></span>
<span class="line"><span style="color:#24292E;">        transforms.RandomGrayscale(</span><span style="color:#E36209;">p</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.025</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#概率转换成灰度率，3通道就是R=G=B</span></span>
<span class="line"><span style="color:#24292E;">        transforms.ToTensor(), </span><span style="color:#6A737D;"># 转化为torch支持的数据结构</span></span>
<span class="line"><span style="color:#24292E;">        transforms.Normalize([</span><span style="color:#005CC5;">0.485</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.456</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.406</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">0.229</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.224</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.225</span><span style="color:#24292E;">])</span><span style="color:#6A737D;">#均值，标准差</span></span>
<span class="line"><span style="color:#24292E;">    ]),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        transforms.Compose([</span></span>
<span class="line"><span style="color:#24292E;">        transforms.Resize([</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">64</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">        transforms.ToTensor(),</span></span>
<span class="line"><span style="color:#24292E;">        transforms.Normalize([</span><span style="color:#005CC5;">0.485</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.456</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.406</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">0.229</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.224</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.225</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    ]),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">batch_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">image_datasets </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">]}</span></span>
<span class="line"><span style="color:#24292E;">dataloaders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {x: torch.utils.data.DataLoader(image_datasets[x], </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">batch_size, </span><span style="color:#E36209;">shuffle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">]}</span></span>
<span class="line"><span style="color:#24292E;">dataset_sizes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {x: </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(image_datasets[x]) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">]}</span></span>
<span class="line"><span style="color:#24292E;">class_names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> image_datasets[</span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">].classes</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">image_datasets</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">dataloaders</span></span>
<span class="line"><span style="color:#ADBAC7;">{</span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">: </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">torch.utils.data.dataloader.DataLoader at </span><span style="color:#F47067;">0x</span><span style="color:#6CB6FF;">1e4c50b9400</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">: </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">torch.utils.data.dataloader.DataLoader at </span><span style="color:#F47067;">0x</span><span style="color:#6CB6FF;">1e4c51ad128</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">dataset_sizes</span></span>
<span class="line"><span style="color:#ADBAC7;">{</span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">6552</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">818</span><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">image_datasets</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">dataloaders</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">torch.utils.data.dataloader.DataLoader at </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">1e4c50b9400</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">torch.utils.data.dataloader.DataLoader at </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">1e4c51ad128</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">dataset_sizes</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6552</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">818</span><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_1-0-6-读取标签对应的实际名字" tabindex="-1">1.0.6 读取标签对应的实际名字 <a class="header-anchor" href="#_1-0-6-读取标签对应的实际名字" aria-label="Permalink to &quot;1.0.6 读取标签对应的实际名字&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">with</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">open</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;cat_to_name.json&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;r&#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> f:</span></span>
<span class="line"><span style="color:#ADBAC7;">    cat_to_name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> json.load(f)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">cat_to_name</span></span>
<span class="line"><span style="color:#ADBAC7;">{</span><span style="color:#96D0FF;">&#39;1&#39;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&#39;pink primrose&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;10&#39;</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&#39;globe thistle&#39;</span><span style="color:#ADBAC7;">,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cat_to_name.json&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">    cat_to_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.load(f)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cat_to_name</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;pink primrose&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;10&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;globe thistle&#39;</span><span style="color:#24292E;">,</span></span></code></pre></div><h3 id="_1-0-7-加载models中提供的模型" tabindex="-1">1.0.7 加载models中提供的模型 <a class="header-anchor" href="#_1-0-7-加载models中提供的模型" aria-label="Permalink to &quot;1.0.7 加载models中提供的模型&quot;">​</a></h3><p>并且直接用训练的好权重当做初始化参数</p><ul><li>第一次执行需要下载，可能会比较慢，我会提供给大家一份下载好的，可以直接放到相应路径</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">model_name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;resnet&#39;</span><span style="color:#ADBAC7;">  </span><span style="color:#768390;">#可选的比较多 [&#39;resnet&#39;, &#39;alexnet&#39;, &#39;vgg&#39;, &#39;squeezenet&#39;, &#39;densenet&#39;, &#39;inception&#39;]</span></span>
<span class="line"><span style="color:#768390;">#是否用人家训练好的特征来做</span></span>
<span class="line"><span style="color:#ADBAC7;">feature_extract </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;">#都用人家特征，咱先不更新</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">model_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;resnet&#39;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#可选的比较多 [&#39;resnet&#39;, &#39;alexnet&#39;, &#39;vgg&#39;, &#39;squeezenet&#39;, &#39;densenet&#39;, &#39;inception&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">#是否用人家训练好的特征来做</span></span>
<span class="line"><span style="color:#24292E;">feature_extract </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#都用人家特征，咱先不更新</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 是否用GPU训练</span></span>
<span class="line"><span style="color:#ADBAC7;">train_on_gpu </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.cuda.is_available()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">not</span><span style="color:#ADBAC7;"> train_on_gpu:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;CUDA is not available.  Training on CPU ...&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">else</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;CUDA is available!  Training on GPU ...&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">device </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.device(</span><span style="color:#96D0FF;">&quot;cuda:0&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> torch.cuda.is_available() </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;cpu&quot;</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 是否用GPU训练</span></span>
<span class="line"><span style="color:#24292E;">train_on_gpu </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.cuda.is_available()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> train_on_gpu:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;CUDA is not available.  Training on CPU ...&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;CUDA is available!  Training on GPU ...&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">device </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.device(</span><span style="color:#032F62;">&quot;cuda:0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> torch.cuda.is_available() </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;cpu&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 有时候用人家模型，就一直用了，更不更新咱们可以自己定</span></span>
<span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">set_parameter_requires_grad</span><span style="color:#ADBAC7;">(model, feature_extracting):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> feature_extracting:</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> param </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> model.parameters():</span></span>
<span class="line"><span style="color:#ADBAC7;">            param.requires_grad </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">False</span><span style="color:#ADBAC7;">  </span><span style="color:#768390;"># 反向传播的时候不计算梯度</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">model_ft </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> models.resnet18()</span><span style="color:#768390;">#18层的能快点，条件好点的也可以选152</span></span>
<span class="line"><span style="color:#ADBAC7;">model_ft</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 有时候用人家模型，就一直用了，更不更新咱们可以自己定</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set_parameter_requires_grad</span><span style="color:#24292E;">(model, feature_extracting):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> feature_extracting:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> param </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> model.parameters():</span></span>
<span class="line"><span style="color:#24292E;">            param.requires_grad </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 反向传播的时候不计算梯度</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">model_ft </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> models.resnet18()</span><span style="color:#6A737D;">#18层的能快点，条件好点的也可以选152</span></span>
<span class="line"><span style="color:#24292E;">model_ft</span></span></code></pre></div><h3 id="_1-0-8-把模型输出层改成自己的" tabindex="-1">1.0.8 把模型输出层改成自己的 <a class="header-anchor" href="#_1-0-8-把模型输出层改成自己的" aria-label="Permalink to &quot;1.0.8 把模型输出层改成自己的&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">initialize_model</span><span style="color:#ADBAC7;">(model_name, num_classes, feature_extract, use_pretrained</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    model_ft </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> models.resnet18(</span><span style="color:#F69D50;">pretrained</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">use_pretrained) </span><span style="color:#768390;"># use_pretrained 别人训练好的参数 </span></span>
<span class="line"><span style="color:#ADBAC7;">    set_parameter_requires_grad(model_ft, feature_extract)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    num_ftrs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> model_ft.fc.in_features</span></span>
<span class="line"><span style="color:#ADBAC7;">    model_ft.fc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.Linear(num_ftrs, </span><span style="color:#6CB6FF;">102</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">#类别数自己根据自己任务来 102个类别</span></span>
<span class="line"><span style="color:#ADBAC7;">                            </span></span>
<span class="line"><span style="color:#ADBAC7;">    input_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">64</span><span style="color:#768390;">#输入大小根据自己配置来</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> model_ft, input_size</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initialize_model</span><span style="color:#24292E;">(model_name, num_classes, feature_extract, use_pretrained</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    model_ft </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> models.resnet18(</span><span style="color:#E36209;">pretrained</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">use_pretrained) </span><span style="color:#6A737D;"># use_pretrained 别人训练好的参数 </span></span>
<span class="line"><span style="color:#24292E;">    set_parameter_requires_grad(model_ft, feature_extract)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    num_ftrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model_ft.fc.in_features</span></span>
<span class="line"><span style="color:#24292E;">    model_ft.fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.Linear(num_ftrs, </span><span style="color:#005CC5;">102</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#类别数自己根据自己任务来 102个类别</span></span>
<span class="line"><span style="color:#24292E;">                            </span></span>
<span class="line"><span style="color:#24292E;">    input_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span><span style="color:#6A737D;">#输入大小根据自己配置来</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model_ft, input_size</span></span></code></pre></div><h3 id="_1-0-9-设置哪些层需要训练" tabindex="-1">1.0.9 设置哪些层需要训练 <a class="header-anchor" href="#_1-0-9-设置哪些层需要训练" aria-label="Permalink to &quot;1.0.9 设置哪些层需要训练&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">model_ft, input_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> initialize_model(model_name, </span><span style="color:#6CB6FF;">102</span><span style="color:#ADBAC7;">, feature_extract, </span><span style="color:#F69D50;">use_pretrained</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#GPU还是CPU计算</span></span>
<span class="line"><span style="color:#ADBAC7;">model_ft </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> model_ft.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 模型保存，名字自己起</span></span>
<span class="line"><span style="color:#ADBAC7;">filename</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;checkpoint.pth&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 是否训练所有层</span></span>
<span class="line"><span style="color:#ADBAC7;">params_to_update </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> model_ft.parameters()</span></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Params to learn:&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> feature_extract:</span></span>
<span class="line"><span style="color:#ADBAC7;">    params_to_update </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> name,param </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> model_ft.named_parameters():</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> param.requires_grad </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">            params_to_update.append(param)</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">\\t</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">,name)</span></span>
<span class="line"><span style="color:#F47067;">else</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> name,param </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> model_ft.named_parameters():</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> param.requires_grad </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">\\t</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">,name)</span></span>
<span class="line"><span style="color:#ADBAC7;">Params to learn:</span></span>
<span class="line"><span style="color:#ADBAC7;">	 fc.weight</span></span>
<span class="line"><span style="color:#ADBAC7;">	 fc.bias</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">model_ft, input_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initialize_model(model_name, </span><span style="color:#005CC5;">102</span><span style="color:#24292E;">, feature_extract, </span><span style="color:#E36209;">use_pretrained</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#GPU还是CPU计算</span></span>
<span class="line"><span style="color:#24292E;">model_ft </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model_ft.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 模型保存，名字自己起</span></span>
<span class="line"><span style="color:#24292E;">filename</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;checkpoint.pth&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 是否训练所有层</span></span>
<span class="line"><span style="color:#24292E;">params_to_update </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model_ft.parameters()</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Params to learn:&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> feature_extract:</span></span>
<span class="line"><span style="color:#24292E;">    params_to_update </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name,param </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> model_ft.named_parameters():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> param.requires_grad </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            params_to_update.append(param)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,name)</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name,param </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> model_ft.named_parameters():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> param.requires_grad </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,name)</span></span>
<span class="line"><span style="color:#24292E;">Params to learn:</span></span>
<span class="line"><span style="color:#24292E;">	 fc.weight</span></span>
<span class="line"><span style="color:#24292E;">	 fc.bias</span></span></code></pre></div><h3 id="_1-0-10-优化器设置" tabindex="-1">1.0.10 优化器设置 <a class="header-anchor" href="#_1-0-10-优化器设置" aria-label="Permalink to &quot;1.0.10 优化器设置&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 优化器设置</span></span>
<span class="line"><span style="color:#ADBAC7;">optimizer_ft </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> optim.Adam(params_to_update, </span><span style="color:#F69D50;">lr</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1e-2</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">#要训练啥参数，你来定</span></span>
<span class="line"><span style="color:#ADBAC7;">scheduler </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> optim.lr_scheduler.StepLR(optimizer_ft, </span><span style="color:#F69D50;">step_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">gamma</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">#学习率每7个epoch衰减成原来的1/10</span></span>
<span class="line"><span style="color:#ADBAC7;">criterion </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.CrossEntropyLoss()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 优化器设置</span></span>
<span class="line"><span style="color:#24292E;">optimizer_ft </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> optim.Adam(params_to_update, </span><span style="color:#E36209;">lr</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1e-2</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#要训练啥参数，你来定</span></span>
<span class="line"><span style="color:#24292E;">scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> optim.lr_scheduler.StepLR(optimizer_ft, </span><span style="color:#E36209;">step_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#E36209;">gamma</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#学习率每7个epoch衰减成原来的1/10</span></span>
<span class="line"><span style="color:#24292E;">criterion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.CrossEntropyLoss()</span></span></code></pre></div><h3 id="_1-0-11-训练模块" tabindex="-1">1.0.11 训练模块 <a class="header-anchor" href="#_1-0-11-训练模块" aria-label="Permalink to &quot;1.0.11 训练模块&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">train_model</span><span style="color:#ADBAC7;">(model, dataloaders, criterion, optimizer, num_epochs</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;">,filename</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;best.pt&#39;</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#咱们要算时间的</span></span>
<span class="line"><span style="color:#ADBAC7;">    since </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> time.time()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#也要记录最好的那一次</span></span>
<span class="line"><span style="color:#ADBAC7;">    best_acc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#模型也得放到你的CPU或者GPU</span></span>
<span class="line"><span style="color:#ADBAC7;">    model.to(device)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#训练过程中打印一堆损失和指标</span></span>
<span class="line"><span style="color:#ADBAC7;">    val_acc_history </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#ADBAC7;">    train_acc_history </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#ADBAC7;">    train_losses </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#ADBAC7;">    valid_losses </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#学习率</span></span>
<span class="line"><span style="color:#ADBAC7;">    LRs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [optimizer.param_groups[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">][</span><span style="color:#96D0FF;">&#39;lr&#39;</span><span style="color:#ADBAC7;">]]</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#最好的那次模型，后续会变的，先初始化</span></span>
<span class="line"><span style="color:#ADBAC7;">    best_model_wts </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> copy.deepcopy(model.state_dict())</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">#一个个epoch来遍历</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> epoch </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">range</span><span style="color:#ADBAC7;">(num_epochs):</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Epoch </span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">/</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(epoch, num_epochs </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;-&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># 训练和验证</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> [</span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">]:</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">                model.train()  </span><span style="color:#768390;"># 训练</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">                model.eval()   </span><span style="color:#768390;"># 验证</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">            running_loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.0</span></span>
<span class="line"><span style="color:#ADBAC7;">            running_corrects </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;"># 把数据都取个遍</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> inputs, labels </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> dataloaders[phase]:</span></span>
<span class="line"><span style="color:#ADBAC7;">                inputs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> inputs.to(device)</span><span style="color:#768390;">#放到你的CPU或GPU</span></span>
<span class="line"><span style="color:#ADBAC7;">                labels </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> labels.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;"># 清零</span></span>
<span class="line"><span style="color:#ADBAC7;">                optimizer.zero_grad()</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;"># 只有训练的时候计算和更新梯度</span></span>
<span class="line"><span style="color:#ADBAC7;">                outputs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> model(inputs)</span></span>
<span class="line"><span style="color:#ADBAC7;">                loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> criterion(outputs, labels)</span></span>
<span class="line"><span style="color:#ADBAC7;">                _, preds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.max(outputs, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;"># 训练阶段更新权重</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">                    loss.backward()</span></span>
<span class="line"><span style="color:#ADBAC7;">                    optimizer.step()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;"># 计算损失</span></span>
<span class="line"><span style="color:#ADBAC7;">                running_loss </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> loss.item() </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> inputs.size(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">#0表示batch那个维度</span></span>
<span class="line"><span style="color:#ADBAC7;">                running_corrects </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> torch.sum(preds </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> labels.data)</span><span style="color:#768390;">#预测结果最大的和真实值是否一致</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            epoch_loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> running_loss </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(dataloaders[phase].dataset)</span><span style="color:#768390;">#算平均</span></span>
<span class="line"><span style="color:#ADBAC7;">            epoch_acc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> running_corrects.double() </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(dataloaders[phase].dataset)</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            time_elapsed </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> time.time() </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> since</span><span style="color:#768390;">#一个epoch我浪费了多少时间</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Time elapsed </span><span style="color:#F47067;">{:.0f}</span><span style="color:#96D0FF;">m </span><span style="color:#F47067;">{:.0f}</span><span style="color:#96D0FF;">s&#39;</span><span style="color:#ADBAC7;">.format(time_elapsed </span><span style="color:#F47067;">//</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">, time_elapsed </span><span style="color:#F47067;">%</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;"> Loss: </span><span style="color:#F47067;">{:.4f}</span><span style="color:#96D0FF;"> Acc: </span><span style="color:#F47067;">{:.4f}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(phase, epoch_loss, epoch_acc))</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;"># 得到最好那次的模型</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">and</span><span style="color:#ADBAC7;"> epoch_acc </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> best_acc:</span></span>
<span class="line"><span style="color:#ADBAC7;">                best_acc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> epoch_acc</span></span>
<span class="line"><span style="color:#ADBAC7;">                best_model_wts </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> copy.deepcopy(model.state_dict())</span></span>
<span class="line"><span style="color:#ADBAC7;">                state </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#96D0FF;">&#39;state_dict&#39;</span><span style="color:#ADBAC7;">: model.state_dict(),</span><span style="color:#768390;">#字典里key就是各层的名字，值就是训练好的权重</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#96D0FF;">&#39;best_acc&#39;</span><span style="color:#ADBAC7;">: best_acc,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#96D0FF;">&#39;optimizer&#39;</span><span style="color:#ADBAC7;"> : optimizer.state_dict(),</span></span>
<span class="line"><span style="color:#ADBAC7;">                }</span></span>
<span class="line"><span style="color:#ADBAC7;">                torch.save(state, filename)</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">                val_acc_history.append(epoch_acc)</span></span>
<span class="line"><span style="color:#ADBAC7;">                valid_losses.append(epoch_loss)</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;">#scheduler.step(epoch_loss)#学习率衰减</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">                train_acc_history.append(epoch_acc)</span></span>
<span class="line"><span style="color:#ADBAC7;">                train_losses.append(epoch_loss)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Optimizer learning rate : </span><span style="color:#F47067;">{:.7f}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(optimizer.param_groups[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">][</span><span style="color:#96D0FF;">&#39;lr&#39;</span><span style="color:#ADBAC7;">]))</span></span>
<span class="line"><span style="color:#ADBAC7;">        LRs.append(optimizer.param_groups[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">][</span><span style="color:#96D0FF;">&#39;lr&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        scheduler.step()</span><span style="color:#768390;">#学习率衰减</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    time_elapsed </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> time.time() </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> since</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Training complete in </span><span style="color:#F47067;">{:.0f}</span><span style="color:#96D0FF;">m </span><span style="color:#F47067;">{:.0f}</span><span style="color:#96D0FF;">s&#39;</span><span style="color:#ADBAC7;">.format(time_elapsed </span><span style="color:#F47067;">//</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">, time_elapsed </span><span style="color:#F47067;">%</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Best val Acc: </span><span style="color:#F47067;">{:4f}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(best_acc))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 训练完后用最好的一次当做模型最终的结果,等着一会测试</span></span>
<span class="line"><span style="color:#ADBAC7;">    model.load_state_dict(best_model_wts)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> model, val_acc_history, train_acc_history, valid_losses, train_losses, LRs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">train_model</span><span style="color:#24292E;">(model, dataloaders, criterion, optimizer, num_epochs</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">,filename</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;best.pt&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#咱们要算时间的</span></span>
<span class="line"><span style="color:#24292E;">    since </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#也要记录最好的那一次</span></span>
<span class="line"><span style="color:#24292E;">    best_acc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#模型也得放到你的CPU或者GPU</span></span>
<span class="line"><span style="color:#24292E;">    model.to(device)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#训练过程中打印一堆损失和指标</span></span>
<span class="line"><span style="color:#24292E;">    val_acc_history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    train_acc_history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    train_losses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    valid_losses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#学习率</span></span>
<span class="line"><span style="color:#24292E;">    LRs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [optimizer.param_groups[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;lr&#39;</span><span style="color:#24292E;">]]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#最好的那次模型，后续会变的，先初始化</span></span>
<span class="line"><span style="color:#24292E;">    best_model_wts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> copy.deepcopy(model.state_dict())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#一个个epoch来遍历</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> epoch </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(num_epochs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Epoch </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(epoch, num_epochs </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 训练和验证</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                model.train()  </span><span style="color:#6A737D;"># 训练</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                model.eval()   </span><span style="color:#6A737D;"># 验证</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            running_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span></span>
<span class="line"><span style="color:#24292E;">            running_corrects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 把数据都取个遍</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> inputs, labels </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> dataloaders[phase]:</span></span>
<span class="line"><span style="color:#24292E;">                inputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputs.to(device)</span><span style="color:#6A737D;">#放到你的CPU或GPU</span></span>
<span class="line"><span style="color:#24292E;">                labels </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> labels.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 清零</span></span>
<span class="line"><span style="color:#24292E;">                optimizer.zero_grad()</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 只有训练的时候计算和更新梯度</span></span>
<span class="line"><span style="color:#24292E;">                outputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model(inputs)</span></span>
<span class="line"><span style="color:#24292E;">                loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> criterion(outputs, labels)</span></span>
<span class="line"><span style="color:#24292E;">                _, preds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.max(outputs, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 训练阶段更新权重</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                    loss.backward()</span></span>
<span class="line"><span style="color:#24292E;">                    optimizer.step()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 计算损失</span></span>
<span class="line"><span style="color:#24292E;">                running_loss </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> loss.item() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> inputs.size(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#0表示batch那个维度</span></span>
<span class="line"><span style="color:#24292E;">                running_corrects </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> torch.sum(preds </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> labels.data)</span><span style="color:#6A737D;">#预测结果最大的和真实值是否一致</span></span>
<span class="line"><span style="color:#24292E;">                </span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            epoch_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> running_loss </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(dataloaders[phase].dataset)</span><span style="color:#6A737D;">#算平均</span></span>
<span class="line"><span style="color:#24292E;">            epoch_acc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> running_corrects.double() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(dataloaders[phase].dataset)</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            time_elapsed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> since</span><span style="color:#6A737D;">#一个epoch我浪费了多少时间</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Time elapsed </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.0f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">m </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.0f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">s&#39;</span><span style="color:#24292E;">.format(time_elapsed </span><span style="color:#D73A49;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, time_elapsed </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;"> Loss: </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.4f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> Acc: </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.4f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(phase, epoch_loss, epoch_acc))</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 得到最好那次的模型</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> epoch_acc </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> best_acc:</span></span>
<span class="line"><span style="color:#24292E;">                best_acc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> epoch_acc</span></span>
<span class="line"><span style="color:#24292E;">                best_model_wts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> copy.deepcopy(model.state_dict())</span></span>
<span class="line"><span style="color:#24292E;">                state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&#39;state_dict&#39;</span><span style="color:#24292E;">: model.state_dict(),</span><span style="color:#6A737D;">#字典里key就是各层的名字，值就是训练好的权重</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&#39;best_acc&#39;</span><span style="color:#24292E;">: best_acc,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&#39;optimizer&#39;</span><span style="color:#24292E;"> : optimizer.state_dict(),</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                torch.save(state, filename)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                val_acc_history.append(epoch_acc)</span></span>
<span class="line"><span style="color:#24292E;">                valid_losses.append(epoch_loss)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">#scheduler.step(epoch_loss)#学习率衰减</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                train_acc_history.append(epoch_acc)</span></span>
<span class="line"><span style="color:#24292E;">                train_losses.append(epoch_loss)</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Optimizer learning rate : </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.7f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(optimizer.param_groups[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;lr&#39;</span><span style="color:#24292E;">]))</span></span>
<span class="line"><span style="color:#24292E;">        LRs.append(optimizer.param_groups[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;lr&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        scheduler.step()</span><span style="color:#6A737D;">#学习率衰减</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    time_elapsed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> since</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Training complete in </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.0f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">m </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.0f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">s&#39;</span><span style="color:#24292E;">.format(time_elapsed </span><span style="color:#D73A49;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, time_elapsed </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Best val Acc: </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:4f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(best_acc))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 训练完后用最好的一次当做模型最终的结果,等着一会测试</span></span>
<span class="line"><span style="color:#24292E;">    model.load_state_dict(best_model_wts)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model, val_acc_history, train_acc_history, valid_losses, train_losses, LRs</span></span></code></pre></div><h3 id="_1-0-12-开始训练" tabindex="-1">1.0.12 开始训练 <a class="header-anchor" href="#_1-0-12-开始训练" aria-label="Permalink to &quot;1.0.12 开始训练&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs  </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> train_model(model_ft, dataloaders, criterion, optimizer_ft, </span><span style="color:#F69D50;">num_epochs</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_model(model_ft, dataloaders, criterion, optimizer_ft, </span><span style="color:#E36209;">num_epochs</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="_1-0-13-再继续训练所有层" tabindex="-1">1.0.13 再继续训练所有层 <a class="header-anchor" href="#_1-0-13-再继续训练所有层" aria-label="Permalink to &quot;1.0.13 再继续训练所有层&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> param </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> model_ft.parameters():</span></span>
<span class="line"><span style="color:#ADBAC7;">    param.requires_grad </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 再继续训练所有的参数，学习率调小一点</span></span>
<span class="line"><span style="color:#ADBAC7;">optimizer </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> optim.Adam(model_ft.parameters(), </span><span style="color:#F69D50;">lr</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1e-3</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">scheduler </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> optim.lr_scheduler.StepLR(optimizer_ft, </span><span style="color:#F69D50;">step_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">gamma</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 损失函数</span></span>
<span class="line"><span style="color:#ADBAC7;">criterion </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.CrossEntropyLoss()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 加载之前训练好的权重参数</span></span>
<span class="line"><span style="color:#ADBAC7;">checkpoint </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.load(filename)</span></span>
<span class="line"><span style="color:#ADBAC7;">best_acc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> checkpoint[</span><span style="color:#96D0FF;">&#39;best_acc&#39;</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">model_ft.load_state_dict(checkpoint[</span><span style="color:#96D0FF;">&#39;state_dict&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs  </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> train_model(model_ft, dataloaders, criterion, optimizer, </span><span style="color:#F69D50;">num_epochs</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">,)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> param </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> model_ft.parameters():</span></span>
<span class="line"><span style="color:#24292E;">    param.requires_grad </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 再继续训练所有的参数，学习率调小一点</span></span>
<span class="line"><span style="color:#24292E;">optimizer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> optim.Adam(model_ft.parameters(), </span><span style="color:#E36209;">lr</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1e-3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> optim.lr_scheduler.StepLR(optimizer_ft, </span><span style="color:#E36209;">step_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#E36209;">gamma</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 损失函数</span></span>
<span class="line"><span style="color:#24292E;">criterion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.CrossEntropyLoss()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 加载之前训练好的权重参数</span></span>
<span class="line"><span style="color:#24292E;">checkpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.load(filename)</span></span>
<span class="line"><span style="color:#24292E;">best_acc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> checkpoint[</span><span style="color:#032F62;">&#39;best_acc&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">model_ft.load_state_dict(checkpoint[</span><span style="color:#032F62;">&#39;state_dict&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_model(model_ft, dataloaders, criterion, optimizer, </span><span style="color:#E36209;">num_epochs</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,)</span></span></code></pre></div><h3 id="_1-0-14-加载训练好的模型" tabindex="-1">1.0.14 加载训练好的模型 <a class="header-anchor" href="#_1-0-14-加载训练好的模型" aria-label="Permalink to &quot;1.0.14 加载训练好的模型&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">model_ft, input_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> initialize_model(model_name, </span><span style="color:#6CB6FF;">102</span><span style="color:#ADBAC7;">, feature_extract, </span><span style="color:#F69D50;">use_pretrained</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># GPU模式</span></span>
<span class="line"><span style="color:#ADBAC7;">model_ft </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> model_ft.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 保存文件的名字</span></span>
<span class="line"><span style="color:#ADBAC7;">filename</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;best.pt&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 加载模型</span></span>
<span class="line"><span style="color:#ADBAC7;">checkpoint </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.load(filename)</span></span>
<span class="line"><span style="color:#ADBAC7;">best_acc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> checkpoint[</span><span style="color:#96D0FF;">&#39;best_acc&#39;</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">model_ft.load_state_dict(checkpoint[</span><span style="color:#96D0FF;">&#39;state_dict&#39;</span><span style="color:#ADBAC7;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">model_ft, input_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initialize_model(model_name, </span><span style="color:#005CC5;">102</span><span style="color:#24292E;">, feature_extract, </span><span style="color:#E36209;">use_pretrained</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># GPU模式</span></span>
<span class="line"><span style="color:#24292E;">model_ft </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model_ft.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 保存文件的名字</span></span>
<span class="line"><span style="color:#24292E;">filename</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;best.pt&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 加载模型</span></span>
<span class="line"><span style="color:#24292E;">checkpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.load(filename)</span></span>
<span class="line"><span style="color:#24292E;">best_acc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> checkpoint[</span><span style="color:#032F62;">&#39;best_acc&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">model_ft.load_state_dict(checkpoint[</span><span style="color:#032F62;">&#39;state_dict&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><h3 id="_1-0-15-测试数据预处理" tabindex="-1">1.0.15 测试数据预处理 <a class="header-anchor" href="#_1-0-15-测试数据预处理" aria-label="Permalink to &quot;1.0.15 测试数据预处理&quot;">​</a></h3><ul><li>测试数据处理方法需要跟训练时一直才可以</li><li>crop操作的目的是保证输入的大小是一致的</li><li>标准化操作也是必须的，用跟训练数据相同的mean和std,但是需要注意一点训练数据是在0-1上进行标准化，所以测试数据也需要先归一化</li><li>最后一点，PyTorch中颜色通道是第一个维度，跟很多工具包都不一样，需要转换</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 得到一个batch的测试数据</span></span>
<span class="line"><span style="color:#ADBAC7;">dataiter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">iter</span><span style="color:#ADBAC7;">(dataloaders[</span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">images, labels </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> dataiter.next()</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">model_ft.eval()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> train_on_gpu:</span></span>
<span class="line"><span style="color:#ADBAC7;">    output </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> model_ft(images.cuda())</span></span>
<span class="line"><span style="color:#F47067;">else</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    output </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> model_ft(images)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 得到一个batch的测试数据</span></span>
<span class="line"><span style="color:#24292E;">dataiter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(dataloaders[</span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">images, labels </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataiter.next()</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">model_ft.eval()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> train_on_gpu:</span></span>
<span class="line"><span style="color:#24292E;">    output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model_ft(images.cuda())</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model_ft(images)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># output表示对一个batch中每一个数据得到其属于各个类别的可能性</span></span>
<span class="line"><span style="color:#ADBAC7;">output.shape</span></span>
<span class="line"><span style="color:#ADBAC7;">torch.Size([</span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">102</span><span style="color:#ADBAC7;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># output表示对一个batch中每一个数据得到其属于各个类别的可能性</span></span>
<span class="line"><span style="color:#24292E;">output.shape</span></span>
<span class="line"><span style="color:#24292E;">torch.Size([</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">102</span><span style="color:#24292E;">])</span></span></code></pre></div><h3 id="_1-0-16-得到概率最大的那个" tabindex="-1">1.0.16 得到概率最大的那个 <a class="header-anchor" href="#_1-0-16-得到概率最大的那个" aria-label="Permalink to &quot;1.0.16 得到概率最大的那个&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">_, preds_tensor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.max(output, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">preds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.squeeze(preds_tensor.numpy()) </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">not</span><span style="color:#ADBAC7;"> train_on_gpu </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> np.squeeze(preds_tensor.cpu().numpy())</span></span>
<span class="line"><span style="color:#ADBAC7;">preds</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">_, preds_tensor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.max(output, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">preds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.squeeze(preds_tensor.numpy()) </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> train_on_gpu </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> np.squeeze(preds_tensor.cpu().numpy())</span></span>
<span class="line"><span style="color:#24292E;">preds</span></span></code></pre></div><h3 id="_1-0-17-展示预测结果" tabindex="-1">1.0.17 展示预测结果 <a class="header-anchor" href="#_1-0-17-展示预测结果" aria-label="Permalink to &quot;1.0.17 展示预测结果&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">im_convert</span><span style="color:#ADBAC7;">(tensor):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&quot;&quot;&quot; 展示数据&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    image </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> tensor.to(</span><span style="color:#96D0FF;">&quot;cpu&quot;</span><span style="color:#ADBAC7;">).clone().detach()</span></span>
<span class="line"><span style="color:#ADBAC7;">    image </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> image.numpy().squeeze()</span></span>
<span class="line"><span style="color:#ADBAC7;">    image </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> image.transpose(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    image </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> image </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> np.array((</span><span style="color:#6CB6FF;">0.229</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.224</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.225</span><span style="color:#ADBAC7;">)) </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> np.array((</span><span style="color:#6CB6FF;">0.485</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.456</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.406</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">    image </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> image.clip(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> image</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">fig</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">columns </span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">4</span></span>
<span class="line"><span style="color:#ADBAC7;">rows </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> idx </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">range</span><span style="color:#ADBAC7;"> (columns</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">rows):</span></span>
<span class="line"><span style="color:#ADBAC7;">    ax </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> fig.add_subplot(rows, columns, idx</span><span style="color:#F47067;">+</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">xticks</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[], </span><span style="color:#F69D50;">yticks</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[])</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.imshow(im_convert(images[idx]))</span></span>
<span class="line"><span style="color:#ADBAC7;">    ax.set_title(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;"> (</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">)&quot;</span><span style="color:#ADBAC7;">.format(cat_to_name[</span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(preds[idx])], cat_to_name[</span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(labels[idx].item())]),</span></span>
<span class="line"><span style="color:#ADBAC7;">                 </span><span style="color:#F69D50;">color</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;green&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> cat_to_name[</span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(preds[idx])]</span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;">cat_to_name[</span><span style="color:#6CB6FF;">str</span><span style="color:#ADBAC7;">(labels[idx].item())] </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;red&quot;</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">im_convert</span><span style="color:#24292E;">(tensor):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot; 展示数据&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tensor.to(</span><span style="color:#032F62;">&quot;cpu&quot;</span><span style="color:#24292E;">).clone().detach()</span></span>
<span class="line"><span style="color:#24292E;">    image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> image.numpy().squeeze()</span></span>
<span class="line"><span style="color:#24292E;">    image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> image.transpose(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> image </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> np.array((</span><span style="color:#005CC5;">0.229</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.224</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.225</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> np.array((</span><span style="color:#005CC5;">0.485</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.456</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.406</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> image.clip(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> image</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">fig</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">columns </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">rows </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> idx </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;"> (columns</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rows):</span></span>
<span class="line"><span style="color:#24292E;">    ax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fig.add_subplot(rows, columns, idx</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">xticks</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[], </span><span style="color:#E36209;">yticks</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[])</span></span>
<span class="line"><span style="color:#24292E;">    plt.imshow(im_convert(images[idx]))</span></span>
<span class="line"><span style="color:#24292E;">    ax.set_title(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;"> (</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">)&quot;</span><span style="color:#24292E;">.format(cat_to_name[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(preds[idx])], cat_to_name[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(labels[idx].item())]),</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#E36209;">color</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cat_to_name[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(preds[idx])]</span><span style="color:#D73A49;">==</span><span style="color:#24292E;">cat_to_name[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(labels[idx].item())] </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span></code></pre></div><h2 id="_5-数据集dataloader制作" tabindex="-1">5.数据集Dataloader制作 <a class="header-anchor" href="#_5-数据集dataloader制作" aria-label="Permalink to &quot;5.数据集Dataloader制作&quot;">​</a></h2><h3 id="_1-1-如何自定义数据集" tabindex="-1">1.1 如何自定义数据集： <a class="header-anchor" href="#_1-1-如何自定义数据集" aria-label="Permalink to &quot;1.1 如何自定义数据集：&quot;">​</a></h3><ul><li>1.数据和标签的目录结构先搞定(得知道到哪读数据)</li><li>2.写好读取数据和标签路径的函数(根据自己数据集情况来写)</li><li>3.完成单个数据与标签读取函数(给dataloader举一个例子)</li></ul><h3 id="_1-2-咱们以花朵数据集为例" tabindex="-1">1.2 咱们以花朵数据集为例： <a class="header-anchor" href="#_1-2-咱们以花朵数据集为例" aria-label="Permalink to &quot;1.2 咱们以花朵数据集为例：&quot;">​</a></h3><ul><li>原来数据集都是以文件夹为类别ID，现在咱们换一个套路，用txt文件指定数据路径与标签(实际情况基本都这样)</li><li>这回咱们的任务就是在txt文件中获取图像路径与标签，然后把他们交给dataloader</li><li>核心代码非常简单，按照对应格式传递需要的数据和标签就可以啦</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> os</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> matplotlib.pyplot </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> plt</span></span>
<span class="line"><span style="color:#F47067;">%</span><span style="color:#ADBAC7;">matplotlib inline</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> numpy </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> np</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> torch </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> nn</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torch.optim </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> optim</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> torchvision</span></span>
<span class="line"><span style="color:#768390;">#pip install torchvision</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> torchvision </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> transforms, models, datasets</span></span>
<span class="line"><span style="color:#768390;">#https://pytorch.org/docs/stable/torchvision/index.html</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> imageio</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> time</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> warnings</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> random</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> sys</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> copy</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> json</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">PIL</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> Image</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> matplotlib.pyplot </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> plt</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">matplotlib inline</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> torch </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> nn</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torch.optim </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> optim</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> torchvision</span></span>
<span class="line"><span style="color:#6A737D;">#pip install torchvision</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> torchvision </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> transforms, models, datasets</span></span>
<span class="line"><span style="color:#6A737D;">#https://pytorch.org/docs/stable/torchvision/index.html</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> imageio</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> warnings</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> random</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sys</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> copy</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PIL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Image</span></span></code></pre></div><h3 id="_2-0-1-任务1-读取txt文件中的路径和标签" tabindex="-1">2.0.1 任务1：读取txt文件中的路径和标签 <a class="header-anchor" href="#_2-0-1-任务1-读取txt文件中的路径和标签" aria-label="Permalink to &quot;2.0.1 任务1：读取txt文件中的路径和标签&quot;">​</a></h3><ul><li>第一个小任务，从标注文件中读取数据和标签</li><li>至于你准备存成什么格式，都可以的，一会能取出来东西就行</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">load_annotations</span><span style="color:#ADBAC7;">(ann_file):</span></span>
<span class="line"><span style="color:#ADBAC7;">    data_infos </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {}</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">with</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">open</span><span style="color:#ADBAC7;">(ann_file) </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> f:</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># image_06734.jpg 0</span></span>
<span class="line"><span style="color:#ADBAC7;">        samples </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [x.strip().split(</span><span style="color:#96D0FF;">&#39; &#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> x </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> f.readlines()]</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> filename, gt_label </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> samples: </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;"># &#39;image_06734.jpg&#39;: array(0, dtype=int64)</span></span>
<span class="line"><span style="color:#ADBAC7;">            data_infos[filename] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.array(gt_label, </span><span style="color:#F69D50;">dtype</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">np.int64)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> data_infos</span></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(load_annotations(</span><span style="color:#96D0FF;">&#39;./flower_data/train.txt&#39;</span><span style="color:#ADBAC7;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">load_annotations</span><span style="color:#24292E;">(ann_file):</span></span>
<span class="line"><span style="color:#24292E;">    data_infos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(ann_file) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># image_06734.jpg 0</span></span>
<span class="line"><span style="color:#24292E;">        samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [x.strip().split(</span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> f.readlines()]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> filename, gt_label </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> samples: </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># &#39;image_06734.jpg&#39;: array(0, dtype=int64)</span></span>
<span class="line"><span style="color:#24292E;">            data_infos[filename] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.array(gt_label, </span><span style="color:#E36209;">dtype</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">np.int64)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> data_infos</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(load_annotations(</span><span style="color:#032F62;">&#39;./flower_data/train.txt&#39;</span><span style="color:#24292E;">))</span></span></code></pre></div><h3 id="_2-0-2-任务2-分别把数据和标签都存在list里" tabindex="-1">2.0.2 任务2：分别把数据和标签都存在list里 <a class="header-anchor" href="#_2-0-2-任务2-分别把数据和标签都存在list里" aria-label="Permalink to &quot;2.0.2 任务2：分别把数据和标签都存在list里&quot;">​</a></h3><ul><li>不是我非让你存list里，因为dataloader到时候会在这里取数据</li><li>按照人家要求来，不要耍个性，让整list咱就给人家整</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">img_label </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> load_annotations(</span><span style="color:#96D0FF;">&#39;./flower_data/train.txt&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">image_name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">list</span><span style="color:#ADBAC7;">(img_label.keys())</span></span>
<span class="line"><span style="color:#ADBAC7;">label </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">list</span><span style="color:#ADBAC7;">(img_label.values()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">img_label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> load_annotations(</span><span style="color:#032F62;">&#39;./flower_data/train.txt&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">image_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(img_label.keys())</span></span>
<span class="line"><span style="color:#24292E;">label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(img_label.values()</span></span></code></pre></div><h3 id="_2-0-3-任务3-图像数据路径得完整" tabindex="-1">2.0.3 任务3：图像数据路径得完整 <a class="header-anchor" href="#_2-0-3-任务3-图像数据路径得完整" aria-label="Permalink to &quot;2.0.3 任务3：图像数据路径得完整&quot;">​</a></h3><ul><li>因为一会咱得用这个路径去读数据，所以路径得加上前缀</li><li>以后大家任务不同，数据不同，怎么加你看着来就行，反正得能读到图像</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">data_dir </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./flower_data/&#39;</span></span>
<span class="line"><span style="color:#ADBAC7;">train_dir </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> data_dir </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;/train_filelist&#39;</span></span>
<span class="line"><span style="color:#ADBAC7;">valid_dir </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> data_dir </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;/val_filelist&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">image_path </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [os.path.join(train_dir,img) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> img </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> image_name]</span></span>
<span class="line"><span style="color:#ADBAC7;">image_path</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data_dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./flower_data/&#39;</span></span>
<span class="line"><span style="color:#24292E;">train_dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data_dir </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/train_filelist&#39;</span></span>
<span class="line"><span style="color:#24292E;">valid_dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data_dir </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/val_filelist&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">image_path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [os.path.join(train_dir,img) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> img </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> image_name]</span></span>
<span class="line"><span style="color:#24292E;">image_path</span></span></code></pre></div><h3 id="_2-0-4-任务4-把上面那几个事得写在一起" tabindex="-1">2.0.4 任务4：把上面那几个事得写在一起 <a class="header-anchor" href="#_2-0-4-任务4-把上面那几个事得写在一起" aria-label="Permalink to &quot;2.0.4 任务4：把上面那几个事得写在一起&quot;">​</a></h3><ul><li>1.注意要使用from torch.utils.data import Dataset, DataLoader</li><li>2.类名定义class FlowerDataset(Dataset)，其中FlowerDataset可以改成自己的名字</li><li>3.def <strong>init</strong>(self, root_dir, ann_file, transform=None):咱们要根据自己任务重写</li><li>4.def <strong>getitem</strong>(self, idx):根据自己任务，返回图像数据和标签数据</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> torch.utils.data </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> Dataset, DataLoader</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">FlowerDataset</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">Dataset</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">__init__</span><span style="color:#ADBAC7;">(self, root_dir, ann_file, transform</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.ann_file </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ann_file </span><span style="color:#768390;"># txt</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.root_dir </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> root_dir </span><span style="color:#768390;"># 图像所在文件夹</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># 字典格式的 &#39;image_06734.jpg&#39;: array(0, dtype=int64)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.img_label </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.load_annotations()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># 图像路径</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.img </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [os.path.join(</span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.root_dir,img) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> img </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">list</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.img_label.keys())]</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.label </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [label </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> label </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">list</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.img_label.values())]</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.transform </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> transform</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">__len__</span><span style="color:#ADBAC7;">(self):</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.img)</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">__getitem__</span><span style="color:#ADBAC7;">(self, idx):</span></span>
<span class="line"><span style="color:#ADBAC7;">        image </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Image.open(</span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.img[idx])</span></span>
<span class="line"><span style="color:#ADBAC7;">        label </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.label[idx]</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.transform:</span></span>
<span class="line"><span style="color:#ADBAC7;">            image </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.transform(image)</span></span>
<span class="line"><span style="color:#ADBAC7;">        label </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.from_numpy(np.array(label))</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> image, label</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 返回字典形式 </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">load_annotations</span><span style="color:#ADBAC7;">(self):</span></span>
<span class="line"><span style="color:#ADBAC7;">        data_infos </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {}</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">with</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">open</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">self</span><span style="color:#ADBAC7;">.ann_file) </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> f:</span></span>
<span class="line"><span style="color:#ADBAC7;">            samples </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [x.strip().split(</span><span style="color:#96D0FF;">&#39; &#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> x </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> f.readlines()]</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> filename, gt_label </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> samples:</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;"># &#39;image_06734.jpg&#39;: array(0, dtype=int64)</span></span>
<span class="line"><span style="color:#ADBAC7;">                data_infos[filename] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.array(gt_label, </span><span style="color:#F69D50;">dtype</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">np.int64)</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> data_infos</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> torch.utils.data </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Dataset, DataLoader</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FlowerDataset</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Dataset</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, root_dir, ann_file, transform</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.ann_file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ann_file </span><span style="color:#6A737D;"># txt</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.root_dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root_dir </span><span style="color:#6A737D;"># 图像所在文件夹</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 字典格式的 &#39;image_06734.jpg&#39;: array(0, dtype=int64)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.img_label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.load_annotations()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 图像路径</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.img </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.root_dir,img) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> img </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.img_label.keys())]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [label </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> label </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.img_label.values())]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.transform </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transform</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__len__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.img)</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__getitem__</span><span style="color:#24292E;">(self, idx):</span></span>
<span class="line"><span style="color:#24292E;">        image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Image.open(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.img[idx])</span></span>
<span class="line"><span style="color:#24292E;">        label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.label[idx]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.transform:</span></span>
<span class="line"><span style="color:#24292E;">            image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.transform(image)</span></span>
<span class="line"><span style="color:#24292E;">        label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.from_numpy(np.array(label))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> image, label</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 返回字典形式 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">load_annotations</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        data_infos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.ann_file) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">            samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [x.strip().split(</span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> f.readlines()]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> filename, gt_label </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> samples:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># &#39;image_06734.jpg&#39;: array(0, dtype=int64)</span></span>
<span class="line"><span style="color:#24292E;">                data_infos[filename] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.array(gt_label, </span><span style="color:#E36209;">dtype</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">np.int64)</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> data_infos</span></span></code></pre></div><h3 id="_2-0-5-任务5-数据预处理-transform" tabindex="-1">2.0.5 任务5：数据预处理(transform) <a class="header-anchor" href="#_2-0-5-任务5-数据预处理-transform" aria-label="Permalink to &quot;2.0.5 任务5：数据预处理(transform)&quot;">​</a></h3><ul><li>1.预处理的事都在上面的<strong>getitem</strong>中完成，需要对图像和标签咋咋地的，要整啥事，都在上面整</li><li>2.返回的数据和标签就是建模时模型的输入和损失函数中标签的输入，一定整明白自己模型要啥</li><li>3.预处理这个事是你定的，不同的数据需要的方法也不一样，下面给出的是比较通用的方法</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">data_transforms </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">: </span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Compose([</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Resize(</span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.RandomRotation(</span><span style="color:#6CB6FF;">45</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#随机旋转，-45到45度之间随机选</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.CenterCrop(</span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#从中心开始裁剪</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.RandomHorizontalFlip(</span><span style="color:#F69D50;">p</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#随机水平翻转 选择一个概率概率</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.RandomVerticalFlip(</span><span style="color:#F69D50;">p</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#随机垂直翻转</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.ColorJitter(</span><span style="color:#F69D50;">brightness</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.2</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">contrast</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">saturation</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">hue</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#参数1为亮度，参数2为对比度，参数3为饱和度，参数4为色相</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.RandomGrayscale(</span><span style="color:#F69D50;">p</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.025</span><span style="color:#ADBAC7;">),</span><span style="color:#768390;">#概率转换成灰度率，3通道就是R=G=B</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.ToTensor(),</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Normalize([</span><span style="color:#6CB6FF;">0.485</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.456</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.406</span><span style="color:#ADBAC7;">], [</span><span style="color:#6CB6FF;">0.229</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.224</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.225</span><span style="color:#ADBAC7;">])</span><span style="color:#768390;">#均值，标准差</span></span>
<span class="line"><span style="color:#ADBAC7;">    ]),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">: </span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Compose([</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Resize(</span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.CenterCrop(</span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.ToTensor(),</span></span>
<span class="line"><span style="color:#ADBAC7;">        transforms.Normalize([</span><span style="color:#6CB6FF;">0.485</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.456</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.406</span><span style="color:#ADBAC7;">], [</span><span style="color:#6CB6FF;">0.229</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.224</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.225</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">    ]),</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data_transforms </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        transforms.Compose([</span></span>
<span class="line"><span style="color:#24292E;">        transforms.Resize(</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        transforms.RandomRotation(</span><span style="color:#005CC5;">45</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#随机旋转，-45到45度之间随机选</span></span>
<span class="line"><span style="color:#24292E;">        transforms.CenterCrop(</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#从中心开始裁剪</span></span>
<span class="line"><span style="color:#24292E;">        transforms.RandomHorizontalFlip(</span><span style="color:#E36209;">p</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#随机水平翻转 选择一个概率概率</span></span>
<span class="line"><span style="color:#24292E;">        transforms.RandomVerticalFlip(</span><span style="color:#E36209;">p</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#随机垂直翻转</span></span>
<span class="line"><span style="color:#24292E;">        transforms.ColorJitter(</span><span style="color:#E36209;">brightness</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">contrast</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">saturation</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">hue</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#参数1为亮度，参数2为对比度，参数3为饱和度，参数4为色相</span></span>
<span class="line"><span style="color:#24292E;">        transforms.RandomGrayscale(</span><span style="color:#E36209;">p</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.025</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">#概率转换成灰度率，3通道就是R=G=B</span></span>
<span class="line"><span style="color:#24292E;">        transforms.ToTensor(),</span></span>
<span class="line"><span style="color:#24292E;">        transforms.Normalize([</span><span style="color:#005CC5;">0.485</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.456</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.406</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">0.229</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.224</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.225</span><span style="color:#24292E;">])</span><span style="color:#6A737D;">#均值，标准差</span></span>
<span class="line"><span style="color:#24292E;">    ]),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        transforms.Compose([</span></span>
<span class="line"><span style="color:#24292E;">        transforms.Resize(</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        transforms.CenterCrop(</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        transforms.ToTensor(),</span></span>
<span class="line"><span style="color:#24292E;">        transforms.Normalize([</span><span style="color:#005CC5;">0.485</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.456</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.406</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">0.229</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.224</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.225</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    ]),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-0-6-任务6-根据写好的class-flowerdataset-dataset-来实例化咱们的dataloader" tabindex="-1">2.0.6 任务6：根据写好的class FlowerDataset(Dataset):来实例化咱们的dataloader <a class="header-anchor" href="#_2-0-6-任务6-根据写好的class-flowerdataset-dataset-来实例化咱们的dataloader" aria-label="Permalink to &quot;2.0.6 任务6：根据写好的class FlowerDataset(Dataset):来实例化咱们的dataloader&quot;">​</a></h3><ul><li>1.构建数据集：分别创建训练和验证用的数据集（如果需要测试集也一样的方法）</li><li>2.用Torch给的DataLoader方法来实例化(batch啥的自己定，根据你的显存来选合适的)</li><li>3.打印看看数据里面是不是有东西了</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">train_dataset </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> FlowerDataset(</span><span style="color:#F69D50;">root_dir</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">train_dir, </span><span style="color:#F69D50;">ann_file</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./flower_data/train.txt&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">transform</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">data_transforms[</span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">val_dataset </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> FlowerDataset(</span><span style="color:#F69D50;">root_dir</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">valid_dir, </span><span style="color:#F69D50;">ann_file</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;./flower_data/val.txt&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">transform</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">data_transforms[</span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">train_loader </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DataLoader(train_dataset, </span><span style="color:#F69D50;">batch_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">shuffle</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">val_loader </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DataLoader(val_dataset, </span><span style="color:#F69D50;">batch_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">64</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">shuffle</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(train_dataset)</span></span>
<span class="line"><span style="color:#6CB6FF;">6552</span></span>
<span class="line"><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(val_dataset)</span></span>
<span class="line"><span style="color:#6CB6FF;">818</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">train_dataset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FlowerDataset(</span><span style="color:#E36209;">root_dir</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">train_dir, </span><span style="color:#E36209;">ann_file</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./flower_data/train.txt&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">transform</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">data_transforms[</span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">val_dataset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FlowerDataset(</span><span style="color:#E36209;">root_dir</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">valid_dir, </span><span style="color:#E36209;">ann_file</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./flower_data/val.txt&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">transform</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">data_transforms[</span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">train_loader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DataLoader(train_dataset, </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">, </span><span style="color:#E36209;">shuffle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">val_loader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DataLoader(val_dataset, </span><span style="color:#E36209;">batch_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">64</span><span style="color:#24292E;">, </span><span style="color:#E36209;">shuffle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">len</span><span style="color:#24292E;">(train_dataset)</span></span>
<span class="line"><span style="color:#005CC5;">6552</span></span>
<span class="line"><span style="color:#005CC5;">len</span><span style="color:#24292E;">(val_dataset)</span></span>
<span class="line"><span style="color:#005CC5;">818</span></span></code></pre></div><h3 id="_2-0-7-任务7-用之前先试试-整个数据和标签对应下-看看对不对" tabindex="-1">2.0.7 任务7：用之前先试试，整个数据和标签对应下，看看对不对 <a class="header-anchor" href="#_2-0-7-任务7-用之前先试试-整个数据和标签对应下-看看对不对" aria-label="Permalink to &quot;2.0.7 任务7：用之前先试试，整个数据和标签对应下，看看对不对&quot;">​</a></h3><ul><li>1.别着急往模型里传，对不对都不知道呢</li><li>2.用这个方法：iter(train_loader).next()来试试，得到的数据和标签是啥</li><li>3.看不出来就把图画出来，标签打印出来，确保自己整的数据集没啥问题</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">image, label </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">iter</span><span style="color:#ADBAC7;">(train_loader).next() </span><span style="color:#768390;"># .next()取一个batch数据</span></span>
<span class="line"><span style="color:#ADBAC7;">sample </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> image[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">].squeeze() </span><span style="color:#768390;"># 3*64*64</span></span>
<span class="line"><span style="color:#ADBAC7;">sample </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> sample.permute((</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)).numpy() </span><span style="color:#768390;"># 64*64*3 </span></span>
<span class="line"><span style="color:#ADBAC7;">sample </span><span style="color:#F47067;">*=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">0.229</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.224</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.225</span><span style="color:#ADBAC7;">] </span><span style="color:#768390;"># 标准差</span></span>
<span class="line"><span style="color:#ADBAC7;">sample </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">0.485</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.456</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.406</span><span style="color:#ADBAC7;">] </span><span style="color:#768390;"># 均值</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.imshow(sample)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Label is: </span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(label[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">].numpy()))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">image, label </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">iter</span><span style="color:#ADBAC7;">(val_loader).next()</span></span>
<span class="line"><span style="color:#ADBAC7;">sample </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> image[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">].squeeze()</span></span>
<span class="line"><span style="color:#ADBAC7;">sample </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> sample.permute((</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)).numpy()</span></span>
<span class="line"><span style="color:#ADBAC7;">sample </span><span style="color:#F47067;">*=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">0.229</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.224</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.225</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">sample </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> [</span><span style="color:#6CB6FF;">0.485</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.456</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.406</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.imshow(sample)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Label is: </span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(label[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">].numpy()))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">image, label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(train_loader).next() </span><span style="color:#6A737D;"># .next()取一个batch数据</span></span>
<span class="line"><span style="color:#24292E;">sample </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> image[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].squeeze() </span><span style="color:#6A737D;"># 3*64*64</span></span>
<span class="line"><span style="color:#24292E;">sample </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sample.permute((</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)).numpy() </span><span style="color:#6A737D;"># 64*64*3 </span></span>
<span class="line"><span style="color:#24292E;">sample </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0.229</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.224</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.225</span><span style="color:#24292E;">] </span><span style="color:#6A737D;"># 标准差</span></span>
<span class="line"><span style="color:#24292E;">sample </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0.485</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.456</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.406</span><span style="color:#24292E;">] </span><span style="color:#6A737D;"># 均值</span></span>
<span class="line"><span style="color:#24292E;">plt.imshow(sample)</span></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Label is: </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(label[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].numpy()))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">image, label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;">(val_loader).next()</span></span>
<span class="line"><span style="color:#24292E;">sample </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> image[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].squeeze()</span></span>
<span class="line"><span style="color:#24292E;">sample </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sample.permute((</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)).numpy()</span></span>
<span class="line"><span style="color:#24292E;">sample </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0.229</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.224</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.225</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">sample </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0.485</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.456</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.406</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">plt.imshow(sample)</span></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Label is: </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(label[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].numpy()))</span></span></code></pre></div><h3 id="_2-0-8-任务8-咋用就是你来定了-把模型啥的整好往里面传吧" tabindex="-1">2.0.8 任务8：咋用就是你来定了，把模型啥的整好往里面传吧 <a class="header-anchor" href="#_2-0-8-任务8-咋用就是你来定了-把模型啥的整好往里面传吧" aria-label="Permalink to &quot;2.0.8 任务8：咋用就是你来定了，把模型啥的整好往里面传吧&quot;">​</a></h3><ul><li>下面这些事之前都唠过了，按照自己习惯的方法整就得了</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">dataloaders </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">:train_loader,</span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">:val_loader}</span></span>
<span class="line"><span style="color:#ADBAC7;">model_name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;resnet&#39;</span><span style="color:#ADBAC7;">  </span><span style="color:#768390;">#可选的比较多 [&#39;resnet&#39;, &#39;alexnet&#39;, &#39;vgg&#39;, &#39;squeezenet&#39;, &#39;densenet&#39;, &#39;inception&#39;]</span></span>
<span class="line"><span style="color:#768390;">#是否用人家训练好的特征来做</span></span>
<span class="line"><span style="color:#ADBAC7;">feature_extract </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dataloaders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">:train_loader,</span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">:val_loader}</span></span>
<span class="line"><span style="color:#24292E;">model_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;resnet&#39;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#可选的比较多 [&#39;resnet&#39;, &#39;alexnet&#39;, &#39;vgg&#39;, &#39;squeezenet&#39;, &#39;densenet&#39;, &#39;inception&#39;]</span></span>
<span class="line"><span style="color:#6A737D;">#是否用人家训练好的特征来做</span></span>
<span class="line"><span style="color:#24292E;">feature_extract </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 是否用GPU训练</span></span>
<span class="line"><span style="color:#ADBAC7;">train_on_gpu </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.cuda.is_available()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">not</span><span style="color:#ADBAC7;"> train_on_gpu:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;CUDA is not available.  Training on CPU ...&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">else</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;CUDA is available!  Training on GPU ...&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">device </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.device(</span><span style="color:#96D0FF;">&quot;cuda:0&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> torch.cuda.is_available() </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;cpu&quot;</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 是否用GPU训练</span></span>
<span class="line"><span style="color:#24292E;">train_on_gpu </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.cuda.is_available()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> train_on_gpu:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;CUDA is not available.  Training on CPU ...&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;CUDA is available!  Training on GPU ...&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">device </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.device(</span><span style="color:#032F62;">&quot;cuda:0&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> torch.cuda.is_available() </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;cpu&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">model_ft </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> models.resnet18()</span></span>
<span class="line"><span style="color:#ADBAC7;">model_ft</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">model_ft </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> models.resnet18()</span></span>
<span class="line"><span style="color:#24292E;">model_ft</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">num_ftrs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> model_ft.fc.in_features</span></span>
<span class="line"><span style="color:#ADBAC7;">model_ft.fc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.Sequential(nn.Linear(num_ftrs, </span><span style="color:#6CB6FF;">102</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">input_size </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">64</span></span>
<span class="line"><span style="color:#ADBAC7;">model_ft</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">num_ftrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model_ft.fc.in_features</span></span>
<span class="line"><span style="color:#24292E;">model_ft.fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.Sequential(nn.Linear(num_ftrs, </span><span style="color:#005CC5;">102</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">input_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span></span>
<span class="line"><span style="color:#24292E;">model_ft</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 优化器设置</span></span>
<span class="line"><span style="color:#ADBAC7;">optimizer_ft </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> optim.Adam(model_ft.parameters(), </span><span style="color:#F69D50;">lr</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1e-3</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">scheduler </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> optim.lr_scheduler.StepLR(optimizer_ft, </span><span style="color:#F69D50;">step_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">gamma</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">#学习率每7个epoch衰减成原来的1/10</span></span>
<span class="line"><span style="color:#ADBAC7;">criterion </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> nn.CrossEntropyLoss()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 优化器设置</span></span>
<span class="line"><span style="color:#24292E;">optimizer_ft </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> optim.Adam(model_ft.parameters(), </span><span style="color:#E36209;">lr</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1e-3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> optim.lr_scheduler.StepLR(optimizer_ft, </span><span style="color:#E36209;">step_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#E36209;">gamma</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#学习率每7个epoch衰减成原来的1/10</span></span>
<span class="line"><span style="color:#24292E;">criterion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nn.CrossEntropyLoss()</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">train_model</span><span style="color:#ADBAC7;">(model, dataloaders, criterion, optimizer, num_epochs</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;">, is_inception</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">False</span><span style="color:#ADBAC7;">, filename</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;best.pth&#39;</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    since </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> time.time()</span></span>
<span class="line"><span style="color:#ADBAC7;">    best_acc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span></span>
<span class="line"><span style="color:#ADBAC7;">    model.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    val_acc_history </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#ADBAC7;">    train_acc_history </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#ADBAC7;">    train_losses </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#ADBAC7;">    valid_losses </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> []</span></span>
<span class="line"><span style="color:#ADBAC7;">    LRs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [optimizer.param_groups[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">][</span><span style="color:#96D0FF;">&#39;lr&#39;</span><span style="color:#ADBAC7;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    best_model_wts </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> copy.deepcopy(model.state_dict())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> epoch </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">range</span><span style="color:#ADBAC7;">(num_epochs):</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Epoch </span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">/</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(epoch, num_epochs </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;-&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;"># 训练和验证</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> [</span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">]:</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">                model.train()  </span><span style="color:#768390;"># 训练</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">                model.eval()   </span><span style="color:#768390;"># 验证</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">            running_loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.0</span></span>
<span class="line"><span style="color:#ADBAC7;">            running_corrects </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;"># 把数据都取个遍</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> inputs, labels </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> dataloaders[phase]:</span></span>
<span class="line"><span style="color:#ADBAC7;">                inputs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> inputs.to(device)</span></span>
<span class="line"><span style="color:#ADBAC7;">                labels </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> labels.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;"># 清零</span></span>
<span class="line"><span style="color:#ADBAC7;">                optimizer.zero_grad()</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;"># 只有训练的时候计算和更新梯度</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#F47067;">with</span><span style="color:#ADBAC7;"> torch.set_grad_enabled(phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">                    outputs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> model(inputs)</span></span>
<span class="line"><span style="color:#ADBAC7;">                    loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> criterion(outputs, labels)</span></span>
<span class="line"><span style="color:#ADBAC7;">                    _, preds </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> torch.max(outputs, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">                    </span><span style="color:#768390;">#print(loss)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">                    </span><span style="color:#768390;"># 训练阶段更新权重</span></span>
<span class="line"><span style="color:#ADBAC7;">                    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">                        loss.backward()</span></span>
<span class="line"><span style="color:#ADBAC7;">                        optimizer.step()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;"># 计算损失</span></span>
<span class="line"><span style="color:#ADBAC7;">                running_loss </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> loss.item() </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> inputs.size(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">                running_corrects </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> torch.sum(preds </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> labels.data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">            epoch_loss </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> running_loss </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(dataloaders[phase].dataset)</span></span>
<span class="line"><span style="color:#ADBAC7;">            epoch_acc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> running_corrects.double() </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(dataloaders[phase].dataset)</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"><span style="color:#ADBAC7;">            time_elapsed </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> time.time() </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> since</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Time elapsed </span><span style="color:#F47067;">{:.0f}</span><span style="color:#96D0FF;">m </span><span style="color:#F47067;">{:.0f}</span><span style="color:#96D0FF;">s&#39;</span><span style="color:#ADBAC7;">.format(time_elapsed </span><span style="color:#F47067;">//</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">, time_elapsed </span><span style="color:#F47067;">%</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;"> Loss: </span><span style="color:#F47067;">{:.4f}</span><span style="color:#96D0FF;"> Acc: </span><span style="color:#F47067;">{:.4f}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(phase, epoch_loss, epoch_acc))</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;"># 得到最好那次的模型</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">and</span><span style="color:#ADBAC7;"> epoch_acc </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> best_acc:</span></span>
<span class="line"><span style="color:#ADBAC7;">                best_acc </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> epoch_acc</span></span>
<span class="line"><span style="color:#ADBAC7;">                best_model_wts </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> copy.deepcopy(model.state_dict())</span></span>
<span class="line"><span style="color:#ADBAC7;">                state </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#96D0FF;">&#39;state_dict&#39;</span><span style="color:#ADBAC7;">: model.state_dict(),</span><span style="color:#768390;">#字典里key就是各层的名字，值就是训练好的权重</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#96D0FF;">&#39;best_acc&#39;</span><span style="color:#ADBAC7;">: best_acc,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#96D0FF;">&#39;optimizer&#39;</span><span style="color:#ADBAC7;"> : optimizer.state_dict(),</span><span style="color:#768390;">#优化器的状态信息</span></span>
<span class="line"><span style="color:#ADBAC7;">                }</span></span>
<span class="line"><span style="color:#ADBAC7;">                torch.save(state, filename)</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;valid&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">                val_acc_history.append(epoch_acc)</span></span>
<span class="line"><span style="color:#ADBAC7;">                valid_losses.append(epoch_loss)</span></span>
<span class="line"><span style="color:#ADBAC7;">                scheduler.step(epoch_loss)</span><span style="color:#768390;">#学习率衰减</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> phase </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;train&#39;</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">                train_acc_history.append(epoch_acc)</span></span>
<span class="line"><span style="color:#ADBAC7;">                train_losses.append(epoch_loss)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Optimizer learning rate : </span><span style="color:#F47067;">{:.7f}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(optimizer.param_groups[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">][</span><span style="color:#96D0FF;">&#39;lr&#39;</span><span style="color:#ADBAC7;">]))</span></span>
<span class="line"><span style="color:#ADBAC7;">        LRs.append(optimizer.param_groups[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">][</span><span style="color:#96D0FF;">&#39;lr&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    time_elapsed </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> time.time() </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> since</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Training complete in </span><span style="color:#F47067;">{:.0f}</span><span style="color:#96D0FF;">m </span><span style="color:#F47067;">{:.0f}</span><span style="color:#96D0FF;">s&#39;</span><span style="color:#ADBAC7;">.format(time_elapsed </span><span style="color:#F47067;">//</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">, time_elapsed </span><span style="color:#F47067;">%</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;Best val Acc: </span><span style="color:#F47067;">{:4f}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(best_acc))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># 训练完后用最好的一次当做模型最终的结果,等着一会测试</span></span>
<span class="line"><span style="color:#ADBAC7;">    model.load_state_dict(best_model_wts)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> model, val_acc_history, train_acc_history, valid_losses, train_losses, LRs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">train_model</span><span style="color:#24292E;">(model, dataloaders, criterion, optimizer, num_epochs</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, is_inception</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, filename</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;best.pth&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    since </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"><span style="color:#24292E;">    best_acc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    model.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    val_acc_history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    train_acc_history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    train_losses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    valid_losses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    LRs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [optimizer.param_groups[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;lr&#39;</span><span style="color:#24292E;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    best_model_wts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> copy.deepcopy(model.state_dict())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> epoch </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(num_epochs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Epoch </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(epoch, num_epochs </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;-&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 训练和验证</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                model.train()  </span><span style="color:#6A737D;"># 训练</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                model.eval()   </span><span style="color:#6A737D;"># 验证</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            running_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span></span>
<span class="line"><span style="color:#24292E;">            running_corrects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 把数据都取个遍</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> inputs, labels </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> dataloaders[phase]:</span></span>
<span class="line"><span style="color:#24292E;">                inputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputs.to(device)</span></span>
<span class="line"><span style="color:#24292E;">                labels </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> labels.to(device)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 清零</span></span>
<span class="line"><span style="color:#24292E;">                optimizer.zero_grad()</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 只有训练的时候计算和更新梯度</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> torch.set_grad_enabled(phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">                    outputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model(inputs)</span></span>
<span class="line"><span style="color:#24292E;">                    loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> criterion(outputs, labels)</span></span>
<span class="line"><span style="color:#24292E;">                    _, preds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> torch.max(outputs, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">#print(loss)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 训练阶段更新权重</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                        loss.backward()</span></span>
<span class="line"><span style="color:#24292E;">                        optimizer.step()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 计算损失</span></span>
<span class="line"><span style="color:#24292E;">                running_loss </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> loss.item() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> inputs.size(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                running_corrects </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> torch.sum(preds </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> labels.data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            epoch_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> running_loss </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(dataloaders[phase].dataset)</span></span>
<span class="line"><span style="color:#24292E;">            epoch_acc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> running_corrects.double() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(dataloaders[phase].dataset)</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            time_elapsed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> since</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Time elapsed </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.0f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">m </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.0f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">s&#39;</span><span style="color:#24292E;">.format(time_elapsed </span><span style="color:#D73A49;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, time_elapsed </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;"> Loss: </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.4f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> Acc: </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.4f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(phase, epoch_loss, epoch_acc))</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 得到最好那次的模型</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> epoch_acc </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> best_acc:</span></span>
<span class="line"><span style="color:#24292E;">                best_acc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> epoch_acc</span></span>
<span class="line"><span style="color:#24292E;">                best_model_wts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> copy.deepcopy(model.state_dict())</span></span>
<span class="line"><span style="color:#24292E;">                state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&#39;state_dict&#39;</span><span style="color:#24292E;">: model.state_dict(),</span><span style="color:#6A737D;">#字典里key就是各层的名字，值就是训练好的权重</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&#39;best_acc&#39;</span><span style="color:#24292E;">: best_acc,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#032F62;">&#39;optimizer&#39;</span><span style="color:#24292E;"> : optimizer.state_dict(),</span><span style="color:#6A737D;">#优化器的状态信息</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                torch.save(state, filename)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;valid&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                val_acc_history.append(epoch_acc)</span></span>
<span class="line"><span style="color:#24292E;">                valid_losses.append(epoch_loss)</span></span>
<span class="line"><span style="color:#24292E;">                scheduler.step(epoch_loss)</span><span style="color:#6A737D;">#学习率衰减</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> phase </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;train&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                train_acc_history.append(epoch_acc)</span></span>
<span class="line"><span style="color:#24292E;">                train_losses.append(epoch_loss)</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Optimizer learning rate : </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.7f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(optimizer.param_groups[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;lr&#39;</span><span style="color:#24292E;">]))</span></span>
<span class="line"><span style="color:#24292E;">        LRs.append(optimizer.param_groups[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;lr&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    time_elapsed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> since</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Training complete in </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.0f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">m </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:.0f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">s&#39;</span><span style="color:#24292E;">.format(time_elapsed </span><span style="color:#D73A49;">//</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, time_elapsed </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Best val Acc: </span><span style="color:#005CC5;">{</span><span style="color:#D73A49;">:4f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(best_acc))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 训练完后用最好的一次当做模型最终的结果,等着一会测试</span></span>
<span class="line"><span style="color:#24292E;">    model.load_state_dict(best_model_wts)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model, val_acc_history, train_acc_history, valid_losses, train_losses, LRs</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs  </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> train_model(model_ft, dataloaders, criterion, optimizer_ft, </span><span style="color:#F69D50;">num_epochs</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">filename</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;best.pth&#39;</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">model_ft, val_acc_history, train_acc_history, valid_losses, train_losses, LRs  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_model(model_ft, dataloaders, criterion, optimizer_ft, </span><span style="color:#E36209;">num_epochs</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#E36209;">filename</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;best.pth&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="_6-lstm文本分类实战" tabindex="-1">6. LSTM文本分类实战 <a class="header-anchor" href="#_6-lstm文本分类实战" aria-label="Permalink to &quot;6. LSTM文本分类实战&quot;">​</a></h2><p>见pycharm</p><h2 id="_7-flask部署" tabindex="-1">7. flask部署 <a class="header-anchor" href="#_7-flask部署" aria-label="Permalink to &quot;7. flask部署&quot;">​</a></h2><p>见pycharm 测试成功</p>`,132);function h(s,_,u,f,g,b){const o=t,e=D("ClientOnly");return l(),r("div",null,[E,y(e,null,{default:i(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),F(o,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),m])}const z=c(B,[["render",h]]);export{q as __pageData,z as default};
