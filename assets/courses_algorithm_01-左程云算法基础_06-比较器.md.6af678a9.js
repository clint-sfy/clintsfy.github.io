import{_ as e}from"./chunks/ArticleMetadata.efdb5e9a.js";import{_ as r,v as l,b as c,t as i,O as y,F as o,L as d,R as A,M as h,C as m,B as D}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const $=JSON.parse('{"title":"比较器","description":"","frontmatter":{"title":"比较器","author":"阿源","date":"2023/03/06 12:00","categories":["数据结构与算法"],"tags":["数据结构与算法"]},"headers":[],"relativePath":"courses/algorithm/01-左程云算法基础/06-比较器.md","filePath":"courses/algorithm/01-左程云算法基础/06-比较器.md","lastUpdated":1691397650000}'),u={name:"courses/algorithm/01-左程云算法基础/06-比较器.md"},C=o("h1",{id:"比较器",tabindex:"-1"},[d("比较器 "),o("a",{class:"header-anchor",href:"#比较器","aria-label":'Permalink to "比较器"'},"​")],-1),_=A(`<h2 id="_1-比较器" tabindex="-1">1. 比较器 <a class="header-anchor" href="#_1-比较器" aria-label="Permalink to &quot;1. 比较器&quot;">​</a></h2><ul><li>比较器的实质就是重载比较运算符</li><li>比较器可以很好的应用在特殊标准的排序上</li><li>比较器可以很好的应用在根据特殊排序的结构上</li><li>写代码变得异常容易，还用于范型编程</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">EdgeComparator</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Comparator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Edge</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		@</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">compare</span><span style="color:#ADBAC7;">(Edge </span><span style="color:#F69D50;">o1</span><span style="color:#ADBAC7;">, Edge </span><span style="color:#F69D50;">o2</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> o1.weight </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> o2.weight;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EdgeComparator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Edge</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Edge </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Edge </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o1.weight </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o2.weight;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_2-堆结构" tabindex="-1">2. 堆结构 <a class="header-anchor" href="#_2-堆结构" aria-label="Permalink to &quot;2. 堆结构&quot;">​</a></h2>`,4);function E(s,g,B,F,b,f){const p=e,t=h("ClientOnly");return l(),c("div",null,[C,i(t,null,{default:y(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),m(p,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),_])}const w=r(u,[["render",E]]);export{$ as __pageData,w as default};
