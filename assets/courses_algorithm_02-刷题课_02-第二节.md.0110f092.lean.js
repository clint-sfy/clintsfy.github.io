import{_ as e}from"./chunks/ArticleMetadata.e10718d6.js";import{_ as c,v as l,b as r,E as y,O as A,F as p,L as i,R as D,M as C,C as B,B as E}from"./chunks/framework.2aeb816e.js";import"./chunks/md5.772bbdf1.js";const _=JSON.parse('{"title":"大厂刷题班2","description":"","frontmatter":{"title":"大厂刷题班2","author":"阿源","date":"2023/04/01 12:00","categories":["大厂刷题班"],"tags":["LeetCode"]},"headers":[],"relativePath":"courses/algorithm/02-刷题课/02-第二节.md","filePath":"courses/algorithm/02-刷题课/02-第二节.md","lastUpdated":1691397650000}'),F={name:"courses/algorithm/02-刷题课/02-第二节.md"},d=p("h1",{id:"大厂刷题班2",tabindex:"-1"},[i("# 大厂刷题班2 "),p("a",{class:"header-anchor",href:"#大厂刷题班2","aria-label":'Permalink to "# 大厂刷题班2"'},"​")],-1),m=D(`<h2 id="_02-第二节" tabindex="-1">02 第二节 <a class="header-anchor" href="#_02-第二节" aria-label="Permalink to &quot;02 第二节&quot;">​</a></h2><h3 id="_1-choosework-贪心-有序表" tabindex="-1">1. ChooseWork（贪心 有序表） <a class="header-anchor" href="#_1-choosework-贪心-有序表" aria-label="Permalink to &quot;1. ChooseWork（贪心 有序表）&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">给定数组hard和money，长度都为N</span></span>
<span class="line"><span style="color:#adbac7;">hard[i]表示i号的难度，money[i]表示i号 工作的收入</span></span>
<span class="line"><span style="color:#adbac7;">给定数组ability,长度都为M，ability[j]表示j号 人的能力</span></span>
<span class="line"><span style="color:#adbac7;">每一号工作，都可以提供无数的岗位，难度和收入都一样</span></span>
<span class="line"><span style="color:#adbac7;">但是人的能力必须&gt;=这份工作的难度，才能上班</span></span>
<span class="line"><span style="color:#adbac7;">返回一个长度为M的数组ans，ans[j]表示j号 人能获得的最好收入</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">根据难度排序 难度一样收入大的放前面</span></span>
<span class="line"><span style="color:#adbac7;">只需要同难度中收入最高的，然后难度的收入要按升序排列</span></span>
<span class="line"><span style="color:#adbac7;">二分去查询</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">给定数组hard和money，长度都为N</span></span>
<span class="line"><span style="color:#24292e;">hard[i]表示i号的难度，money[i]表示i号 工作的收入</span></span>
<span class="line"><span style="color:#24292e;">给定数组ability,长度都为M，ability[j]表示j号 人的能力</span></span>
<span class="line"><span style="color:#24292e;">每一号工作，都可以提供无数的岗位，难度和收入都一样</span></span>
<span class="line"><span style="color:#24292e;">但是人的能力必须&gt;=这份工作的难度，才能上班</span></span>
<span class="line"><span style="color:#24292e;">返回一个长度为M的数组ans，ans[j]表示j号 人能获得的最好收入</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">根据难度排序 难度一样收入大的放前面</span></span>
<span class="line"><span style="color:#24292e;">只需要同难度中收入最高的，然后难度的收入要按升序排列</span></span>
<span class="line"><span style="color:#24292e;">二分去查询</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Job</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">money;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">hard;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Job</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">m</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">h</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			money </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> m;</span></span>
<span class="line"><span style="color:#ADBAC7;">			hard </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> h;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">JobComparator</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Comparator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Job</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">		@</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">compare</span><span style="color:#ADBAC7;">(Job </span><span style="color:#F69D50;">o1</span><span style="color:#ADBAC7;">, Job </span><span style="color:#F69D50;">o2</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> o1.hard </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> o2.hard </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> (o1.hard </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> o2.hard) </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> (o2.money </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> o1.money);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[] </span><span style="color:#DCBDFB;">getMoneys</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">Job</span><span style="color:#ADBAC7;">[] job, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[] ability) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		Arrays.</span><span style="color:#DCBDFB;">sort</span><span style="color:#ADBAC7;">(job, </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">JobComparator</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// key : 难度   value：报酬</span></span>
<span class="line"><span style="color:#ADBAC7;">		TreeMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">map</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> TreeMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span></span>
<span class="line"><span style="color:#ADBAC7;">		map.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(job[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">].hard, job[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">].money);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// pre : 上一份进入map的工作</span></span>
<span class="line"><span style="color:#ADBAC7;">		Job</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">pre</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> job[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> job.length; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 当前难度和上一份难度不一样   当前的报酬要比前一份工作高</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (job[i].hard </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> pre.hard </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> job[i].money </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> pre.money) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				pre </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> job[i];</span></span>
<span class="line"><span style="color:#ADBAC7;">				map.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(pre.hard, pre.money);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">ans</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[ability.length];</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> ability.length; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// ability[i] 当前人的能力 &lt;= ability[i]  且离它最近的</span></span>
<span class="line"><span style="color:#ADBAC7;">			Integer</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">key</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> map.</span><span style="color:#DCBDFB;">floorKey</span><span style="color:#ADBAC7;">(ability[i]);</span></span>
<span class="line"><span style="color:#ADBAC7;">			ans[i] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> key </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;"> map.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(key) </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ans;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Job</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> money;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> hard;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Job</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">m</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">h</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			money </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m;</span></span>
<span class="line"><span style="color:#24292E;">			hard </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> h;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JobComparator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Job</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Job </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Job </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o1.hard </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> o2.hard </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (o1.hard </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o2.hard) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (o2.money </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o1.money);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">getMoneys</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">Job</span><span style="color:#24292E;">[] job, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] ability) {</span></span>
<span class="line"><span style="color:#24292E;">		Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(job, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JobComparator</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// key : 难度   value：报酬</span></span>
<span class="line"><span style="color:#24292E;">		TreeMap&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">		map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(job[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].hard, job[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].money);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// pre : 上一份进入map的工作</span></span>
<span class="line"><span style="color:#24292E;">		Job pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> job[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> job.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 当前难度和上一份难度不一样   当前的报酬要比前一份工作高</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (job[i].hard </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> pre.hard </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> job[i].money </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> pre.money) {</span></span>
<span class="line"><span style="color:#24292E;">				pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> job[i];</span></span>
<span class="line"><span style="color:#24292E;">				map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(pre.hard, pre.money);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[ability.length];</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ability.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// ability[i] 当前人的能力 &lt;= ability[i]  且离它最近的</span></span>
<span class="line"><span style="color:#24292E;">			Integer key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">floorKey</span><span style="color:#24292E;">(ability[i]);</span></span>
<span class="line"><span style="color:#24292E;">			ans[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="_2-cola-携程" tabindex="-1">2. <strong>Cola</strong> （携程 ） <a class="header-anchor" href="#_2-cola-携程" aria-label="Permalink to &quot;2. **Cola** （携程 ）&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">* 买饮料 时间限制： 3000MS 内存限制： 589824KB 题目描述：</span></span>
<span class="line"><span style="color:#adbac7;">	 * 游游今年就要毕业了，和同学们在携程上定制了日本毕业旅行。愉快的一天行程结束后大家回到了酒店房间，这时候同学们都很口渴，</span></span>
<span class="line"><span style="color:#adbac7;">	 * 石头剪刀布选出游游去楼下的自动贩卖机给大家买可乐。 贩卖机只支持硬币支付，且收退都只支持10 ，50，100</span></span>
<span class="line"><span style="color:#adbac7;">	 * 三种面额。一次购买行为只能出一瓶可乐，且每次购买后总是找零最小枚数的硬币。（例如投入100圆，可乐30圆，则找零50圆一枚，10圆两枚）</span></span>
<span class="line"><span style="color:#adbac7;">	 * 游游需要购买的可乐数量是 m，其中手头拥有的 10,50,100 面额硬币的枚数分别是 a,b,c，可乐的价格是x(x是10的倍数)。</span></span>
<span class="line"><span style="color:#adbac7;">	 * 如果游游优先使用大面额购买且钱是够的情况下,请计算出需要投入硬币次数？ 输入描述 依次输入， 需要可乐的数量为 m 10元的张数为 a 50元的张数为 b</span></span>
<span class="line"><span style="color:#adbac7;">	 * 100元的张树为 c 1瓶可乐的价格为 x 输出描述 输出当前金额下需要投入硬币的次数</span></span>
<span class="line"><span style="color:#adbac7;">	 * 例如需要购买2瓶可乐，每瓶可乐250圆，手里有100圆3枚，50圆4枚，10圆1枚。 购买第1瓶投递100圆3枚，找50圆 购买第2瓶投递50圆5枚</span></span>
<span class="line"><span style="color:#adbac7;">	 * 所以是总共需要操作8次金额投递操作 样例输入 2 1 4 3 250 样例输出 8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">* 买饮料 时间限制： 3000MS 内存限制： 589824KB 题目描述：</span></span>
<span class="line"><span style="color:#24292e;">	 * 游游今年就要毕业了，和同学们在携程上定制了日本毕业旅行。愉快的一天行程结束后大家回到了酒店房间，这时候同学们都很口渴，</span></span>
<span class="line"><span style="color:#24292e;">	 * 石头剪刀布选出游游去楼下的自动贩卖机给大家买可乐。 贩卖机只支持硬币支付，且收退都只支持10 ，50，100</span></span>
<span class="line"><span style="color:#24292e;">	 * 三种面额。一次购买行为只能出一瓶可乐，且每次购买后总是找零最小枚数的硬币。（例如投入100圆，可乐30圆，则找零50圆一枚，10圆两枚）</span></span>
<span class="line"><span style="color:#24292e;">	 * 游游需要购买的可乐数量是 m，其中手头拥有的 10,50,100 面额硬币的枚数分别是 a,b,c，可乐的价格是x(x是10的倍数)。</span></span>
<span class="line"><span style="color:#24292e;">	 * 如果游游优先使用大面额购买且钱是够的情况下,请计算出需要投入硬币次数？ 输入描述 依次输入， 需要可乐的数量为 m 10元的张数为 a 50元的张数为 b</span></span>
<span class="line"><span style="color:#24292e;">	 * 100元的张树为 c 1瓶可乐的价格为 x 输出描述 输出当前金额下需要投入硬币的次数</span></span>
<span class="line"><span style="color:#24292e;">	 * 例如需要购买2瓶可乐，每瓶可乐250圆，手里有100圆3枚，50圆4枚，10圆1枚。 购买第1瓶投递100圆3枚，找50圆 购买第2瓶投递50圆5枚</span></span>
<span class="line"><span style="color:#24292e;">	 * 所以是总共需要操作8次金额投递操作 样例输入 2 1 4 3 250 样例输出 8</span></span></code></pre></div><h3 id="_3-receiveandprintorderline-数据结构设计" tabindex="-1">3.ReceiveAndPrintOrderLine（数据结构设计） <a class="header-anchor" href="#_3-receiveandprintorderline-数据结构设计" aria-label="Permalink to &quot;3.ReceiveAndPrintOrderLine（数据结构设计）&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Node</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">info;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">next;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(String </span><span style="color:#F69D50;">str</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			info </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> str;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MessageBox</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">headMap;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">tailMap;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">waitPoint;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">MessageBox</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">			headMap </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashMap&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">Node</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">			tailMap </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashMap&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">Node</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">			waitPoint </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// 消息的编号，info消息的内容, 消息一定从1开始</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">receive</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">num</span><span style="color:#ADBAC7;">, String </span><span style="color:#F69D50;">info</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (num </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(info);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// num~num</span></span>
<span class="line"><span style="color:#ADBAC7;">			headMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(num, cur);</span></span>
<span class="line"><span style="color:#ADBAC7;">			tailMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(num, cur);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// 建立了num~num这个连续区间的头和尾</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// 查询有没有某个连续区间以num-1结尾</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (tailMap.</span><span style="color:#DCBDFB;">containsKey</span><span style="color:#ADBAC7;">(num </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				tailMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(num </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">).next </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur;</span></span>
<span class="line"><span style="color:#ADBAC7;">				tailMap.</span><span style="color:#DCBDFB;">remove</span><span style="color:#ADBAC7;">(num </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">				headMap.</span><span style="color:#DCBDFB;">remove</span><span style="color:#ADBAC7;">(num);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// 查询有没有某个连续区间以num+1开头的</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (headMap.</span><span style="color:#DCBDFB;">containsKey</span><span style="color:#ADBAC7;">(num </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				cur.next </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> headMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(num </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">				tailMap.</span><span style="color:#DCBDFB;">remove</span><span style="color:#ADBAC7;">(num);</span></span>
<span class="line"><span style="color:#ADBAC7;">				headMap.</span><span style="color:#DCBDFB;">remove</span><span style="color:#ADBAC7;">(num </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (num </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> waitPoint) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">			Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">node</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> headMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(waitPoint);</span></span>
<span class="line"><span style="color:#ADBAC7;">			headMap.</span><span style="color:#DCBDFB;">remove</span><span style="color:#ADBAC7;">(waitPoint);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (node </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				System.out.</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">(node.info </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">				node </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> node.next;</span></span>
<span class="line"><span style="color:#ADBAC7;">				waitPoint</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			tailMap.</span><span style="color:#DCBDFB;">remove</span><span style="color:#ADBAC7;">(waitPoint</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String info;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node next;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageBox</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; headMap;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; tailMap;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> waitPoint;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageBox</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			headMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">			tailMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">			waitPoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 消息的编号，info消息的内容, 消息一定从1开始</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (num </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(info);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// num~num</span></span>
<span class="line"><span style="color:#24292E;">			headMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(num, cur);</span></span>
<span class="line"><span style="color:#24292E;">			tailMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(num, cur);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 建立了num~num这个连续区间的头和尾</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 查询有没有某个连续区间以num-1结尾</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tailMap.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(num </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">				tailMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(num </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur;</span></span>
<span class="line"><span style="color:#24292E;">				tailMap.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(num </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">				headMap.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(num);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 查询有没有某个连续区间以num+1开头的</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (headMap.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(num </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">				cur.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> headMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(num </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">				tailMap.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(num);</span></span>
<span class="line"><span style="color:#24292E;">				headMap.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(num </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (num </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> waitPoint) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			Node node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> headMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(waitPoint);</span></span>
<span class="line"><span style="color:#24292E;">			headMap.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(waitPoint);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (node </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(node.info </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">				node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.next;</span></span>
<span class="line"><span style="color:#24292E;">				waitPoint</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			tailMap.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(waitPoint</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="_6-minlengthforsort" tabindex="-1">6. <strong>MinLengthForSort</strong> <a class="header-anchor" href="#_6-minlengthforsort" aria-label="Permalink to &quot;6. **MinLengthForSort**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">// 本题测试链接 : https://leetcode.com/problems/shortest-unsorted-continuous-subarray/</span></span>
<span class="line"><span style="color:#adbac7;">给定一个数组arr，只能对arr中的一个子数组排序,</span></span>
<span class="line"><span style="color:#adbac7;">但是想让arr整体都有序</span></span>
<span class="line"><span style="color:#adbac7;">返回满足这一设定的子数组中，最短的是多长</span></span>
<span class="line"><span style="color:#adbac7;">int[] arr = { 1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19 };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 本题测试链接 : https://leetcode.com/problems/shortest-unsorted-continuous-subarray/</span></span>
<span class="line"><span style="color:#24292e;">给定一个数组arr，只能对arr中的一个子数组排序,</span></span>
<span class="line"><span style="color:#24292e;">但是想让arr整体都有序</span></span>
<span class="line"><span style="color:#24292e;">返回满足这一设定的子数组中，最短的是多长</span></span>
<span class="line"><span style="color:#24292e;">int[] arr = { 1, 2, 4, 7, 10, 11, 7, 12, 6, 7, 16, 18, 19 };</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">左边max</span></span>
<span class="line"><span style="color:#adbac7;">若左边Max &gt; 当前数  错</span></span>
<span class="line"><span style="color:#adbac7;">若左边Max &lt;=当前数  对   </span></span>
<span class="line"><span style="color:#adbac7;">关注最后一个叉，说明后边都是对，叉后面顺序都不用动</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">右边Min</span></span>
<span class="line"><span style="color:#adbac7;">右边min &lt; 当前数 错</span></span>
<span class="line"><span style="color:#adbac7;">同理,前面一部分的数是不用动的</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">左边max</span></span>
<span class="line"><span style="color:#24292e;">若左边Max &gt; 当前数  错</span></span>
<span class="line"><span style="color:#24292e;">若左边Max &lt;=当前数  对   </span></span>
<span class="line"><span style="color:#24292e;">关注最后一个叉，说明后边都是对，叉后面顺序都不用动</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">右边Min</span></span>
<span class="line"><span style="color:#24292e;">右边min &lt; 当前数 错</span></span>
<span class="line"><span style="color:#24292e;">同理,前面一部分的数是不用动的</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getMinLength</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[] arr) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (arr </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> arr.length </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">min</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> arr[arr.length </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">noMinIndex</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> arr.length </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">; i</span><span style="color:#F47067;">--</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (arr[i] </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> min) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				noMinIndex </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> i;</span></span>
<span class="line"><span style="color:#ADBAC7;">			} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">				min </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">min</span><span style="color:#ADBAC7;">(min, arr[i]);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (noMinIndex </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">max</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> arr[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">noMaxIndex</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> arr.length; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (arr[i] </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> max) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				noMaxIndex </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> i;</span></span>
<span class="line"><span style="color:#ADBAC7;">			} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">				max </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">max</span><span style="color:#ADBAC7;">(max, arr[i]);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> noMaxIndex </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> noMinIndex </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMinLength</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arr </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> arr.length </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> min </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[arr.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> noMinIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arr[i] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> min) {</span></span>
<span class="line"><span style="color:#24292E;">				noMinIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">			} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				min </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(min, arr[i]);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (noMinIndex </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> noMaxIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> arr.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arr[i] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> max) {</span></span>
<span class="line"><span style="color:#24292E;">				noMaxIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">			} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(max, arr[i]);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> noMaxIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> noMinIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div>`,12);function u(s,h,b,g,M,v){const o=e,t=C("ClientOnly");return l(),r("div",null,[d,y(t,null,{default:A(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):E("",!0)]}),_:1}),m])}const j=c(F,[["render",u]]);export{_ as __pageData,j as default};
