import{_ as r}from"./chunks/ArticleMetadata.BdeLKEOz.js";import{_ as p,C as k,c as o,o as e,k as n,G as d,P as c,a as g,w as m,b as A,e as u}from"./chunks/framework.CLT-Xekf.js";import"./chunks/md5.CFXlnVHb.js";const v=JSON.parse('{"title":"比较器","description":"","frontmatter":{"title":"比较器","author":"阿源","date":"2023/03/06 12:00","categories":["数据结构与算法"],"tags":["数据结构与算法"]},"headers":[],"relativePath":"courses/algorithm/01-左程云算法基础/06-比较器.md","filePath":"courses/algorithm/01-左程云算法基础/06-比较器.md","lastUpdated":1713341239000}'),y={name:"courses/algorithm/01-左程云算法基础/06-比较器.md"};function D(a,s,C,_,F,B){const l=r,h=k("ClientOnly");return e(),o("div",null,[s[0]||(s[0]=n("h1",{id:"比较器",tabindex:"-1"},[g("比较器 "),n("a",{class:"header-anchor",href:"#比较器","aria-label":'Permalink to "比较器"'},"​")],-1)),d(h,null,{default:m(()=>{var i,t;return[(((i=a.$frontmatter)==null?void 0:i.aside)??!0)&&(((t=a.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(e(),A(l,{key:0,article:a.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),s[1]||(s[1]=c(`<h2 id="_1-比较器" tabindex="-1">1. 比较器 <a class="header-anchor" href="#_1-比较器" aria-label="Permalink to &quot;1. 比较器&quot;">​</a></h2><ul><li>比较器的实质就是重载比较运算符</li><li>比较器可以很好的应用在特殊标准的排序上</li><li>比较器可以很好的应用在根据特殊排序的结构上</li><li>写代码变得异常容易，还用于范型编程</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> EdgeComparator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> Comparator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Edge</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">		public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> compare</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Edge </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">o1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Edge </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">o2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> o1.weight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> o2.weight;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	}</span></span></code></pre></div><h2 id="_2-堆结构" tabindex="-1">2. 堆结构 <a class="header-anchor" href="#_2-堆结构" aria-label="Permalink to &quot;2. 堆结构&quot;">​</a></h2>`,4))])}const $=p(y,[["render",D]]);export{v as __pageData,$ as default};
