import{_ as d}from"./chunks/ArticleMetadata.CQf8Ggee.js";import{_ as h,C as c,c as o,o as t,k as n,G as r,P as A,a as k,w as D,b as C,e as g}from"./chunks/framework.BbsDpi52.js";import"./chunks/md5.CF1HUy9Q.js";const P=JSON.parse('{"title":"ADC","description":"","frontmatter":{"title":"ADC","author":"阿源","date":"2024/02/05 16:30","categories":["MCU"],"tags":["MCU","ADC"]},"headers":[],"relativePath":"courses/mcu/01-单片机基础/06-ADC.md","filePath":"courses/mcu/01-单片机基础/06-ADC.md","lastUpdated":1724058690000}'),u={name:"courses/mcu/01-单片机基础/06-ADC.md"};function y(i,s,m,b,_,B){const p=d,l=c("ClientOnly");return t(),o("div",null,[s[0]||(s[0]=n("h1",{id:"adc",tabindex:"-1"},[k("ADC "),n("a",{class:"header-anchor",href:"#adc","aria-label":'Permalink to "ADC"'},"​")],-1)),r(l,null,{default:D(()=>{var a,e;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((e=i.$frontmatter)==null?void 0:e.showArticleMetadata)??!0)?(t(),C(p,{key:0,article:i.$frontmatter},null,8,["article"])):g("",!0)]}),_:1}),s[1]||(s[1]=A(`<h2 id="_1-adc数模转换器" tabindex="-1">1. ADC数模转换器 <a class="header-anchor" href="#_1-adc数模转换器" aria-label="Permalink to &quot;1. ADC数模转换器&quot;">​</a></h2><p>那对于GPIO来说，它只能读取引脚的高低电平,要么是高电平，要么是低电平，只有两个值，而使用了ADC之后，我们就可以对这个高电平和低电平之间的任意电压进行量化，最终用一个变量来表示，读取这个变量，就可以知道引脚的具体电压到底是多少了。所以<code>ADC其实就是一个电压表，把引脚的电压值测出来，放在一个变量里，这就是ADC的作用</code>。</p><ul><li>ADC（Analog-Digital Converter）<code>模拟-数字转换器</code></li><li>ADC可以将引脚上连续变化的模拟电压转换为内存中存储的数字变量，建立模拟电路到数字电路的桥梁</li><li><code>12位逐次逼近型ADC，1us转换时间</code></li></ul><p>      <strong> 逐次逼近型</strong>这是这个ADC的工作模式。然后12位和1us的转换时间，这里就涉及到ADC的两个关键参数了，第一个是<strong>分辨率</strong>，一般用多少位来表示，12位AD值，它的表示范围就是0-2^12-1，就是量化结果的范围是0~4095。位数越高，量化结果就越精细，对应分辨率就越高；</p><p>第二个是<strong>转换时间</strong>，就是转换频率，AD转换是需要花一小段时间的，这里1us就表示从AD转换开始到产生结果，需要花1us的时间，对应AD转换的频率就是1MHz，这个就是STM32 ADC的最快转换频率。如果你需要转换一个频率非常高的信号，那就要考虑一下这个转换频率是不是够用，如果你的信号频率比较低，那这个最大1MHz的转换频率也完全够用了。</p><ul><li><code>输入电压范围：0~ 3.3V，转换结果范围：0~4095</code></li><li><code>18个输入通道，可测量16个外部和2个内部信号源</code></li></ul><p><strong>外部信号源就是16个GPIO口</strong>，在引脚上直接接模拟信号就行了，不需要任何额外的电路，引脚就直接能测电压。<strong>2个内部信号源是内部温度传感器和内部参考电压</strong>。温度传感器可以测量CPU的温度，比如你电脑可以显示一个CPU温度，就可以用ADC读取这个温度传感器来测量；内部参考电压是一个1.2V左右的基淮电压，这个基准电压是不随外部供电电压变化而变化的，所以如果你芯片的供电不是标准的3.3V，那测量外部引脚的电压可能就不对，这时就可以读取这个基准电压进行校准，这样就能得到正确的电压值了。</p><ul><li><code>规则组和注入组两个转换单元</code></li></ul><p>规则组和注入组两个转换单元，这个就是STM32 ADC的增强功能了。普通的AD转换流程是，启动一次转换、读一次值，然后再启动、再读值，这样的流程。但是STM32的ADC就比较高级，<code>可以列一个组，一次性启动一个组，连续转换多个值</code>。并且有两个组，一个是用于常规使用的规则组，一个是用于突发事件的注入组。</p><ul><li><code>模拟看门狗自动监测输入电压范围</code></li></ul><p>模拟看门狗自动监测输入电压范围，这个ADC，一般可以用于测量光线强度、温度这些值，并且经常会有个需求，就是<strong>如果光线高于某个阈值、低于某个阈值或者温度高于某个阈值、低于某个阈值时，执行一些操作</strong>。这个高于某个阈值、低于某个阈值的判断，就可以用模拟看门狗来自动执行。模拟看门狗可以监测指定的某些通道，<strong>当AD值高于它设定的上阈值或者低于下阈值时，它就会申请中断</strong>，你就可以在中断函数里执行相应的操作，这样你就不用不断地手动读值，再用if进行判断了。</p><ul><li><code>STM32F103C8T6 ADC资源：ADC1、ADC2，10个外部输入通道</code></li></ul><p>**10个外部输入通道，也就是它最多只能测量10个外部引脚的模拟信号。**之前这里说的16个外部信号源,意思是这个系列最多有16个外部信号源，但是我们这个芯片引脚比较少，有很多引脚没有引出来，所以就只有10个外部信号源，如果你想要更多的外部通道，可以选择引脚更多的型号，具体有多少个通道，那还需要再参考—下数据手册了。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>ADC可以将模拟信号转换为数字信号，是模拟电路到数字电路的桥梁。那反过来，有模拟到数字的桥梁，那肯定就有数字到模拟的桥梁。这就是DAC，数字模拟转换器，使用DAC就可以将数字变量转化为模拟电压。</p><p>不过在上一节，我们还学到了一个数字到模拟的桥梁，PWM。上一节我们使用PWM来控制LED的亮度、电机的速度，这就是DAC的功能，同时<strong>PWM只有完全导通和完全断开两种状态</strong>，在这两种状态上都没有功率损耗。</p><p>所以在直流电机调速这种大功率的应用场景，使用PWM来等效模拟量，是比DAC更好的选择，并且PWM电路更加简单，更加常用。所以可以看出PWM还是挤占了DAC的很多应用空间。</p><p>目前DAC的应用主要是在波形生成这些领域，比如信号发生器、音频解码芯片等，这些领域PWM还是不好替代的。</p><h3 id="内部结构" tabindex="-1">内部结构 <a class="header-anchor" href="#内部结构" aria-label="Permalink to &quot;内部结构&quot;">​</a></h3><p>这个图是ADC0809的内部结构图，它是一个独立的8位逐次逼近型ADC芯片。在以前单片机性能不太好的时候，是通过外挂一个ADC芯片才能进行AD转换，这个ADC0809就是一款比较经典的ADC芯片。随着单片机的性能和集成度都有很大的提升，很多单片机内部就已经集成了ADC外设。</p><ul><li>输入选择部分</li></ul><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240207162953.png" alt=""></p><p>首先左边这里INO~IN7，<code>是8路输入通道</code>，通过通道选择开关，选中一路，输入到所标点进行转换。下面这里是<code>地址锁存和译码</code>，就是你想选中哪个通道，就把通道号放在这三个脚（ADD…）上，然后给一个锁存信号(ALU)，上面这里对应的通路开关就可以自动拨好了。这部分就相当于一个可以通过模拟信号的数据选择器。</p><p>因为ADC转换是一个很快的过程，你给个开始信号，过几个us就转换完成了。所以说如果你想转换多路信号，那不必设计多个AD转换器，只需要一个AD转换器，然后加一个多路选择开关，想转换哪一路，就先拨一下开关，选中对应通道，然后再开始转换就行了。</p><p>就是这个输入通道选择的部分，这个ADC0809只有8个输入通道，我们STM32内部的ADC是有18个输入通道的，所以对应输入电路，就是一个18路输入的多路开关</p><ul><li><strong>核心结构</strong></li></ul><p>那然后输入信号选好了，到这里（所标红点）来，怎么才能知道这个电压对应的编码数据是多少呢？这就需要我们用逐次逼近的方法来比较了</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240207163400.png" alt=""></p><p>首先这是一个电压比较器，它可以判断两个输入信号电压的大小关系，输出一个高低电平指示谁大谁小。它的两个输入端，一个是待测的电压，另一个是这里DAC的电压输出端，DAC是数模转换器。我们之前说过了，给它一个数据，它就可以输出数据对应的电压，DAC内部是使用加权电阻网络来实现的转换。</p><p>那现在，我们有了一个<code>外部通道输入的未知编码的电压</code>，和一个<code>DAC输出的已知编码的电压</code>。</p><p>它俩同时输入到电压比较器，进行大小判断，如果DAC输出的电压比较大，我就调小DAC数据；</p><p>如果DAC输出的电压比较小，我就增大DAC数据，直到DAC输出的电压和外部通道输入的电压近似相等 ，这样DAC输入的数据就是外部电压的编码数据了，这就是<code>DAC的实现原理</code>。这个电压调节的过程就是这个<code>逐次逼近SAR</code>来完成的。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>为了最快找到未知电压的编码，通常我们会使用二分法进行寻找。比如这里是8位的ADC，那编码就是从0~255。第一次比较的时候，我们就给DAC输入255的一半，进行比较，那就是128，然后看看谁大谁小，如果DAC电压大了；第二次比较的时候，再就给128的一半，64，如果还大，第三次比较的时候就给32，如果这次DAC电压小了，那第四次就给32到64中间的值，然后继续，这样依次进行下去，就能最快地找到未知电压的编码。并且这个过程，如果你用二进制来表示的话，你会发现，128、64、32这些数据，正好是二进制每一位的位权，这个判断过程就相当于是，对二进制从高位到低位依次判断是1还是0的过程，这就是逐次逼近型名字的来源。那对于8位的ADC，从高位到低位依次判断8次就能找到未知电压的编码了，对于12位的ADC，就需要依次判断12次，这就是逐次逼近的过程。</span></span></code></pre></div><h3 id="stm32-逐次逼近型-adc电路图详解" tabindex="-1">STM32(逐次逼近型)ADC电路图详解 <a class="header-anchor" href="#stm32-逐次逼近型-adc电路图详解" aria-label="Permalink to &quot;STM32(逐次逼近型)ADC电路图详解&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240207190713.png" alt=""></p><p>在这里，<code>左边是ADC的输入通道</code>，包括16个GPIO口，INO~IN15和两个内部的通道(一个是内部温度传感器，另—个是VREFINT(V Referencelnternal)内部参考电压)。</p><p>总共是18个输入通道，然后到达这里，这是一个<code>模拟多路开关</code>，可以指定我们想要选择的通道。<code>右边是多路开关的输出，进入到模数转换器</code>，(这里模数转换器就是执行的我们刚才讲过的逐次比较的过程)，转换结果会直接放在这个数据寄存器里，我们读取寄存器就能知道ADC转换的结果了。</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240207190902.png" alt=""></p><p>然后在模拟多路开关输出，<code>对于普通的ADC</code>，多路开关一般都是只选中一个的，就是选中某一个通道、开始转换、等待转换完成进取出结果，这是普通的流程。</p><p>但是STM32这里就比较高级了，它<code>可以同时选中多个</code>，而且在转换的时候还分成了两个组：<code>规则通道组和注入通道组</code>。其中<code>规则组可以一次性最多选中16个通道</code>，<code>注入组最多可以选中4个通道</code>。</p><p>举个例子，这就像是你去餐厅点菜，<code>普通的ADC是，你指定一个菜，老板给你做，然后做好了送给你</code>；这里就是，你指定一个菜单，这个菜单最多可以填16个菜，然后你直接递个菜单给老板，老板就按照菜单的顺序依次做好，一次性给你端上菜，这样的话就可以大大提高效率。当然，你的菜单也可以只写一个菜，这样这个菜单就简化成了普通的模式了。</p><p>那对于这个菜单呢，也有两种，一种是<code>规则组菜单，可以同时上16个菜</code>，但是它有个尴尬的地方。就是这个规则组<code>只有一个数据寄存器</code>，就是这个桌子比较小，<code>最多只能放一个菜</code>，你如果上16个菜，那不好意思，前15个菜都会被挤掉些，你只能得到第16个菜。</p><p>所以<code>对于规则组转换来说</code>，如果使用这个菜单的话，<code>最好配合DMA来实现</code>。DMA是一个数据转运小帮手，它可以在每上一个菜之后，<code>把这个菜挪到其他地方去，防止被覆盖</code>。这个DMA我们下一节就会讲，现在先大概了解一下，那现在我们就知道了，这个规则组虽然可以同时转换16个通道，但是数据寄存器只能存一个结果，如果不想之前的结果被覆盖，那在转换完成之后，就要尽快把结果拿走。</p><p>接着我们看一下注入组，这个组就比较高级了，它相当于是餐厅的VIP座位，在这个座位上，一次性最多可以点4个菜，并且这里数据寄存器有4个，是可以同时上4个菜的。对于注入组而言，就不用担心数据覆盖的问题了，这就是规则组和注入组的介绍。</p><p>一般情况下，我们使用规则组就完全足够了，如果要使用规则组的菜单，那就再配合DMA转运数据，这样就不用担心数据覆盖的问题了。所以接下来就只讲规则组的操作，注入组涉及的不多，大家可以看手册自行了解。</p><p>那我们接着继续看这个模数转换器外围的一些线路</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240817201121.png" alt=""></p><p>首先，<code>左下角这里是触发转换的部分</code>，也就是这里的START信号，开始转换。那对于STM32的ADC，触发ADC开始转换的信号有两种，一种是<code>软件触发</code>，就是你在程序中手动调用一条代码，就可以启动转换了；另一种是<code>硬件触发</code>，就是这里的这些触发源。</p><p>上面这些是<code>注入组的触发源</code>，下面这些是<code>规则组的触发源</code>，这些触发源主要是来自于定时器，有定时器的各个通道，还有<code>TRGO定时器主模式的输出</code>，这个之前讲定时器的时候也介绍过。定时器可以通向ADC、 DAC这些外设，用于触发转换。</p><p>那因为<code>ADC经常需要过一个固定时间段转换一次</code>。比如每隔1ms转换一次，正常的思路就是，用定时器，每隔1ms申请一次中断，在中断里手动开始一次转换，这样也是可以的。但是频繁进中断对我们的程序是有一定影响的，比如你有很多中断都需要频繁进入，那肯定会影响主程序的执行，并且不同中断之间，由于优先级的不同，也会导致某些中断不能及时得到响应。</p><p>如果触发ADC的中断不能及时响应，那我们ADC的转换频率就肯定会产生影响了。<code>所以对于这种需要频繁进中断，并且在中断里只完成了简单工作的情况，一般都会有硬件的支持</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240817202045.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240817202411.png" alt=""></p><p>然后接着看，<code>左上角这里是VREF+、VREF-、VDDA和VSSA</code>。上面两个是ADC的参考电压，决定了ADC输入电压的范围；下面两个是ADC的供电引脚。</p><p>一般情况下，<code>VREF+要接VDDA，VREF-要接VSSA</code>，在我们这个芯片上，没有VREF+和VREF-的引脚，它在内部就已经和VDDA和VSSA接在一起了。<code>VDDA和VSSA是内部模拟部分的电源</code>，比如ADC、RC振荡器、锁相环等。在这里<code>VDDA接3.3V, VSSA接GND</code>，所以<code>ADC的输入电压范围就是0~3.3V</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>在电子和电路设计中，VREF+、VREF-、VDDA 和 VSSA 是常见的电源和参考电压信号。它们的含义如下：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>VREF+：正参考电压，通常用于提供一个稳定的正电压基准，供模拟电路或ADC（模数转换器）使用。</span></span>
<span class="line"><span>VREF-：负参考电压，通常用于提供一个稳定的负电压基准，可能在一些需要双极性电源的电路中使用。</span></span>
<span class="line"><span>VDDA：模拟电源电压，通常为模拟电路提供电源，确保模拟电路的正常工作。</span></span>
<span class="line"><span>VSSA：模拟地，通常是模拟电路的接地参考点，与VDDA配合使用。</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240817202556.png" alt=""></p><p>然后继续看，右边这里是<code>ADCCLK是ADC的时钟</code>，也就是这里的CLOCK，是用于<code>驱动内部逐次比较的时钟</code>。这个ADCCLK是来自ADC预分频器，而ADC预分频器是来源于RCC的。</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240817202813.png" alt=""></p><p>APB2时钟72MHZ，然后通过ADC预分频器进行分频，得到ADCCLK，<code>ADCCLK最大是14MHZ</code>，所以这个预分频器就有点尴尬。它可以选择2、4、6、8分频，如果选择2分频，72M/2=36M，超出允许范围了；4分频之后是18M，也超了，<code>所以对于ADC预分频器只能选择6分频</code>，结果是12M和<code>8分频</code>，结果是9M，这两个值。这个在程序里要注意一下。</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240817203205.png" alt=""></p><p>继续看上面这里是<code>DMA请求</code>，这个就是用于<code>触发DMA进行数据转运</code>的，我们下节再讲。</p><p>上面这里，还有<code>模拟看门狗</code>，它里面可以存一个阈值高限和阈值低限。如果启动了模拟着门狗，并指定了看门的通道，那这个看门狗就会关注它看门的通道，<code>一但超过这个阈值范围了，它就会乱叫</code>，就会在上面，申请一个模拟看门狗的中断，最后通向NVIC。</p><p><code>然后是两个数据寄存器，用于存放转换结果的</code>。</p><p>然后对于<code>规则组和注入组而言</code>呢，它们转换完成之后，也会有一个<code>EOC转换完成的信号</code>。</p><p>在这里，<code>EOC是规则组的完成信号</code>，<code>JEOC是注入组完成的信号</code>。这两个信号会在状态寄存器里置一个标志位，我们读取这个标志位，就能知道是不是转换结束了，同时这两个标志位也可以去到NVIC，申请中断。如果开启了NVIC对应的通道，它们就会<code>触发中断</code>。</p><h2 id="_2-adc基本结构" tabindex="-1">2. ADC基本结构 <a class="header-anchor" href="#_2-adc基本结构" aria-label="Permalink to &quot;2. ADC基本结构&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240207191622.png" alt=""></p><p>左边是输入通道，<code>16个GPIO口，外加两个内部的通道</code>，然后进入AD转换器。AD转换器里有两个组，一个是规则组，一个是注入组，<code>规则组最多可以选中16个通道</code>，<code>注入组最多可以选择4个通道</code>。然后转换的结果可以存放在AD数据寄存器里，其中<code>规则组只有1个数据寄存器，注入组有4个</code>。</p><p>然后下面这里有触发控制，提供了开始转换这个START信号，触发控制可以选择<code>软件触发和硬件触发</code>。硬件触发主要是来自于<code>定时器</code>，当然也可以选择<code>外部中断的引脚</code>，右边这里是来自于RCC的ADC时钟CLOCK，ADC逐次比较的过程就是由这个时钟推动的。</p><p>然后上面，可以布置一个<code>模拟看门狗用于监测转换结果的范围</code>，如果超出设定的阈值，就通过中断输出控制，向NVIC申请中断，另外，规则组和注入组转换完成后<code>会有个EOC信号</code>，它会置一个标志位，当然也可以通向NVIC。最后右下角这里还有个<code>开关控制</code>，在库函数中，就是ADC_Cmd函数，<code>用于给ADC上电的</code>，那这些，就是STM32 ADC的内部结构了。</p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240207191958.png" style="zoom:45%;"><p>ADC1和ADC2的引脚全都是相同的，既然都相同，那要ADC2还有啥用呢。这个就要再说一个<code>ADC的高级功能了，就是双ADC模式</code>，这个模式比较复杂。这里只简单介绍一下，不需要掌握。双ADC模式就是ADC1和ADC2一起工作，它俩可以配合<code>组成同步模式、交叉模式等等模式</code>。比如交叉模式，ADC1和ADC2交叉地对一个通道进行采样，这样就可以进一步提高采样率。</p><h3 id="_2-1-规则组的4种转换模式" tabindex="-1">2.1 规则组的4种转换模式 <a class="header-anchor" href="#_2-1-规则组的4种转换模式" aria-label="Permalink to &quot;2.1 规则组的4种转换模式&quot;">​</a></h3><p>接下来，我们再来了解一下规则组的4种转换模式，分别是<code>单次转换，非扫描模式和连续转换，扫描模式</code>。</p><p>那在我们<code>ADC初始化的结构体里，会有两个参数</code>，一个是选择单次转换还是连续转换的，另一个是选择扫描模式还是非扫描模式的，这两个参数组合起来，就有这4种转换方式。我们来逐一看一下。</p><h4 id="单次转换-非扫描模式" tabindex="-1">单次转换 <strong>非扫描模式</strong> <a class="header-anchor" href="#单次转换-非扫描模式" aria-label="Permalink to &quot;单次转换  **非扫描模式**&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240207193119.png" alt=""></p><p>第一种，<code>单次转换，非扫描模式</code>，这里我画了一个列表，这个表就是规则组里的菜单，有16个空位，分别是序列1到序列16，你可以在这里“点菜”，就是写入你要转换的通道，在<code>非扫描的模式</code>下，这个菜单就只有<code>第一个序列1的位置有效</code>，这时，菜单同时选中一组的方式就退化为简单地选中一个的方式了。</p><p>在这里我们可以在<code>序列1的位置指定我们想转换的通道</code>，比如通道2，写到这个位置。然后，我们就可以触发转换，ADC就会对这个通道2进行模数转换，过一小段时间后，转换完成，转换结果放在数据寄存器里，同时给EOC标志位置1，整个转换过程就结束了。</p><p>我们判断这个EOC标志位，如果转换完了， 那我们就可以在数据寄存器里读取结果了。如果我们想再启动一次转换，那就需要再触发一次，转换结束，置EOC标志位，读结果。如果想换一个通道转换，那在转换之前，把第一个位置的通道2改成其他通道，然后再启动转换，这样就行了。这就是单次转换，非扫描的转换模式。没有用到这个菜单列表，也是比较简单的一种模式。</p><h4 id="连续转换-非扫描模式" tabindex="-1">连续转换 <strong>非扫描模式</strong> <a class="header-anchor" href="#连续转换-非扫描模式" aria-label="Permalink to &quot;连续转换  **非扫描模式**&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240207193427.png" alt=""></p><p>接下来我们看一下<code>连续转换，非扫描模式</code>。首先，它还是<code>非扫描模式</code>，所以<code>菜单列表就只用第一个</code>，然后它与上一种单次转换不同的是，它在<code>一次转换结束后不会停止</code>，而是立刻开始下一轮的转换，然后一直持续下去。</p><p>这样就只需要最开始触发一次，之后就可以一直转换了。这个模式的好处就是，开始转换之后不需要等待一段时间的，因为它直都在转换，所以你就不需要手动开始转换了，也不用判断是否结束的，<code>想要读AD值的时候，直接从数据寄存器取就是了</code>。这就是连续转换，非扫描的模式。</p><h4 id="单次转换-扫描模式" tabindex="-1"><strong>单次转换</strong> <strong>扫描模式</strong> <a class="header-anchor" href="#单次转换-扫描模式" aria-label="Permalink to &quot;**单次转换**  **扫描模式**&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240817204824.png" alt=""></p><p>然后继续看，单次转换，扫描模式。这个模式也是<code>单次转换</code>，所以<code>每触发一次，转换结束后，就会停下来</code>，下次转换就得再触发才能开始。然后它是扫描模式，这就会用到这个菜单列表了，你可以在这个菜单里点菜，比如第一个菜是通道2，第二个菜是通道5，等等等等，这里<code>每个位置是通道几可以任意指定</code>，并且也是可以重复的，然后初始化结构体里还会有个参数，就是通道数目。</p><p>因为这16个位置你可以不用完，只用前几个，那你就需要再给一个通道数目的参数，告诉它，我有几个通道。比如这里<code>指定通道数目为7</code>，那它就只看前7个位置，<code>然后每次触发之后，它就依次对这前7个位置进行AD转换</code>，转换结果都放在数据寄存器里，<code>这里为了防止数据被覆盖，就需要用DMA及时将数据挪走</code>。<code>那7个通道转换完成之后，产生EOC信号，转换结束</code>，然后再触发下一次，就又开始新一轮的转换，这就是单次转换，扫描模式的工作流程。</p><h4 id="连续转换-扫描模式" tabindex="-1"><strong>连续转换 扫描模式</strong> <a class="header-anchor" href="#连续转换-扫描模式" aria-label="Permalink to &quot;**连续转换  扫描模式**&quot;">​</a></h4><p>那最后再看一下连续转换，扫描模式。它就是在上一个模式的基础上，变了一点，就是一次转换完成后，立刻开始下一次的转换。和上面这里非扫描模式的单次和连续是一个套路，这就是连续转换，扫描模式。</p><p>当然在扫描模式的情况下，还可以有一种模式，叫<code>间断模式</code>。它的作用是，<code>在扫描的过程中，每隔几个转换，就暂停一次，需要再次触发</code>，才能继续。这个模式没有列出来，要不然模式太多了。大家了解一下就可以了，暂时不需要掌握，好，这些就是STM32 ADC的4种转换模式。</p><h3 id="_2-2-额外知识点" tabindex="-1">2.2 额外知识点 <a class="header-anchor" href="#_2-2-额外知识点" aria-label="Permalink to &quot;2.2 额外知识点&quot;">​</a></h3><h4 id="_2-2-1-触发控制" tabindex="-1">2.2.1 触发控制 <a class="header-anchor" href="#_2-2-1-触发控制" aria-label="Permalink to &quot;2.2.1 触发控制&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240208150235.png" alt=""></p><p>这个表就是规则组的触发源，也就是ADC总框图中的ADC。在这个表里，有来自定时器的信号；还有这个来自引脚或定时器的信号，这个具体是引脚还是定时器，需要用AFIO重映射来确定；最后是软件控制位，也就是我们之前说的软件触发。</p><p>这些触发信号怎么选择，可以通过<code>设置右边这个寄存器来完成</code>，当然使用库函数的话，直接给一个参数就行了，这就是<code>触发控制</code>。</p><h4 id="_2-2-2-数据对齐" tabindex="-1">2.2.2 数据对齐 <a class="header-anchor" href="#_2-2-2-数据对齐" aria-label="Permalink to &quot;2.2.2 数据对齐&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240208150440.png" alt=""></p><p>我们这个<strong>ADC是12位的，它的转换结果就是一个12位的数据</strong>，但是这个<strong>数据寄存器是16位的</strong>，所以就存在一个数据对齐的问题。这里第一种是数据右对齐，就是12位的数据向右靠，<code>高位多出来的几位就补0</code>；第二种是数据左对齐，是12位的数据向左靠，<code>低位多出来的几位补0</code>。在这里我们一般使用的都是第一种右对齐，这样读取这个16位寄存器，直接就是转换结果。</p><p><strong>如果选择左对齐，直接读的话，得到的数据会比实际的大</strong>，因为数据左对齐实际上就是把数据左移了4次。二进制有个特点，就是数据左移一次，就等效于把这个数据乘2，那这里左移4次，就相当于把结果乘16了，所以直接读的话会比实际值大16倍。</p><p>那要这个左对齐有啥用呢?这个用途就是，如果你不想要这么高的分辨率，你觉得0~4095数太大了，我就做个简单的判断，<code>不需要这么高分辨率，那你就可以选择左对齐</code>，然后再把这个数据的高8位取出来，这样就舍弃掉了后面4位的精度，<code>这个12位的ADC就退化成了8位的ADC了，这就是左对齐的作用</code>。</p><p>不过我们一般用的话，选右对齐就行了，如果需要裁剪一些分辨率，大不了就先把12位都取出来，再做处理。</p><h4 id="_2-2-3-转换时间" tabindex="-1">2.2.3 转换时间 <a class="header-anchor" href="#_2-2-3-转换时间" aria-label="Permalink to &quot;2.2.3 转换时间&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240208150826.png" alt=""></p><p>这个大概讲一下，不过转换时间这个参数，我们一般不太敏感，因为一般AD转换都很快，如果不需要非常高速的转换频率，那转换时间就可以忽略了。</p><p>我们来看一下，之前我们说了，AD转换是需要一小段时间的，就像厨子做菜一样，也是需要等一会儿才能上菜的，那AD转换的时候都有哪些步骤需要花时间呢？AD转换的步骤，有4步，分别是<code>采样，保持，量化，编码</code>，其中<code>采样保持可以放在一起，量化编码可以放在一起</code>，总共是这两大步。<code>量化编码</code>好理解，就是我们之前讲过的，<code>ADC逐次比较的过程</code>，这个是要花一段时间的，一般位数越多，花的时间就越长。</p><p>那采样保持是干啥的呢？这个我们前面这里并没有涉及，为什么需要采样保持呢？这是因为，我们的AD转换，就是后面的量化编码，是需要一小段时间的，如果在这一小段时间里，<code>输入的电压还在不断变化，那就没法定位输入电压到底在哪了</code>，所以在量化编码之前，我们需要设置一个采样开关。</p><p>先打开采样开关，收集一下外部的电压，比如可以用一个小容量的电容存储一下这个电压，存储好了之后，断开采样开关，再进行后面的AD转换。这样在量化编码的期间，电压始终保持不变，这样才能精确地定位未知电压的位置，这就是<code>采样保持电路</code>。</p><p>那采样保持的过程，需要闭合采样开关，过一段时间再断开，这里就会产生一个采样时间。那回到这里，我们就得到了第二条，STM32 ADC的总转换时间为TCONV=采样时间+12.5个ADC周期，采样时间是采样保持花费的时间，这个可以在程序中进行配置，采样时间越大，越能避兔一些毛刺信号的干扰，不过转换时间也会相应延长。<code>12.5个ADC周期是量化编码花费的时间</code>，因为是12位的ADC，所以需要花费12个周期，这里多了半个周期，可能是做其他一些东西花的时间。<code>ADC周期就是从RCC分频过来的ADCCLK，这个ADCCLK最大是14MHz</code>。</p><p>所以下面有个例子，这里就是最快的转换时间，当ADCCLK=14MHz，采样时间为1.5个ADC周期，TCONV = 1.5 +12.5 = 14个ADC周期，在14MHz ADCCLK的情况下就 = 1us，这就是转化时间最快1us时间的来源。如果你采样周期再长些，它就达不到1us了；另外你也可以把ADCCLK的时钟设置超过14MHz，这样的话ADC就是在超频了，那转换时间可以比1us还短，不过这样稳定性就没法保证了。</p><h4 id="_2-2-4-校准" tabindex="-1">2.2.4 校准 <a class="header-anchor" href="#_2-2-4-校准" aria-label="Permalink to &quot;2.2.4 校准&quot;">​</a></h4><ul><li>ADC有一个<strong>内置自校准模式</strong>。校准可大幅减小因内部电容器组的变化而造成的准精度误差。校准期间，在每个电容器上都会计算出一个误差修正码(数字值)，这个码用于消除在随后的转换中每个电容器上产生的误差</li><li>建议在每次上电后执行一次校准</li><li>启动校准前， ADC必须处于关电状态超过至少两个ADC时钟周期</li></ul><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240819171052.png" alt=""></p><p>第一个是一个电位器产生一个可调的电压，这里电位器的两个因定端，一端接3.3V，另一端接GND，这样中间的滑动端就可以辅出一个0~3.3V可调的电压输出了，我们这里可以接ADC的输入通道，比如PA0口，当滑动端往上滑时，电压增大，往下滑时，电压减小。</p><p>另外注意一下这个<strong>电阻的阻值不要给太小</strong>，因为这个电阻两流也是直接跨接在电源正负极的，如果阻值太小,那这个电阻就会比较费电，再小就有可能发热冒烟了，一般至少要接K欧级的电阻。比如这里接的是10K的电阻，这是电位器产生可调电压的电器。</p><p>然后中间是传感器输出电压的电路，一般来说，像光敏电阻、热敏电阻、红外接收管、麦克风等等，都可以等效为一个可变电阻(N1)，那电阻值没法直接测量，所以这里就可以通过和一个固定电阻串联分压，来得到一个反应电阻值电压的电路。</p><p>那这里，传感器阻值变小时，下拉作用变强，输出电压就下降：传感器阻值变大时，下拉作用变弱，输出端受上拉电阻的作用，电压就会升高。这个固定电阻一般可以选择和传感器阻值相近的电阻，这样可以得到一个位于中间电压区域比较好的输出。</p><p>当然这里传感器和固定电阻的位置也可以换过来，这样的话，输出电压的极性就反过来了，这就是这个分压方法来输出传感器阻值的电路。</p><p>我们看一下最后这个电路，这是一个简单的电压转换电路，比如你想测一个0-5V的VIN电压，但是ADC只能接收0-3.3V的电压，那就可以搭建—个这样的简易转换电路。</p><p>在这里还是使用电阻进行分压，上面阻值17K，下向阻值33K，加一起是50K，所以根据分压公式，中间的电压就是VIN/50K×33K，最后得到的电压范国就是0~3.3V，就可以进入ADC转换了。</p><h3 id="_2-3-代码实战" tabindex="-1">2.3 代码实战 <a class="header-anchor" href="#_2-3-代码实战" aria-label="Permalink to &quot;2.3 代码实战&quot;">​</a></h3><p>程序现象：在面包板的中间，也就是芯片左边接了一个电位器，就是滑动变阻器。用这个电位器产生一个0~3.3V连续变化的模拟电压信号。然后接到STM32的PA0口上，之后用STM32内部的ADC读取电压数据，显示在屏幕上。</p><p>这里屏幕第一行显示的是<strong>AD转换后的原始数据</strong>，第二行是<strong>经过处理后实际的电压值</strong>。电位器往左拧，<strong>AD值减小，电压值也减小</strong>，AD值最小是0，对应的电压就是0V；反之同理STM32的ADC是12位的，所<strong>以AD结果最大值是4095，也就是2^12-1，对应的电压是3.3V</strong>。</p><ul><li>第一步：开启RCC时钟，包括ADC和GPIO的时钟，另外这里ADCCLK的分频器，也需要配置一下</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/*开启时钟*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">RCC_APB2PeriphClockCmd</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(RCC_APB2Periph_ADC1, ENABLE);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//开启ADC1的时钟</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">RCC_APB2PeriphClockCmd</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(RCC_APB2Periph_GPIOA, ENABLE);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//开启GPIOA的时钟</span></span></code></pre></div><ul><li>第二步，配置GPIO。把需要用的GPIO配置成模拟输入的模式</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/*设置ADC时钟*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">RCC_ADCCLKConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(RCC_PCLK2_Div6);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		//选择时钟6分频，ADCCLK = 72MHz / 6 = 12MHz</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/*GPIO初始化*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">GPIO_InitTypeDef GPIO_InitStructure;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">GPIO_InitStructure.GPIO_Mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> GPIO_Mode_AIN;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">GPIO_InitStructure.GPIO_Pin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> GPIO_Pin_0;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">GPIO_InitStructure.GPIO_Speed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> GPIO_Speed_50MHz;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">GPIO_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(GPIOA, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">GPIO_InitStructure</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">					//将PA0引脚初始化为模拟输入</span></span></code></pre></div><ul><li>第三步，配置这里的多路开关。把左边的通道接入到右边的规则组列表里。这个过程就是我们之前说的点菜，把各个通道的菜，列在菜单里</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/*规则组通道配置*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ADC_RegularChannelConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ADC1, ADC_Channel_0, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, ADC_SampleTime_55Cycles5);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">		//规则组序列1的位置，配置为通道0</span></span></code></pre></div><ul><li>第四步，就是配置ADC转换器了。在库函数里，是用结构体来配置的，可以配置这一大块电路的参数。包括ADC是单次转换还是连续转换、扫描还是非扫描、有几个通道，触发源是什么，数据对齐是左对齐还是右对齐。</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/*ADC初始化*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ADC_InitTypeDef ADC_InitStructure;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">					//定义结构体变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ADC_InitStructure.ADC_Mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ADC_Mode_Independent;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//模式，选择独立模式，即单独使用ADC1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ADC_InitStructure.ADC_DataAlign </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ADC_DataAlign_Right;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//数据对齐，选择右对齐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ADC_InitStructure.ADC_ExternalTrigConv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ADC_ExternalTrigConv_None;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//外部触发，使用软件触发，不需要外部触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ADC_InitStructure.ADC_ContinuousConvMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DISABLE;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//连续转换，失能，每转换一次规则组序列后停止</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ADC_InitStructure.ADC_ScanConvMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> DISABLE;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//扫描模式，失能，只转换规则组的序列1这一个位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ADC_InitStructure.ADC_NbrOfChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">			//通道数，为1，仅在扫描模式下，才需要指定大于1的数，在非扫描模式下，只能是1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ADC_Init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ADC1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">ADC_InitStructure</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">				//将结构体变量交给ADC_Init，配置ADC1</span></span></code></pre></div><p>如果你需要模拟看门狗，那会有几个函数用来配置阈值和监测通道的。如果你想开启中断，那就在中断输出控制里用ITConfig函数开启对应的中断输出，然后再在NVIC里，配置一下优先级，这样就能触发中断了。不过这一块，模拟看门狗和中断，我们本节暂时不用，如果你需要的话，可以自己配置试一下。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/*ADC使能*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ADC_Cmd</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ADC1, ENABLE);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">									//使能ADC1，ADC开始运行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/*ADC校准*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ADC_ResetCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ADC1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">						//固定流程，内部有电路会自动执行校准</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ADC_GetResetCalibrationStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ADC1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SET);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ADC_StartCalibration</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ADC1);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ADC_GetCalibrationStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ADC1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SET);</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  * 函    数：获取AD转换的值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  * 参    数：无</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  * 返 回 值：AD转换的值，范围：0~4095</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">uint16_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> AD_GetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">	ADC_SoftwareStartConvCmd</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ADC1, ENABLE);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">					//软件触发AD转换一次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ADC_GetFlagStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ADC1, ADC_FLAG_EOC) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> RESET);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	//等待EOC标志位，即等待AD转换结束</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">	return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ADC_GetConversionValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ADC1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">			//读数据寄存器，得到AD转换的结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div>`,135))])}const I=h(u,[["render",y]]);export{P as __pageData,I as default};
