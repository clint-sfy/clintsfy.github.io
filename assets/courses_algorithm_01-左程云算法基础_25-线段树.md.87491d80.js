import{_ as e}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as c,v as l,b as r,t as y,O as A,F as p,L as D,R as C,M as i,C as B,B as E}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const q=JSON.parse('{"title":"线段树","description":"","frontmatter":{"title":"线段树","author":"阿源","date":"2023/03/25 12:00","categories":["数据结构与算法"],"tags":["数据结构与算法","线段树"]},"headers":[],"relativePath":"courses/algorithm/01-左程云算法基础/25-线段树.md","filePath":"courses/algorithm/01-左程云算法基础/25-线段树.md","lastUpdated":1691397650000}'),F={name:"courses/algorithm/01-左程云算法基础/25-线段树.md"},d=p("h1",{id:"线段树",tabindex:"-1"},[D("线段树 "),p("a",{class:"header-anchor",href:"#线段树","aria-label":'Permalink to "线段树"'},"​")],-1),u=C(`<h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>add(1,200,6) 范围上的增加 需要懒更新 lazy[]</p><p>apdate() 范围上的更新 需要update[] 和 change[]</p><p>query() 范围上的查询</p><p>​ [1 2 3 4]</p><p>​ 1-4累加和</p><pre><code> 1-2累加和    3-4累计和

 1-1  2-2     3-3  4-4
</code></pre><p>累加和为一个数组，如果原数组数量为N，该数组4*N就够了</p><h2 id="核心代码" tabindex="-1">核心代码 <a class="header-anchor" href="#核心代码" aria-label="Permalink to &quot;核心代码&quot;">​</a></h2><h3 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// arr[]为原序列的信息从0开始，但在arr里是从1开始的</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// sum[]模拟线段树维护区间和</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// lazy[]为累加和懒惰标记</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// change[]为更新的值</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// update[]为更新慵懒标记</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">MAXN;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">arr;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">sum;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">lazy;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">change;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">update;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SegmentTree</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[] origin) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			MAXN </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> origin.length </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			arr </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[MAXN]; </span><span style="color:#768390;">// arr[0] 不用 从1开始使用</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 原始数组的0位置不用</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> MAXN; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				arr[i] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> origin[i </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			sum </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[MAXN </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">]; </span><span style="color:#768390;">// 用来支持脑补概念中，某一个范围的累加和信息</span></span>
<span class="line"><span style="color:#ADBAC7;">			lazy </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[MAXN </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">]; </span><span style="color:#768390;">// 用来支持脑补概念中，某一个范围沒有往下傳遞的纍加任務</span></span>
<span class="line"><span style="color:#ADBAC7;">			change </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[MAXN </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">]; </span><span style="color:#768390;">// 用来支持脑补概念中，某一个范围有没有更新操作的任务</span></span>
<span class="line"><span style="color:#ADBAC7;">			update </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;">[MAXN </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">]; </span><span style="color:#768390;">// 用来支持脑补概念中，某一个范围更新任务，更新成了什么</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// arr[]为原序列的信息从0开始，但在arr里是从1开始的</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// sum[]模拟线段树维护区间和</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// lazy[]为累加和懒惰标记</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// change[]为更新的值</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// update[]为更新慵懒标记</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> MAXN;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] sum;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] lazy;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] change;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">[] update;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SegmentTree</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] origin) {</span></span>
<span class="line"><span style="color:#24292E;">			MAXN </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> origin.length </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[MAXN]; </span><span style="color:#6A737D;">// arr[0] 不用 从1开始使用</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 原始数组的0位置不用</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> MAXN; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				arr[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> origin[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[MAXN </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 用来支持脑补概念中，某一个范围的累加和信息</span></span>
<span class="line"><span style="color:#24292E;">			lazy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[MAXN </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 用来支持脑补概念中，某一个范围沒有往下傳遞的纍加任務</span></span>
<span class="line"><span style="color:#24292E;">			change </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[MAXN </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 用来支持脑补概念中，某一个范围有没有更新操作的任务</span></span>
<span class="line"><span style="color:#24292E;">			update </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">[MAXN </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 用来支持脑补概念中，某一个范围更新任务，更新成了什么</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">pushUp</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> rt) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 本位置累加和等于 左孩子和右孩子的和</span></span>
<span class="line"><span style="color:#ADBAC7;">			sum[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> sum[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> sum[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pushUp</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rt) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 本位置累加和等于 左孩子和右孩子的和</span></span>
<span class="line"><span style="color:#24292E;">			sum[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sum[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sum[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 在初始化阶段，先把sum数组，填好</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// 在arr[l~r]范围上，去build，1~N，</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// rt : 这个范围在sum中的下标</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// build(1 , N , 1) 根节点的位置是1 不过需要左孩子和右孩子的值</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">build</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> l, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> r, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> rt) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (l </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> r) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				sum[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> arr[l];</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 左右不等  可以算出左孩子和右孩子</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mid</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> r) </span><span style="color:#F47067;">&gt;&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">build</span><span style="color:#ADBAC7;">(l, mid, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);    </span><span style="color:#768390;">//（1 , n/2 , 2）</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">build</span><span style="color:#ADBAC7;">(mid </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span><span style="color:#768390;">// (n/2 , n , 3)</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pushUp</span><span style="color:#ADBAC7;">(rt);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在初始化阶段，先把sum数组，填好</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 在arr[l~r]范围上，去build，1~N，</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// rt : 这个范围在sum中的下标</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// build(1 , N , 1) 根节点的位置是1 不过需要左孩子和右孩子的值</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> l, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rt) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> r) {</span></span>
<span class="line"><span style="color:#24292E;">				sum[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[l];</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 左右不等  可以算出左孩子和右孩子</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> r) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(l, mid, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">//（1 , n/2 , 2）</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(mid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">// (n/2 , n , 3)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pushUp</span><span style="color:#24292E;">(rt);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span></code></pre></div><h3 id="add" tabindex="-1">add <a class="header-anchor" href="#add" aria-label="Permalink to &quot;add&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 之前的，所有懒增加，和懒更新，从父范围，发给左右两个子范围</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// 分发策略是什么</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// rt 父节点的下标 ln表示左子树元素结点个数，rn表示右子树结点个数</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">pushDown</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> rt, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> ln, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> rn) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (update[rt]) {  </span><span style="color:#768390;">// 父节点更新信息为true</span></span>
<span class="line"><span style="color:#ADBAC7;">				update[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				update[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				change[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> change[rt];</span></span>
<span class="line"><span style="color:#ADBAC7;">				change[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> change[rt];</span></span>
<span class="line"><span style="color:#ADBAC7;">				lazy[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;     </span><span style="color:#768390;">// 懒信息失效</span></span>
<span class="line"><span style="color:#ADBAC7;">				lazy[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				sum[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> change[rt] </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> ln;  </span><span style="color:#768390;">// 累加和全部重设</span></span>
<span class="line"><span style="color:#ADBAC7;">				sum[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> change[rt] </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> rn;</span></span>
<span class="line"><span style="color:#ADBAC7;">				update[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">;  </span><span style="color:#768390;">// 父节点更新状态恢复</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (lazy[rt] </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;">// 只修改一层  左右孩子可能留着上次的懒信息</span></span>
<span class="line"><span style="color:#ADBAC7;">				lazy[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> lazy[rt];</span></span>
<span class="line"><span style="color:#ADBAC7;">				sum[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> lazy[rt] </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> ln;</span></span>
<span class="line"><span style="color:#ADBAC7;">				lazy[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> lazy[rt];</span></span>
<span class="line"><span style="color:#ADBAC7;">				sum[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> lazy[rt] </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> rn;</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;">// 给左右孩子发送后 变为0</span></span>
<span class="line"><span style="color:#ADBAC7;">				lazy[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// L~R, C 任务！（大范围 题目要求）</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// rt 父节点的下表，l~r 小范围</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> L, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> R, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> C, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> l, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> r, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> rt) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// 任务如果把此时的范围全包了！  </span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (L </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> r </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> R) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				sum[rt] </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> C </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> (r </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);  </span><span style="color:#768390;">// 这个范围都加C 累加和*C</span></span>
<span class="line"><span style="color:#ADBAC7;">				lazy[rt] </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> C;   </span><span style="color:#768390;">// 全包需要懒更新</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// 任务没有把你全包！</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// l  r  mid = (l+r)/2</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mid</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> r) </span><span style="color:#F47067;">&gt;&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pushDown</span><span style="color:#ADBAC7;">(rt, mid </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> mid); </span><span style="color:#768390;">// 需要把上一次的懒更新弄了</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// L~R 懒更新只更新一层</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (L </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> mid) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(L, R, C, l, mid, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (R </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> mid) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(L, R, C, mid </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pushUp</span><span style="color:#ADBAC7;">(rt);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 之前的，所有懒增加，和懒更新，从父范围，发给左右两个子范围</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 分发策略是什么</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// rt 父节点的下标 ln表示左子树元素结点个数，rn表示右子树结点个数</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pushDown</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rt, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ln, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rn) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (update[rt]) {  </span><span style="color:#6A737D;">// 父节点更新信息为true</span></span>
<span class="line"><span style="color:#24292E;">				update[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				update[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				change[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> change[rt];</span></span>
<span class="line"><span style="color:#24292E;">				change[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> change[rt];</span></span>
<span class="line"><span style="color:#24292E;">				lazy[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;     </span><span style="color:#6A737D;">// 懒信息失效</span></span>
<span class="line"><span style="color:#24292E;">				lazy[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				sum[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> change[rt] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> ln;  </span><span style="color:#6A737D;">// 累加和全部重设</span></span>
<span class="line"><span style="color:#24292E;">				sum[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> change[rt] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> rn;</span></span>
<span class="line"><span style="color:#24292E;">				update[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// 父节点更新状态恢复</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lazy[rt] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 只修改一层  左右孩子可能留着上次的懒信息</span></span>
<span class="line"><span style="color:#24292E;">				lazy[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> lazy[rt];</span></span>
<span class="line"><span style="color:#24292E;">				sum[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> lazy[rt] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> ln;</span></span>
<span class="line"><span style="color:#24292E;">				lazy[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> lazy[rt];</span></span>
<span class="line"><span style="color:#24292E;">				sum[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> lazy[rt] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> rn;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 给左右孩子发送后 变为0</span></span>
<span class="line"><span style="color:#24292E;">				lazy[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// L~R, C 任务！（大范围 题目要求）</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// rt 父节点的下表，l~r 小范围</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> L, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> R, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> C, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> l, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rt) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 任务如果把此时的范围全包了！  </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> R) {</span></span>
<span class="line"><span style="color:#24292E;">				sum[rt] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> C </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (r </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 这个范围都加C 累加和*C</span></span>
<span class="line"><span style="color:#24292E;">				lazy[rt] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> C;   </span><span style="color:#6A737D;">// 全包需要懒更新</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 任务没有把你全包！</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// l  r  mid = (l+r)/2</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> r) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pushDown</span><span style="color:#24292E;">(rt, mid </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> mid); </span><span style="color:#6A737D;">// 需要把上一次的懒更新弄了</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// L~R 懒更新只更新一层</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(L, R, C, l, mid, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (R </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(L, R, C, mid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pushUp</span><span style="color:#24292E;">(rt);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span></code></pre></div><h3 id="update" tabindex="-1">update <a class="header-anchor" href="#update" aria-label="Permalink to &quot;update&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// L~R  所有的值变成C</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// l~r  rt</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">update</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> L, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> R, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> C, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> l, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> r, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> rt) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (L </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> r </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> R) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				update[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				change[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> C;</span></span>
<span class="line"><span style="color:#ADBAC7;">				sum[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> C </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> (r </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">); </span><span style="color:#768390;">//累加和为设置  之前全部清空</span></span>
<span class="line"><span style="color:#ADBAC7;">				lazy[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;  </span><span style="color:#768390;">// 懒信息清空</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// 当前任务躲不掉，无法懒更新，要往下发</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mid</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> r) </span><span style="color:#F47067;">&gt;&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pushDown</span><span style="color:#ADBAC7;">(rt, mid </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> mid);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (L </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> mid) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#DCBDFB;">update</span><span style="color:#ADBAC7;">(L, R, C, l, mid, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (R </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> mid) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#DCBDFB;">update</span><span style="color:#ADBAC7;">(L, R, C, mid </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pushUp</span><span style="color:#ADBAC7;">(rt);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// L~R  所有的值变成C</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// l~r  rt</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> L, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> R, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> C, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> l, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rt) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> R) {</span></span>
<span class="line"><span style="color:#24292E;">				update[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				change[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> C;</span></span>
<span class="line"><span style="color:#24292E;">				sum[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> C </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (r </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//累加和为设置  之前全部清空</span></span>
<span class="line"><span style="color:#24292E;">				lazy[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// 懒信息清空</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 当前任务躲不掉，无法懒更新，要往下发</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> r) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pushDown</span><span style="color:#24292E;">(rt, mid </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> mid);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(L, R, C, l, mid, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (R </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(L, R, C, mid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pushUp</span><span style="color:#24292E;">(rt);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span></code></pre></div><h3 id="query" tabindex="-1">query <a class="header-anchor" href="#query" aria-label="Permalink to &quot;query&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 1~6 累加和是多少？ 1~8 rt (2 , 6  , 1 , 8 , 1)</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">long</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">query</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> L, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> R, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> l, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> r, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> rt) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (L </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> r </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> R) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> sum[rt];</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mid</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> r) </span><span style="color:#F47067;">&gt;&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pushDown</span><span style="color:#ADBAC7;">(rt, mid </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> mid);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">long</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">ans</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (L </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> mid) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				ans </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">query</span><span style="color:#ADBAC7;">(L, R, l, mid, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (R </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> mid) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				ans </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">query</span><span style="color:#ADBAC7;">(L, R, mid </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ans;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1~6 累加和是多少？ 1~8 rt (2 , 6  , 1 , 8 , 1)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> L, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> R, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> l, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rt) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> R) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sum[rt];</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> r) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pushDown</span><span style="color:#24292E;">(rt, mid </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> mid);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;">				ans </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(L, R, l, mid, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (R </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;">				ans </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(L, R, mid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span></code></pre></div><h2 id="线段树例题" tabindex="-1">线段树例题 <a class="header-anchor" href="#线段树例题" aria-label="Permalink to &quot;线段树例题&quot;">​</a></h2><h3 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">俄罗斯方块  不需要累加和  但是要</span><span style="color:#DCBDFB;">max</span><span style="color:#ADBAC7;">(左树的最大值 和 右树的最大值)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">俄罗斯方块  不需要累加和  但是要</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(左树的最大值 和 右树的最大值)</span></span></code></pre></div><h3 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">SegmentTree</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">max;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">change;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">update;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SegmentTree</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">size</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">N</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> size </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			max </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[N </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">			change </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[N </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#ADBAC7;">			update </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;">[N </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">pushUp</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">rt</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			max[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">max</span><span style="color:#ADBAC7;">(max[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">], max[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">]);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// ln表示左子树元素结点个数，rn表示右子树结点个数</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">pushDown</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">rt</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ln</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">rn</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (update[rt]) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				update[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				update[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				change[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> change[rt];</span></span>
<span class="line"><span style="color:#ADBAC7;">				change[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> change[rt];</span></span>
<span class="line"><span style="color:#ADBAC7;">				max[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> change[rt];</span></span>
<span class="line"><span style="color:#ADBAC7;">				max[rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> change[rt];</span></span>
<span class="line"><span style="color:#ADBAC7;">				update[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">update</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">L</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">C</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">l</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">r</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">rt</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (L </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> r </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> R) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				update[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				change[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> C;</span></span>
<span class="line"><span style="color:#ADBAC7;">				max[rt] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> C;</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mid</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> r) </span><span style="color:#F47067;">&gt;&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pushDown</span><span style="color:#ADBAC7;">(rt, mid </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> mid);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (L </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> mid) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#DCBDFB;">update</span><span style="color:#ADBAC7;">(L, R, C, l, mid, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (R </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> mid) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#DCBDFB;">update</span><span style="color:#ADBAC7;">(L, R, C, mid </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pushUp</span><span style="color:#ADBAC7;">(rt);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">query</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">L</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">l</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">r</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">rt</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (L </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> r </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> R) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> max[rt];</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mid</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> r) </span><span style="color:#F47067;">&gt;&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">pushDown</span><span style="color:#ADBAC7;">(rt, mid </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> l </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> mid);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">left</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">right</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (L </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> mid) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				left </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">query</span><span style="color:#ADBAC7;">(L, R, l, mid, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (R </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> mid) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">query</span><span style="color:#ADBAC7;">(L, R, mid </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, r, rt </span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">max</span><span style="color:#ADBAC7;">(left, right);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SegmentTree</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] max;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] change;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">[] update;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SegmentTree</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[N </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">			change </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[N </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">			update </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;">[N </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pushUp</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rt</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			max[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(max[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], max[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// ln表示左子树元素结点个数，rn表示右子树结点个数</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pushDown</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rt</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ln</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (update[rt]) {</span></span>
<span class="line"><span style="color:#24292E;">				update[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				update[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				change[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> change[rt];</span></span>
<span class="line"><span style="color:#24292E;">				change[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> change[rt];</span></span>
<span class="line"><span style="color:#24292E;">				max[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> change[rt];</span></span>
<span class="line"><span style="color:#24292E;">				max[rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> change[rt];</span></span>
<span class="line"><span style="color:#24292E;">				update[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">L</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">R</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">C</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">l</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">r</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rt</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> R) {</span></span>
<span class="line"><span style="color:#24292E;">				update[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				change[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> C;</span></span>
<span class="line"><span style="color:#24292E;">				max[rt] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> C;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> r) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pushDown</span><span style="color:#24292E;">(rt, mid </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> mid);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(L, R, C, l, mid, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (R </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(L, R, C, mid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pushUp</span><span style="color:#24292E;">(rt);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">L</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">R</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">l</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">r</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">rt</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> R) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> max[rt];</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> r) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">pushDown</span><span style="color:#24292E;">(rt, mid </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> mid);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;">				left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(L, R, l, mid, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (R </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;">				right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(L, R, mid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, r, rt </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(left, right);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div>`,24);function m(s,h,g,v,b,f){const o=e,t=i("ClientOnly");return l(),r("div",null,[d,y(t,null,{default:A(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):E("",!0)]}),_:1}),u])}const z=c(F,[["render",m]]);export{q as __pageData,z as default};
