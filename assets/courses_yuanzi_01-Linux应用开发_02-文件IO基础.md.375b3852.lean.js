import{_ as t}from"./chunks/ArticleMetadata.efdb5e9a.js";import{_ as c,v as p,b as r,t as y,O as i,F as l,L as A,R as d,M as D,C,B as F}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const q=JSON.parse('{"title":"文件IO基础","description":"","frontmatter":{"title":"文件IO基础","author":"阿源","date":"2023/09/23 12:19","categories":["Linux应用编程"],"tags":["嵌入式","Linux应用编程"]},"headers":[],"relativePath":"courses/yuanzi/01-Linux应用开发/02-文件IO基础.md","filePath":"courses/yuanzi/01-Linux应用开发/02-文件IO基础.md","lastUpdated":1695460800000}'),B={name:"courses/yuanzi/01-Linux应用开发/02-文件IO基础.md"},u=l("h1",{id:"文件io基础",tabindex:"-1"},[A("文件IO基础 "),l("a",{class:"header-anchor",href:"#文件io基础","aria-label":'Permalink to "文件IO基础"'},"​")],-1),f=d(`<p>文件 I/O 指的是对文件的输入/输出操作，说白了就是对文件的读写操作； Linux 下一切皆文件，文件作为 Linux 系统设计思想的核心理念，在 Linux 系统下显得尤为重要，所以对文件的 I/O 操作既是基础也是最重要的部分。</p><h2 id="一个简单的文件-io示例" tabindex="-1">一个简单的文件 IO示例 <a class="header-anchor" href="#一个简单的文件-io示例" aria-label="Permalink to &quot;一个简单的文件 IO示例&quot;">​</a></h2><p>一个通用的 IO 模型通常包括打开文件、读写文件、关闭文件这些基本操作， 主要涉及到 4 个函数： open()、 read()、 write()以及 close()</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;fcntl.h&gt;</span></span>
<span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;unistd.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">{</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">buff</span><span style="color:#ADBAC7;">[</span><span style="color:#6CB6FF;">1024</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> fd1, fd2;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> ret;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">    /* 打开源文件 src_file(只读方式) */</span></span>
<span class="line"><span style="color:#ADBAC7;">    fd1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">open</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;./src_file&quot;</span><span style="color:#ADBAC7;">, O_RDONLY);</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> fd1)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> fd1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">    /* 打开目标文件 dest_file(只写方式) */</span></span>
<span class="line"><span style="color:#ADBAC7;">    fd2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">open</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;./dest_file&quot;</span><span style="color:#ADBAC7;">, O_WRONLY);</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> fd2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        ret </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> fd2;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">goto</span><span style="color:#ADBAC7;"> out1;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">    /* 读取源文件 1KB 数据到 buff 中 */</span></span>
<span class="line"><span style="color:#ADBAC7;">    ret </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">read</span><span style="color:#ADBAC7;">(fd1, buff, </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(buff));</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> ret)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">goto</span><span style="color:#ADBAC7;"> out2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">    /* 将 buff 中的数据写入目标文件 */</span></span>
<span class="line"><span style="color:#ADBAC7;">    ret </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">write</span><span style="color:#ADBAC7;">(fd2, buff, </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(buff));</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> ret)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">goto</span><span style="color:#ADBAC7;"> out2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    ret </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">out2:</span></span>
<span class="line"><span style="color:#768390;">    /* 关闭目标文件 */</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">close</span><span style="color:#ADBAC7;">(fd2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">out1:</span></span>
<span class="line"><span style="color:#768390;">    /* 关闭源文件 */</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">close</span><span style="color:#ADBAC7;">(fd1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ret;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;fcntl.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">buff</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fd1, fd2;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* 打开源文件 src_file(只读方式) */</span></span>
<span class="line"><span style="color:#24292E;">    fd1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./src_file&quot;</span><span style="color:#24292E;">, O_RDONLY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> fd1)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* 打开目标文件 dest_file(只写方式) */</span></span>
<span class="line"><span style="color:#24292E;">    fd2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./dest_file&quot;</span><span style="color:#24292E;">, O_WRONLY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> fd2) {</span></span>
<span class="line"><span style="color:#24292E;">        ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fd2;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">goto</span><span style="color:#24292E;"> out1;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* 读取源文件 1KB 数据到 buff 中 */</span></span>
<span class="line"><span style="color:#24292E;">    ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(fd1, buff, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(buff));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ret)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">goto</span><span style="color:#24292E;"> out2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* 将 buff 中的数据写入目标文件 */</span></span>
<span class="line"><span style="color:#24292E;">    ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(fd2, buff, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(buff));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ret)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">goto</span><span style="color:#24292E;"> out2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">out2:</span></span>
<span class="line"><span style="color:#6A737D;">    /* 关闭目标文件 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(fd2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">out1:</span></span>
<span class="line"><span style="color:#6A737D;">    /* 关闭源文件 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(fd1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从源文件 src_file 中读取 1KB 数据，然后将其写入到目标文件 dest_file 中,在进行读写操作之前，首先调用 open 函数将源文件和目标文件打开，成功打开之后再调用 read 函数从源文件中读取 1KB 数据，然后再调用 write 函数将这 1KB 数据写入到目标文件中</p><h2 id="文件描述符" tabindex="-1">文件描述符 <a class="header-anchor" href="#文件描述符" aria-label="Permalink to &quot;文件描述符&quot;">​</a></h2><p>调用 open 函数会有一个返回值， 譬如示例代码 2.1.1 中的 fd1 和 fd2， 这是一个 int 类型的数据，在 open函数执行成功的情况下， 会返回一个非负整数， 该返回值就是一个文件描述符（file descriptor） ， 这说明文件描述符是一个非负整数</p><p>当调用 open 函数打开一个现有文件或创建一个新文件时，内核会向进程返回一个文件描述符， 用于指代被打开的文件，所有执行 IO 操作的系统调用都是通过文件描述符来索引到对应的文件</p><p>在 Linux 系统下，我们可以通过 ulimit 命令来查看进程可打开的最大文件数，用法如下所示：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">ulimit</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">-n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">ulimit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span></span></code></pre></div><p>该最大值默认情况下是 1024，也就意味着一个进程最多可以打开 1024 个文件，当然这个限制数其实是可以设置的，</p><h2 id="open-打开文件" tabindex="-1">open 打开文件 <a class="header-anchor" href="#open-打开文件" aria-label="Permalink to &quot;open 打开文件&quot;">​</a></h2><p>在 Linux 系统中要操作一个文件，需要先打开该文件，得到文件描述符，然后再对文件进行相应的读写操作（或其他操作），最后在关闭该文件； open 函数用于打开文件，当然除了打开已经存在的文件之外，还可以创建一个新的文件</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;fcntl.h&gt;</span></span>
<span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">open</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#F69D50;">pathname</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">flags</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">open</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#F69D50;">pathname</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">flags</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">mode_t</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">mode</span><span style="color:#ADBAC7;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;fcntl.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">pathname</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">flags</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">pathname</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">flags</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">mode_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">mode</span><span style="color:#24292E;">);</span></span></code></pre></div><p>在 Linux 系统下，可以通过 man 命令（也叫 man 手册） 来查看某一个 Linux 系统调用的帮助信息， man命令可以将该系统调用的详细信息显示出来</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F69D50;">man</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">open</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;">#查看 open 函数的帮助信息</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">man</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">open</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#查看 open 函数的帮助信息</span></span></code></pre></div><p>在应用程序中使用 open 函数时，需要包含 3 个头文件“#include&lt;sys/types.h&gt;”、“#include &lt;sys/stat.h&gt;”、“#include &lt;fcntl.h&gt;”。 函数参数和返回值含义如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">- pathname： 字符串类型，用于标识需要打开或创建的文件，可以包含路径</span></span>
<span class="line"><span style="color:#adbac7;">- flags： 调用 open 函数时需要提供的标志， 包括文件访问模式标志以及其它文件相关标志</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">- pathname： 字符串类型，用于标识需要打开或创建的文件，可以包含路径</span></span>
<span class="line"><span style="color:#24292e;">- flags： 调用 open 函数时需要提供的标志， 包括文件访问模式标志以及其它文件相关标志</span></span></code></pre></div><h3 id="open-函数使用示例" tabindex="-1">open 函数使用示例 <a class="header-anchor" href="#open-函数使用示例" aria-label="Permalink to &quot;open 函数使用示例&quot;">​</a></h3><p>使用 open 函数打开一个已经存在的文件（例如当前目录下的 app.c 文件），使用只读方式打开：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> fd </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">open</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;./app.c&quot;</span><span style="color:#ADBAC7;">, O_RDONLY)</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> fd)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> fd;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./app.c&quot;</span><span style="color:#24292E;">, O_RDONLY)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> fd)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd;</span></span></code></pre></div><p>使用 open 函数打开一个已经存在的文件（例如当前目录下的 app.c 文件），使用可读可写方式打开：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> fd </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">open</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;./app.c&quot;</span><span style="color:#ADBAC7;">, O_RDWR)</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> fd)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> fd;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./app.c&quot;</span><span style="color:#24292E;">, O_RDWR)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> fd)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd;</span></span></code></pre></div><p>使用 open 函数打开一个指定的文件（譬如/home/dengtao/hello） ， 使用可读可写方式,如果该文件是一个符号链接文件，则不对其进行解引用，直接返回错误：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> fd </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">open</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;/home/dengtao/hello&quot;</span><span style="color:#ADBAC7;">, O_RDWR </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> O_NOFOLLOW);</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> fd)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> fd;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/home/dengtao/hello&quot;</span><span style="color:#24292E;">, O_RDWR </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> O_NOFOLLOW);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> fd)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd;</span></span></code></pre></div><p>将文件权限设置如下：文件所属者拥有读、写、执行权限；同组用户与其他用户只有读权限。使用可读可写方式打开：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> fd </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">open</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;/home/dengtao/hello&quot;</span><span style="color:#ADBAC7;">, O_RDWR </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> O_CREAT, S_IRWXU </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> S_IRGRP </span><span style="color:#F47067;">|</span><span style="color:#ADBAC7;"> S_IROTH);</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> fd)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> fd;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/home/dengtao/hello&quot;</span><span style="color:#24292E;">, O_RDWR </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> O_CREAT, S_IRWXU </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> S_IRGRP </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> S_IROTH);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> fd)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fd;</span></span></code></pre></div><h2 id="write-写文件" tabindex="-1">write 写文件 <a class="header-anchor" href="#write-写文件" aria-label="Permalink to &quot;write 写文件&quot;">​</a></h2><p>调用 write 函数可向打开的文件写入数据，其函数原型如下所示</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#F47067;">ssize_t</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">write</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">fd</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#F69D50;">buf</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">size_t</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">count</span><span style="color:#ADBAC7;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">ssize_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">buf</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">count</span><span style="color:#24292E;">);</span></span></code></pre></div><p>函数参数和返回值含义如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">- fd： 文件描述符。与 write 函数的 fd 参数意义相同。</span></span>
<span class="line"><span style="color:#adbac7;">- buf： 指定用于存储读取数据的缓冲区。</span></span>
<span class="line"><span style="color:#adbac7;">- count： 指定需要读取的字节数。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">- fd： 文件描述符。与 write 函数的 fd 参数意义相同。</span></span>
<span class="line"><span style="color:#24292e;">- buf： 指定用于存储读取数据的缓冲区。</span></span>
<span class="line"><span style="color:#24292e;">- count： 指定需要读取的字节数。</span></span></code></pre></div><h2 id="close-关闭文件" tabindex="-1">close 关闭文件 <a class="header-anchor" href="#close-关闭文件" aria-label="Permalink to &quot;close 关闭文件&quot;">​</a></h2><p>可调用 close 函数关闭一个已经打开的文件，其函数原型如下</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">close</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">fd</span><span style="color:#ADBAC7;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fd</span><span style="color:#24292E;">);</span></span></code></pre></div><p>数参数和返回值含义如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">- fd： 文件描述符，需要关闭的文件所对应的文件描述符。</span></span>
<span class="line"><span style="color:#adbac7;">- 返回值： 如果成功返回 0，如果失败则返回-1。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">- fd： 文件描述符，需要关闭的文件所对应的文件描述符。</span></span>
<span class="line"><span style="color:#24292e;">- 返回值： 如果成功返回 0，如果失败则返回-1。</span></span></code></pre></div><p>显式关闭不再需要的文件描述符往往是良好的编程习惯，会使代码在后续修改时更具有可读性，也更可靠，进而言之，文件描述符是有限资源，当不再需要时必须将其释放、归还于系统。</p><h2 id="lseek" tabindex="-1">lseek <a class="header-anchor" href="#lseek" aria-label="Permalink to &quot;lseek&quot;">​</a></h2><p>对于每个打开的文件， 系统都会记录它的读写位置偏移量，我们也把这个读写位置偏移量称为读写偏移量</p><p>读写偏移量用于指示 read()或 write()函数操作时文件的起始位置，会以相对于文件头部的位置偏移量来表示，文件第一个字节数据的位置偏移量为 0。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#F47067;">#include</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#F47067;">off_t</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lseek</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">fd</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">off_t</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">offset</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">whence</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">off_t</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lseek</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">fd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">off_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">whence</span><span style="color:#24292E;">)</span></span></code></pre></div><p>函数参数和返回值含义如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">- fd： 文件描述符。</span></span>
<span class="line"><span style="color:#adbac7;">- offset： 偏移量，以字节为单位。</span></span>
<span class="line"><span style="color:#adbac7;">- whence： 用于定义参数 offset 偏移量对应的参考值， 该参数为下列其中一种（宏定义）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">- fd： 文件描述符。</span></span>
<span class="line"><span style="color:#24292e;">- offset： 偏移量，以字节为单位。</span></span>
<span class="line"><span style="color:#24292e;">- whence： 用于定义参数 offset 偏移量对应的参考值， 该参数为下列其中一种（宏定义）</span></span></code></pre></div><h3 id="使用示例" tabindex="-1">使用示例： <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例：&quot;">​</a></h3><p>将读写位置移动到文件开头处：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">off_t</span><span style="color:#ADBAC7;"> off </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lseek</span><span style="color:#ADBAC7;">(fd, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, SEEK_SET);</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> off)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">off_t</span><span style="color:#24292E;"> off </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lseek</span><span style="color:#24292E;">(fd, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, SEEK_SET);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> off)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span></code></pre></div><p>将读写位置移动到文件末尾：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">off_t</span><span style="color:#ADBAC7;"> off </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lseek</span><span style="color:#ADBAC7;">(fd, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, SEEK_END);</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> off)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">off_t</span><span style="color:#24292E;"> off </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lseek</span><span style="color:#24292E;">(fd, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, SEEK_END);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> off)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span></code></pre></div><p>将读写位置移动到偏移文件开头 100 个字节处：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">off_t</span><span style="color:#ADBAC7;"> off </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lseek</span><span style="color:#ADBAC7;">(fd, </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">, SEEK_SET);</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> off)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">off_t</span><span style="color:#24292E;"> off </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lseek</span><span style="color:#24292E;">(fd, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, SEEK_SET);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> off)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span></code></pre></div><p>获取当前读写位置偏移量：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">off_t</span><span style="color:#ADBAC7;"> off </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lseek</span><span style="color:#ADBAC7;">(fd, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, SEEK_CUR);</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> off)</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">off_t</span><span style="color:#24292E;"> off </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lseek</span><span style="color:#24292E;">(fd, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, SEEK_CUR);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> off)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span></code></pre></div><p>函数执行成功将返回文件当前读写位置</p>`,54);function h(s,E,g,b,v,m){const o=t,e=D("ClientOnly");return p(),r("div",null,[u,y(e,null,{default:i(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(p(),C(o,{key:0,article:s.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),f])}const R=c(B,[["render",h]]);export{q as __pageData,R as default};
