import{_ as l}from"./chunks/ArticleMetadata.CDaExH3F.js";import{_ as u,C as c,c as d,o as n,k as o,G as p,P as h,a as m,w as _,b as x,e as f}from"./chunks/framework.CZWML48V.js";import"./chunks/md5.DoRRH4_b.js";const V=JSON.parse('{"title":"应用编程概念","description":"","frontmatter":{"title":"应用编程概念","author":"阿源","date":"2023/09/23 12:07","categories":["Linux应用编程"],"tags":["嵌入式","Linux应用编程"]},"headers":[],"relativePath":"courses/yuanzi/01-Linux应用开发/01-应用编程概念.md","filePath":"courses/yuanzi/01-Linux应用开发/01-应用编程概念.md","lastUpdated":1713341239000}'),L={name:"courses/yuanzi/01-Linux应用开发/01-应用编程概念.md"};function b(a,e,k,P,C,q){const i=l,s=c("ClientOnly");return n(),d("div",null,[e[0]||(e[0]=o("h1",{id:"应用编程概念",tabindex:"-1"},[m("应用编程概念 "),o("a",{class:"header-anchor",href:"#应用编程概念","aria-label":'Permalink to "应用编程概念"'},"​")],-1)),p(s,null,{default:_(()=>{var t,r;return[(((t=a.$frontmatter)==null?void 0:t.aside)??!0)&&(((r=a.$frontmatter)==null?void 0:r.showArticleMetadata)??!0)?(n(),x(i,{key:0,article:a.$frontmatter},null,8,["article"])):f("",!0)]}),_:1}),e[1]||(e[1]=h('<p>       了解本章所介绍的内容是掌握应用编程的先决条件，所以本章主要内容便是对 Linux 应用编程进行个简单地介绍，让读者对此有一个基本的认识。</p><h2 id="系统调用" tabindex="-1">系统调用 <a class="header-anchor" href="#系统调用" aria-label="Permalink to &quot;系统调用&quot;">​</a></h2><p>       系统调用（system call） 其实是 Linux 内核提供给应用层的应用编程接口（API） ， 是 Linux 应用层进入内核的入口。不止 Linux 系统，所有的操作系统都会向应用层提供系统调用，应用程序通过系统调用来使用操作系统提供的各种服务。</p><p>       通过系统调用， Linux 应用程序可以请求内核以自己的名义执行某些事情，譬如打开磁盘中的文件、读写文件、关闭文件以及控制其它硬件外设。</p><p>       通过系统调用 API，应用层可以实现与内核的交互</p><h3 id="应用编程与裸机编程、驱动编程有什么区别" tabindex="-1">应用编程与裸机编程、驱动编程有什么区别？ <a class="header-anchor" href="#应用编程与裸机编程、驱动编程有什么区别" aria-label="Permalink to &quot;应用编程与裸机编程、驱动编程有什么区别？&quot;">​</a></h3><p>       我们大可将编程分为三种，分别为裸机编程、 Linux 驱动编程以及 Linux 应用编程。</p><p>       在裸机程序当中， LED 硬件操作代码与用户逻辑代码全部都是在同一个源文件（同一个工程）中实现的，硬件操作代码与用户逻辑代码没有隔离，没有操作系统支持，代码编译之后直接在硬件平台运行，俗称“裸跑” 。</p><p>       LED 应用程序与 LED 驱动程序是分隔、分离的，它们单独编译， 它们并不是整合在一起的， 应用程序运行在操作系统之上，有操作系统支持，应用程序处于用户态，而驱动程序处于内核态，与纯粹的裸机程序存在着质的区别。 Linux 应用开发与驱动开发是两个不同的方向，将来在工作当中也会负责不同的任务、解决不同的问题</p><h2 id="库函数" tabindex="-1">库函数 <a class="header-anchor" href="#库函数" aria-label="Permalink to &quot;库函数&quot;">​</a></h2><p>       前面给大家介绍了系统调用，系统调用是内核直接向应用层提供的应用编程接口， 譬如 open、 write、read、 close 等，关于这些系统调用后面会给大家进行详细介绍。 编写应用程序除了使用系统调用之外，我们还可以使用库函数</p><p>       所以应用编程简单点来说就是：开发 Linux 应用程序，通过调用内核提供的系统调用或使用 C 库函数来开发具有相应功能的应用程序。</p><h2 id="标准-c-语言函数库" tabindex="-1">标准 C 语言函数库 <a class="header-anchor" href="#标准-c-语言函数库" aria-label="Permalink to &quot;标准 C 语言函数库&quot;">​</a></h2>',13))])}const g=u(L,[["render",b]]);export{V as __pageData,g as default};
