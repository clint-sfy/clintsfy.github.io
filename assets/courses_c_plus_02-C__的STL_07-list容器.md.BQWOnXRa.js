import{_ as k}from"./chunks/ArticleMetadata.BdQRwYO7.js";import{_ as e,C,c as r,o as p,k as l,G as d,P as g,a as y,w as F,b as A,e as B}from"./chunks/framework.CLT-Xekf.js";import"./chunks/md5.Dgu2YaMo.js";const v=JSON.parse('{"title":"C++的list容器","description":"","frontmatter":{"title":"C++的list容器","author":"阿源","date":"2023/02/12 21:29","categories":["C++基础快速入门"],"tags":["C++","C++基础","STL"]},"headers":[],"relativePath":"courses/c_plus/02-C++的STL/07-list容器.md","filePath":"courses/c_plus/02-C++的STL/07-list容器.md","lastUpdated":1713341239000}'),c={name:"courses/c_plus/02-C++的STL/07-list容器.md"};function D(i,s,o,E,m,u){const t=k,h=C("ClientOnly");return p(),r("div",null,[s[0]||(s[0]=l("h1",{id:"c-的list容器",tabindex:"-1"},[y("C++的list容器 "),l("a",{class:"header-anchor",href:"#c-的list容器","aria-label":'Permalink to "C++的list容器"'},"​")],-1)),d(h,null,{default:F(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(p(),A(t,{key:0,article:i.$frontmatter},null,8,["article"])):B("",!0)]}),_:1}),s[1]||(s[1]=g(`<h2 id="list链表容器" tabindex="-1">list链表容器 <a class="header-anchor" href="#list链表容器" aria-label="Permalink to &quot;list链表容器&quot;">​</a></h2><p>list是双向循环链表</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/STL6.png" alt=""></p><p>list容器的迭代器是 双向迭代器。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>1 3.6.4.1 list构造函数</span></span>
<span class="line"><span>2 list&lt;T&gt; lstT;//list采用采用模板类实现,对象的默认构造形式：</span></span>
<span class="line"><span>3 list(beg,end);//构造函数将[beg, end)区间中的元素拷贝给本身。</span></span>
<span class="line"><span>4 list(n,elem);//构造函数将n个elem拷贝给本身。</span></span>
<span class="line"><span>5 list(const list &amp;lst);//拷贝构造函数。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>6 3.6.4.2 list数据元素插入和删除操作</span></span>
<span class="line"><span>7 push_back(elem);//在容器尾部加入一个元素</span></span>
<span class="line"><span>8 pop_back();//删除容器中最后一个元素</span></span>
<span class="line"><span>9 push_front(elem);//在容器开头插入一个元素</span></span>
<span class="line"><span>10 pop_front();//从容器开头移除第一个元素</span></span>
<span class="line"><span>11 insert(pos,elem);//在pos位置插elem元素的拷贝，返回新数据的位置。</span></span>
<span class="line"><span>12 insert(pos,n,elem);//在pos位置插入n个elem数据，无返回值。</span></span>
<span class="line"><span>13 insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。</span></span>
<span class="line"><span>14 clear();//移除容器的所有数据</span></span>
<span class="line"><span>15 erase(beg,end);//删除[beg,end)区间的数据，返回下一个数据的位置。</span></span>
<span class="line"><span>16 erase(pos);//删除pos位置的数据，返回下一个数据的位置。</span></span>
<span class="line"><span>17 remove(elem);//删除容器中所有与elem值匹配的元素。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>18 3.6.4.3 list大小操作</span></span>
<span class="line"><span>19 size();//返回容器中元素的个数</span></span>
<span class="line"><span>20 empty();//判断容器是否为空</span></span>
<span class="line"><span>21 resize(num);//重新指定容器的长度为num，</span></span>
<span class="line"><span>22 若容器变长，则以默认值填充新位置。</span></span>
<span class="line"><span>23 如果容器变短，则末尾超出容器长度的元素被删除。</span></span>
<span class="line"><span>24 resize(num, elem);//重新指定容器的长度为num，</span></span>
<span class="line"><span>25 若容器变长，则以elem值填充新位置。</span></span>
<span class="line"><span>26 如果容器变短，则末尾超出容器长度的元素被删除。</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>27 3.6.4.4 list赋值操作</span></span>
<span class="line"><span>28 assign(beg, end);//将[beg, end)区间中的数据拷贝赋值给本身。</span></span>
<span class="line"><span>29 assign(n, elem);//将n个elem拷贝赋值给本身。</span></span>
<span class="line"><span>30 list&amp; operator=(const list &amp;lst);//重载等号操作符</span></span>
<span class="line"><span>31 swap(lst);//将lst与本身的元素互换。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>32 3.6.4.5 list数据的存取</span></span>
<span class="line"><span>33 front();//返回第一个元素。</span></span>
<span class="line"><span>34 back();//返回最后一个元素。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>35 3.6.4.6 list反转排序</span></span>
<span class="line"><span>36 reverse();//反转链表，比如lst包含1,3,5元素，运行此方法后，lst就包含5,3,1元素。</span></span>
<span class="line"><span>37 sort(); //list排序</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> #include </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">iostream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> #include </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> #include </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">algorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printListInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;int&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">l)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;::iterator it;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">l.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">l.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">endl;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">14</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test01</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l1;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_front</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_front</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_front</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">24</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">25</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printListInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(l1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//60 50 40 10 20 30</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">26</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //list容器 是双向迭代器 不支持+2 支持++</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">27</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;::iterator it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">l1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">29</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> it</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(it, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">31</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printListInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(l1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//60 50 100 100 100 40 10 20 30</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">32</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">33</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //删除所有100</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">34</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">35</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printListInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(l1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//60 50 40 10 20 30</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">36</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">37</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //对链表排序</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">38</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //STL提供的算法 只支持 随机访问迭代器，而list是双向迭代器 所以sort不支持list</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">39</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // l1.sort(greater&lt;int&gt;());</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> l1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">41</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printListInt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(l1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//10 20 30 40 50 60</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">43</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">44</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> argc, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">argv[])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">46</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test01</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">47</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">48</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">49</span></span></code></pre></div>`,6))])}const L=e(c,[["render",D]]);export{v as __pageData,L as default};
