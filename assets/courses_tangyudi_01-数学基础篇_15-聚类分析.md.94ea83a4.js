import{_ as c}from"./chunks/ArticleMetadata.e10718d6.js";import{_ as t,v as l,b as r,E as i,O as y,F as p,L as A,R as d,M as C,C as g,B as D}from"./chunks/framework.2aeb816e.js";import"./chunks/md5.772bbdf1.js";const q=JSON.parse('{"title":"聚类分析","description":"","frontmatter":{"title":"聚类分析","author":"阿源","date":"2023/06/15 12:00","categories":["机器学习理论基础"],"tags":["机器学习","数学基础"]},"headers":[],"relativePath":"courses/tangyudi/01-数学基础篇/15-聚类分析.md","filePath":"courses/tangyudi/01-数学基础篇/15-聚类分析.md","lastUpdated":1691327334000}'),h={name:"courses/tangyudi/01-数学基础篇/15-聚类分析.md"},m=p("h1",{id:"聚类分析",tabindex:"-1"},[A("聚类分析 "),p("a",{class:"header-anchor",href:"#聚类分析","aria-label":'Permalink to "聚类分析"'},"​")],-1),B=d(`<h2 id="_15-聚类分析" tabindex="-1">15. 聚类分析 <a class="header-anchor" href="#_15-聚类分析" aria-label="Permalink to &quot;15. 聚类分析&quot;">​</a></h2><h3 id="_1-层次聚类概述" tabindex="-1">1. 层次聚类概述 <a class="header-anchor" href="#_1-层次聚类概述" aria-label="Permalink to &quot;1. 层次聚类概述&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">层次聚类(Hierarchical Clustering)是聚类算法的一种，通过计算不同类别数据点间的相似度来创建一棵有层次的嵌套聚类树。在聚类树中，不同类别的原始数据点是树的最低层，树的顶层是一个聚类的根节点。创建聚类树有自下而上合并和自上而下分裂两种方法。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">作为一家公司的人力资源部经理，你可以把所有的雇员组织成较大的簇，如主管、经理和职员；然后你可以进一步划分为较小的簇，例如，职员簇可以进一步划分为子簇：高级职员，一般职员和实习人员。所有的这些簇形成了层次结构，可以很容易地对各层次上的数据进行汇总或者特征化。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">层次聚类(Hierarchical Clustering)是聚类算法的一种，通过计算不同类别数据点间的相似度来创建一棵有层次的嵌套聚类树。在聚类树中，不同类别的原始数据点是树的最低层，树的顶层是一个聚类的根节点。创建聚类树有自下而上合并和自上而下分裂两种方法。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">作为一家公司的人力资源部经理，你可以把所有的雇员组织成较大的簇，如主管、经理和职员；然后你可以进一步划分为较小的簇，例如，职员簇可以进一步划分为子簇：高级职员，一般职员和实习人员。所有的这些簇形成了层次结构，可以很容易地对各层次上的数据进行汇总或者特征化。</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/python/math/%E8%81%9A%E7%B1%BB1.png" alt=""></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">直观来看，上图中展示的数据划分为2个簇或4个簇都是合理的，甚至，如果上面每一个圈的内部包含的是大量数据形成的数据集，那么也许分成16个簇才是所需要的。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">论数据集应该聚类成多少个簇，通常是在讨论我们在什么尺度上关注这个数据集。层次聚类算法相比划分聚类算法的优点之一是可以在不同的尺度上（层次）展示数据集的聚类情况。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">基于层次的聚类算法（Hierarchical Clustering）可以是凝聚的（Agglomerative）或者分裂的（Divisive），取决于层次的划分是“自底向上”还是“自顶向下”</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">直观来看，上图中展示的数据划分为2个簇或4个簇都是合理的，甚至，如果上面每一个圈的内部包含的是大量数据形成的数据集，那么也许分成16个簇才是所需要的。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">论数据集应该聚类成多少个簇，通常是在讨论我们在什么尺度上关注这个数据集。层次聚类算法相比划分聚类算法的优点之一是可以在不同的尺度上（层次）展示数据集的聚类情况。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">基于层次的聚类算法（Hierarchical Clustering）可以是凝聚的（Agglomerative）或者分裂的（Divisive），取决于层次的划分是“自底向上”还是“自顶向下”</span></span></code></pre></div><h3 id="_2-层次聚类流程" tabindex="-1">2. 层次聚类流程 <a class="header-anchor" href="#_2-层次聚类流程" aria-label="Permalink to &quot;2. 层次聚类流程&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">自底向上的合并算法</span></span>
<span class="line"><span style="color:#adbac7;">层次聚类的合并算法通过计算两类数据点间的相似性，对所有数据点中最为相似的两个数据点进行组合，并反复迭代这一过程。简单的说层次聚类的合并算法是通过计算每一个类别的数据点与所有数据点之间的距离来确定它们之间的相似性，距离越小，相似度越高。并将距离最近的两个数据点或类别进行组合，生成聚类树。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">相似度的计算</span></span>
<span class="line"><span style="color:#adbac7;">层次聚类使用欧式距离来计算不同类别数据点间的距离（相似度）。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">自底向上的合并算法</span></span>
<span class="line"><span style="color:#24292e;">层次聚类的合并算法通过计算两类数据点间的相似性，对所有数据点中最为相似的两个数据点进行组合，并反复迭代这一过程。简单的说层次聚类的合并算法是通过计算每一个类别的数据点与所有数据点之间的距离来确定它们之间的相似性，距离越小，相似度越高。并将距离最近的两个数据点或类别进行组合，生成聚类树。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">相似度的计算</span></span>
<span class="line"><span style="color:#24292e;">层次聚类使用欧式距离来计算不同类别数据点间的距离（相似度）。</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/python/math/%E8%81%9A%E7%B1%BB2.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/python/math/%E8%81%9A%E7%B1%BB3.png" alt=""></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">两个组合数据点间的距离</span></span>
<span class="line"><span style="color:#adbac7;">计算两个组合数据点间距离的方法有三种，分别为Single Linkage，Complete Linkage和Average Linkage。在开始计算之前，我们先来介绍下这三种计算方法以及各自的优缺点。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">Single Linkage：方法是将两个组合数据点中距离最近的两个数据点间的距离作为这两个组合数据点的距离。这种方法容易受到极端值的影响。两个很相似的组合数据点可能由于其中的某个极端的数据点距离较近而组合在一起。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">Complete Linkage：Complete Linkage的计算方法与Single Linkage相反，将两个组合数据点中距离最远的两个数据点间的距离作为这两个组合数据点的距离。Complete Linkage的问题也与Single Linkage相反，两个不相似的组合数据点可能由于其中的极端值距离较远而无法组合在一起。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">Average Linkage：Average Linkage的计算方法是计算两个组合数据点中的每个数据点与其他所有数据点的距离。将所有距离的均值作为两个组合数据点间的距离。这种方法计算量比较大，但结果比前两种方法更合理。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">我们使用Average Linkage计算组合数据点间的距离。下面是计算组合数据点(A,F)到(B,C)的距离，这里分别计算了(A,F)和(B,C)两两间距离的均值。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">两个组合数据点间的距离</span></span>
<span class="line"><span style="color:#24292e;">计算两个组合数据点间距离的方法有三种，分别为Single Linkage，Complete Linkage和Average Linkage。在开始计算之前，我们先来介绍下这三种计算方法以及各自的优缺点。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Single Linkage：方法是将两个组合数据点中距离最近的两个数据点间的距离作为这两个组合数据点的距离。这种方法容易受到极端值的影响。两个很相似的组合数据点可能由于其中的某个极端的数据点距离较近而组合在一起。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Complete Linkage：Complete Linkage的计算方法与Single Linkage相反，将两个组合数据点中距离最远的两个数据点间的距离作为这两个组合数据点的距离。Complete Linkage的问题也与Single Linkage相反，两个不相似的组合数据点可能由于其中的极端值距离较远而无法组合在一起。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Average Linkage：Average Linkage的计算方法是计算两个组合数据点中的每个数据点与其他所有数据点的距离。将所有距离的均值作为两个组合数据点间的距离。这种方法计算量比较大，但结果比前两种方法更合理。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">我们使用Average Linkage计算组合数据点间的距离。下面是计算组合数据点(A,F)到(B,C)的距离，这里分别计算了(A,F)和(B,C)两两间距离的均值。</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/python/math/%E8%81%9A%E7%B1%BB4.png" alt=""></p><h3 id="_3-层次聚类实例" tabindex="-1">3. 层次聚类实例 <a class="header-anchor" href="#_3-层次聚类实例" aria-label="Permalink to &quot;3. 层次聚类实例&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> pandas </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> pd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">seeds_df </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pd.read_csv(</span><span style="color:#96D0FF;">&#39;./datasets/seeds-less-rows.csv&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">seeds_df.head()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">seeds_df.grain_variety.value_counts()  </span></span>
<span class="line"><span style="color:#ADBAC7;">varieties </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">list</span><span style="color:#ADBAC7;">(seeds_df.pop(</span><span style="color:#96D0FF;">&#39;grain_variety&#39;</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">samples </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> seeds_df.values</span></span>
<span class="line"><span style="color:#ADBAC7;">samples</span></span>
<span class="line"><span style="color:#ADBAC7;">array([[ </span><span style="color:#6CB6FF;">14.88</span><span style="color:#ADBAC7;">  ,  </span><span style="color:#6CB6FF;">14.57</span><span style="color:#ADBAC7;">  ,   </span><span style="color:#6CB6FF;">0.8811</span><span style="color:#ADBAC7;">,   </span><span style="color:#6CB6FF;">5.554</span><span style="color:#ADBAC7;"> ,   </span><span style="color:#6CB6FF;">3.333</span><span style="color:#ADBAC7;"> ,   </span><span style="color:#6CB6FF;">1.018</span><span style="color:#ADBAC7;"> ,   </span><span style="color:#6CB6FF;">4.956</span><span style="color:#ADBAC7;"> ],</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span></span>
<span class="line"><span style="color:#768390;">#距离计算的 还有树状图</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> scipy.cluster.hierarchy </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> linkage, dendrogram</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> matplotlib.pyplot </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#进行层次聚类</span></span>
<span class="line"><span style="color:#ADBAC7;">mergings = linkage(samples, </span><span style="color:#F69D50;">method</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;complete&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">#树状图结果</span></span>
<span class="line"><span style="color:#ADBAC7;">fig = plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">dendrogram(mergings,</span></span>
<span class="line"><span style="color:#ADBAC7;">           </span><span style="color:#F69D50;">labels</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">varieties,</span></span>
<span class="line"><span style="color:#ADBAC7;">           </span><span style="color:#F69D50;">leaf_rotation</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">90</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">           </span><span style="color:#F69D50;">leaf_font_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pandas </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">seeds_df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.read_csv(</span><span style="color:#032F62;">&#39;./datasets/seeds-less-rows.csv&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">seeds_df.head()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">seeds_df.grain_variety.value_counts()  </span></span>
<span class="line"><span style="color:#24292E;">varieties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(seeds_df.pop(</span><span style="color:#032F62;">&#39;grain_variety&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> seeds_df.values</span></span>
<span class="line"><span style="color:#24292E;">samples</span></span>
<span class="line"><span style="color:#24292E;">array([[ </span><span style="color:#005CC5;">14.88</span><span style="color:#24292E;">  ,  </span><span style="color:#005CC5;">14.57</span><span style="color:#24292E;">  ,   </span><span style="color:#005CC5;">0.8811</span><span style="color:#24292E;">,   </span><span style="color:#005CC5;">5.554</span><span style="color:#24292E;"> ,   </span><span style="color:#005CC5;">3.333</span><span style="color:#24292E;"> ,   </span><span style="color:#005CC5;">1.018</span><span style="color:#24292E;"> ,   </span><span style="color:#005CC5;">4.956</span><span style="color:#24292E;"> ],</span></span>
<span class="line"><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#6A737D;">#距离计算的 还有树状图</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> scipy.cluster.hierarchy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> linkage, dendrogram</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> matplotlib.pyplot </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#进行层次聚类</span></span>
<span class="line"><span style="color:#24292E;">mergings = linkage(samples, </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;complete&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">#树状图结果</span></span>
<span class="line"><span style="color:#24292E;">fig = plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">dendrogram(mergings,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#E36209;">labels</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">varieties,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#E36209;">leaf_rotation</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">90</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#E36209;">leaf_font_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/python/math/%E8%81%9A%E7%B1%BB5.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">#得到标签结果</span></span>
<span class="line"><span style="color:#768390;">#maximum height自己指定</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> scipy.cluster.hierarchy </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> fcluster</span></span>
<span class="line"><span style="color:#ADBAC7;">labels </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> fcluster(mergings, </span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">criterion</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;distance&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">df </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pd.DataFrame({</span><span style="color:#96D0FF;">&#39;labels&#39;</span><span style="color:#ADBAC7;">: labels, </span><span style="color:#96D0FF;">&#39;varieties&#39;</span><span style="color:#ADBAC7;">: varieties})</span></span>
<span class="line"><span style="color:#ADBAC7;">ct </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pd.crosstab(df[</span><span style="color:#96D0FF;">&#39;labels&#39;</span><span style="color:#ADBAC7;">], df[</span><span style="color:#96D0FF;">&#39;varieties&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">ct</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#得到标签结果</span></span>
<span class="line"><span style="color:#6A737D;">#maximum height自己指定</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> scipy.cluster.hierarchy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fcluster</span></span>
<span class="line"><span style="color:#24292E;">labels </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fcluster(mergings, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#E36209;">criterion</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;distance&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.DataFrame({</span><span style="color:#032F62;">&#39;labels&#39;</span><span style="color:#24292E;">: labels, </span><span style="color:#032F62;">&#39;varieties&#39;</span><span style="color:#24292E;">: varieties})</span></span>
<span class="line"><span style="color:#24292E;">ct </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.crosstab(df[</span><span style="color:#032F62;">&#39;labels&#39;</span><span style="color:#24292E;">], df[</span><span style="color:#032F62;">&#39;varieties&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">ct</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 不同距离的选择会产生不同的结果</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> pandas </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> pd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">scores_df </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pd.read_csv(</span><span style="color:#96D0FF;">&#39;./datasets/eurovision-2016-televoting.csv&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">index_col</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">country_names </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">list</span><span style="color:#ADBAC7;">(scores_df.index)</span></span>
<span class="line"><span style="color:#ADBAC7;">scores_df.head()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">#缺失值填充，没有的就先按满分算吧</span></span>
<span class="line"><span style="color:#ADBAC7;">scores_df </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> scores_df.fillna(</span><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.preprocessing </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> normalize</span></span>
<span class="line"><span style="color:#ADBAC7;">samples </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> normalize(scores_df.values)</span></span>
<span class="line"><span style="color:#ADBAC7;">samples</span></span>
<span class="line"><span style="color:#ADBAC7;">array([[ </span><span style="color:#6CB6FF;">0.09449112</span><span style="color:#ADBAC7;">,  </span><span style="color:#6CB6FF;">0.56694671</span><span style="color:#ADBAC7;">,  </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">.        , </span><span style="color:#6CB6FF;">...</span><span style="color:#ADBAC7;">,  </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">.        ,</span></span>
<span class="line"><span style="color:#ADBAC7;">         </span><span style="color:#6CB6FF;">0.28347335</span><span style="color:#ADBAC7;">,  </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">.        ],</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> scipy.cluster.hierarchy </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> linkage, dendrogram</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> matplotlib.pyplot </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">mergings = linkage(samples, </span><span style="color:#F69D50;">method</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;single&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">fig = plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">dendrogram(mergings,</span></span>
<span class="line"><span style="color:#ADBAC7;">           </span><span style="color:#F69D50;">labels</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">country_names,</span></span>
<span class="line"><span style="color:#ADBAC7;">           </span><span style="color:#F69D50;">leaf_rotation</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">90</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">           </span><span style="color:#F69D50;">leaf_font_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 不同距离的选择会产生不同的结果</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pandas </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">scores_df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.read_csv(</span><span style="color:#032F62;">&#39;./datasets/eurovision-2016-televoting.csv&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index_col</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">country_names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(scores_df.index)</span></span>
<span class="line"><span style="color:#24292E;">scores_df.head()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#缺失值填充，没有的就先按满分算吧</span></span>
<span class="line"><span style="color:#24292E;">scores_df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scores_df.fillna(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.preprocessing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> normalize</span></span>
<span class="line"><span style="color:#24292E;">samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> normalize(scores_df.values)</span></span>
<span class="line"><span style="color:#24292E;">samples</span></span>
<span class="line"><span style="color:#24292E;">array([[ </span><span style="color:#005CC5;">0.09449112</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0.56694671</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.        , </span><span style="color:#005CC5;">...</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.        ,</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">0.28347335</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.        ],</span></span>
<span class="line"><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> scipy.cluster.hierarchy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> linkage, dendrogram</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> matplotlib.pyplot </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mergings = linkage(samples, </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;single&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">fig = plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">dendrogram(mergings,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#E36209;">labels</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">country_names,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#E36209;">leaf_rotation</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">90</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#E36209;">leaf_font_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/python/math/%E8%81%9A%E7%B1%BB6.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">mergings </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> linkage(samples, </span><span style="color:#F69D50;">method</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;complete&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">fig </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">dendrogram(mergings,</span></span>
<span class="line"><span style="color:#ADBAC7;">           </span><span style="color:#F69D50;">labels</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">country_names,</span></span>
<span class="line"><span style="color:#ADBAC7;">           </span><span style="color:#F69D50;">leaf_rotation</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">90</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">           </span><span style="color:#F69D50;">leaf_font_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mergings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> linkage(samples, </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;complete&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">fig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">dendrogram(mergings,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#E36209;">labels</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">country_names,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#E36209;">leaf_rotation</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">90</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#E36209;">leaf_font_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/python/math/%E8%81%9A%E7%B1%BB7.png" alt=""></p><h3 id="_4-kmeans概述" tabindex="-1">4. Kmeans概述 <a class="header-anchor" href="#_4-kmeans概述" aria-label="Permalink to &quot;4. Kmeans概述&quot;">​</a></h3><h3 id="_5-kmeans工作流程" tabindex="-1">5. Kmeans工作流程 <a class="header-anchor" href="#_5-kmeans工作流程" aria-label="Permalink to &quot;5. Kmeans工作流程&quot;">​</a></h3><h3 id="_6-kmeans可视化展示" tabindex="-1">6. Kmeans可视化展示 <a class="header-anchor" href="#_6-kmeans可视化展示" aria-label="Permalink to &quot;6. Kmeans可视化展示&quot;">​</a></h3><h3 id="_7-dbscan聚类算法" tabindex="-1">7. DBSCAN聚类算法 <a class="header-anchor" href="#_7-dbscan聚类算法" aria-label="Permalink to &quot;7. DBSCAN聚类算法&quot;">​</a></h3><h3 id="_8-dbscan工作流程" tabindex="-1">8. DBSCAN工作流程 <a class="header-anchor" href="#_8-dbscan工作流程" aria-label="Permalink to &quot;8. DBSCAN工作流程&quot;">​</a></h3><h3 id="_9-dbscan可视化展示" tabindex="-1">9. DBSCAN可视化展示 <a class="header-anchor" href="#_9-dbscan可视化展示" aria-label="Permalink to &quot;9. DBSCAN可视化展示&quot;">​</a></h3><h3 id="_10-多种聚类算法概述" tabindex="-1">10. 多种聚类算法概述 <a class="header-anchor" href="#_10-多种聚类算法概述" aria-label="Permalink to &quot;10. 多种聚类算法概述&quot;">​</a></h3><h3 id="_11-案例-聚类" tabindex="-1">11. 案例 聚类 <a class="header-anchor" href="#_11-案例-聚类" aria-label="Permalink to &quot;11. 案例 聚类&quot;">​</a></h3>`,27);function F(s,E,u,b,f,_){const o=c,e=C("ClientOnly");return l(),r("div",null,[m,i(e,null,{default:y(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),g(o,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),B])}const x=t(h,[["render",F]]);export{q as __pageData,x as default};
