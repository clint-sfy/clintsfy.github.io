import{_ as e}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as c,v as l,b as r,t as y,O as A,F as p,L as D,R as i,M as C,C as B,B as E}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const w=JSON.parse('{"title":"图论","description":"","frontmatter":{"title":"图论","author":"阿源","date":"2023/03/15 12:00","categories":["数据结构与算法"],"tags":["数据结构与算法","图论"]},"headers":[],"relativePath":"courses/algorithm/01-左程云算法基础/15-图.md","filePath":"courses/algorithm/01-左程云算法基础/15-图.md","lastUpdated":1691397650000}'),F={name:"courses/algorithm/01-左程云算法基础/15-图.md"},d=p("h1",{id:"图论",tabindex:"-1"},[D("图论 "),p("a",{class:"header-anchor",href:"#图论","aria-label":'Permalink to "图论"'},"​")],-1),u=i(`<h2 id="图论的常用类" tabindex="-1">图论的常用类 <a class="header-anchor" href="#图论的常用类" aria-label="Permalink to &quot;图论的常用类&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Node</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value;</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">in;</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">out;</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> ArrayList</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">nexts;</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> ArrayList</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Edge</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">edges;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">value</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.value </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> value;</span></span>
<span class="line"><span style="color:#ADBAC7;">		in </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		out </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		nexts </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		edges </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> in;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> out;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; nexts;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">Edge</span><span style="color:#24292E;">&gt; edges;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">		in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		nexts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		edges </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Edge</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">weight;</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">from;</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">to;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Edge</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">weight</span><span style="color:#ADBAC7;">, Node </span><span style="color:#F69D50;">from</span><span style="color:#ADBAC7;">, Node </span><span style="color:#F69D50;">to</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.weight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> weight;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.from </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> from;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.to </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> to;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Edge</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> weight;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node from;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node to;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Edge</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">weight</span><span style="color:#24292E;">, Node </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, Node </span><span style="color:#E36209;">to</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.weight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> weight;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.from </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> from;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> to;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Graph</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">nodes;</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> HashSet</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Edge</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">edges;</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Graph</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">		nodes </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		edges </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Graph</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; nodes;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> HashSet&lt;</span><span style="color:#D73A49;">Edge</span><span style="color:#24292E;">&gt; edges;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Graph</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		nodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		edges </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_1-bfs" tabindex="-1">1. BFS <a class="header-anchor" href="#_1-bfs" aria-label="Permalink to &quot;1. BFS&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">bfs</span><span style="color:#ADBAC7;">(Node start) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (start </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Queue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">queue</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 防止有环</span></span>
<span class="line"><span style="color:#ADBAC7;">		HashSet</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">set</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(start);</span></span>
<span class="line"><span style="color:#ADBAC7;">		set.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(start);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">queue.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> queue.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(cur.value);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">next</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> cur.nexts) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">set.</span><span style="color:#DCBDFB;">contains</span><span style="color:#ADBAC7;">(next)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					set.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(next);</span></span>
<span class="line"><span style="color:#ADBAC7;">					queue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(next);</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bfs</span><span style="color:#24292E;">(Node start) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (start </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Queue&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 防止有环</span></span>
<span class="line"><span style="color:#24292E;">		HashSet&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(start);</span></span>
<span class="line"><span style="color:#24292E;">		set.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(start);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">			Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(cur.value);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node next </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cur.nexts) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(next)) {</span></span>
<span class="line"><span style="color:#24292E;">					set.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(next);</span></span>
<span class="line"><span style="color:#24292E;">					queue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(next);</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_2-dfs" tabindex="-1">2. DFS <a class="header-anchor" href="#_2-dfs" aria-label="Permalink to &quot;2. DFS&quot;">​</a></h2><div class="language-JAVA vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">dfs</span><span style="color:#ADBAC7;">(Node node) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (node </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 栈中始终存放着遍历顺序</span></span>
<span class="line"><span style="color:#ADBAC7;">		Stack</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">stack</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		HashSet</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">set</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		stack.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(node);</span></span>
<span class="line"><span style="color:#ADBAC7;">		set.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(node);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 入栈就打印</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(node.value);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">stack.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> stack.</span><span style="color:#DCBDFB;">pop</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">next</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> cur.nexts) { </span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">set.</span><span style="color:#DCBDFB;">contains</span><span style="color:#ADBAC7;">(next)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					stack.</span><span style="color:#DCBDFB;">push</span><span style="color:#ADBAC7;">(cur);</span></span>
<span class="line"><span style="color:#ADBAC7;">					stack.</span><span style="color:#DCBDFB;">push</span><span style="color:#ADBAC7;">(next);</span></span>
<span class="line"><span style="color:#ADBAC7;">					set.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(next);</span></span>
<span class="line"><span style="color:#ADBAC7;">					System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(next.value);</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">break</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(Node node) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 栈中始终存放着遍历顺序</span></span>
<span class="line"><span style="color:#24292E;">		Stack&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; stack </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		HashSet&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		stack.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(node);</span></span>
<span class="line"><span style="color:#24292E;">		set.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(node);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 入栈就打印</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(node.value);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">stack.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">			Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node next </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cur.nexts) { </span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(next)) {</span></span>
<span class="line"><span style="color:#24292E;">					stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(cur);</span></span>
<span class="line"><span style="color:#24292E;">					stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(next);</span></span>
<span class="line"><span style="color:#24292E;">					set.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(next);</span></span>
<span class="line"><span style="color:#24292E;">					System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(next.value);</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_3-拓扑排序" tabindex="-1">3. 拓扑排序 <a class="header-anchor" href="#_3-拓扑排序" aria-label="Permalink to &quot;3. 拓扑排序&quot;">​</a></h2><p>1)在图中找到所有入度为0的点输出 2)把所有入度为0的点在图中删掉，继续找入度为0的点输出，周而复始 3)图的所有点都被删除后，依次输出的顺序就是拓扑排序 要求:有向图且其中没有环 应用:事件安排、编译顺序</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> List</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Node</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sortedTopology</span><span style="color:#ADBAC7;">(Graph graph) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// key 某个节点   value 剩余的入度</span></span>
<span class="line"><span style="color:#ADBAC7;">		HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">inMap</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// 只有剩余入度为0的点，才进入这个队列</span></span>
<span class="line"><span style="color:#ADBAC7;">		Queue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">zeroInQueue</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">node</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> graph.nodes.</span><span style="color:#DCBDFB;">values</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			inMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(node, node.in);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (node.in </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				zeroInQueue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(node);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		List</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">result</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">zeroInQueue.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> zeroInQueue.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			result.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(cur);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">next</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> cur.nexts) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;">// 相邻节点入度 - 1</span></span>
<span class="line"><span style="color:#ADBAC7;">				inMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(next, inMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(next) </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (inMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(next) </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					zeroInQueue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(next);</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Node</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sortedTopology</span><span style="color:#24292E;">(Graph graph) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// key 某个节点   value 剩余的入度</span></span>
<span class="line"><span style="color:#24292E;">		HashMap&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; inMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 只有剩余入度为0的点，才进入这个队列</span></span>
<span class="line"><span style="color:#24292E;">		Queue&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; zeroInQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node node </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> graph.nodes.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">			inMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(node, node.in);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node.in </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				zeroInQueue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(node);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		List&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">zeroInQueue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">			Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zeroInQueue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cur);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node next </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cur.nexts) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 相邻节点入度 - 1</span></span>
<span class="line"><span style="color:#24292E;">				inMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(next, inMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(next) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (inMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(next) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					zeroInQueue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(next);</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="_3-1-题目一" tabindex="-1">3.1 题目一 <a class="header-anchor" href="#_3-1-题目一" aria-label="Permalink to &quot;3.1 题目一&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">DirectedGraphNode</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">label;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> ArrayList</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">DirectedGraphNode</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">neighbors;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">DirectedGraphNode</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">x</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			label </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> x;</span></span>
<span class="line"><span style="color:#ADBAC7;">			neighbors </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> ArrayList&lt;</span><span style="color:#F47067;">DirectedGraphNode</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DirectedGraphNode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> label;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">DirectedGraphNode</span><span style="color:#24292E;">&gt; neighbors;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DirectedGraphNode</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">			neighbors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">DirectedGraphNode</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 一个缓存</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Record</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> DirectedGraphNode</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">node;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">deep;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Record</span><span style="color:#ADBAC7;">(DirectedGraphNode </span><span style="color:#F69D50;">n</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">o</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			node </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> n;</span></span>
<span class="line"><span style="color:#ADBAC7;">			deep </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> o;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyComparator</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Comparator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Record</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">		@</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">compare</span><span style="color:#ADBAC7;">(Record </span><span style="color:#F69D50;">o1</span><span style="color:#ADBAC7;">, Record </span><span style="color:#F69D50;">o2</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> o2.deep </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> o1.deep;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 一个缓存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Record</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DirectedGraphNode node;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> deep;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Record</span><span style="color:#24292E;">(DirectedGraphNode </span><span style="color:#E36209;">n</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">			deep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> o;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyComparator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Record</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Record </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Record </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o2.deep </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o1.deep;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 当前来到cur点  返回cur所有的点次</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Record </span><span style="color:#DCBDFB;">f</span><span style="color:#ADBAC7;">(DirectedGraphNode cur, HashMap</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">DirectedGraphNode, Record</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> order) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (order.</span><span style="color:#DCBDFB;">containsKey</span><span style="color:#ADBAC7;">(cur)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> order.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(cur);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">follow</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (DirectedGraphNode</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">next</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> cur.neighbors) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			follow </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">max</span><span style="color:#ADBAC7;">(follow, </span><span style="color:#DCBDFB;">f</span><span style="color:#ADBAC7;">(next, order).deep);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Record</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">ans</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Record</span><span style="color:#ADBAC7;">(cur, follow </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">		order.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(cur, ans);</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ans;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 当前来到cur点  返回cur所有的点次</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Record </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(DirectedGraphNode cur, HashMap</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">DirectedGraphNode, Record</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> order) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (order.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(cur)) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(cur);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> follow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (DirectedGraphNode next </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cur.neighbors) {</span></span>
<span class="line"><span style="color:#24292E;">			follow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(follow, </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(next, order).deep);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Record ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Record</span><span style="color:#24292E;">(cur, follow </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		order.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(cur, ans);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> ArrayList</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">DirectedGraphNode</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">topSort</span><span style="color:#ADBAC7;">(ArrayList</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">DirectedGraphNode</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> graph) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">DirectedGraphNode</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Record</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">order</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (DirectedGraphNode</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> graph) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#DCBDFB;">f</span><span style="color:#ADBAC7;">(cur, order);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		ArrayList</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Record</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">recordArr</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Record</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">r</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> order.</span><span style="color:#DCBDFB;">values</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			recordArr.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(r);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		recordArr.</span><span style="color:#DCBDFB;">sort</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">MyComparator</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">		ArrayList</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">DirectedGraphNode</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">ans</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> ArrayList&lt;</span><span style="color:#F47067;">DirectedGraphNode</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Record</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">r</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> recordArr) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			ans.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(r.node);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ans;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ArrayList</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">DirectedGraphNode</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">topSort</span><span style="color:#24292E;">(ArrayList</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">DirectedGraphNode</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> graph) {</span></span>
<span class="line"><span style="color:#24292E;">		HashMap&lt;</span><span style="color:#D73A49;">DirectedGraphNode</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Record</span><span style="color:#24292E;">&gt; order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (DirectedGraphNode cur </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> graph) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(cur, order);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		ArrayList&lt;</span><span style="color:#D73A49;">Record</span><span style="color:#24292E;">&gt; recordArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Record r </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> order.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">			recordArr.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(r);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		recordArr.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyComparator</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		ArrayList&lt;</span><span style="color:#D73A49;">DirectedGraphNode</span><span style="color:#24292E;">&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">DirectedGraphNode</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Record r </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> recordArr) {</span></span>
<span class="line"><span style="color:#24292E;">			ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(r.node);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_4-kruskal" tabindex="-1">4. Kruskal <a class="header-anchor" href="#_4-kruskal" aria-label="Permalink to &quot;4. Kruskal&quot;">​</a></h2><p>每次选最小权重那条边</p><p>为最小生成树（用并查集）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">UnionFind</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// key 某一个节点， value key节点往上的节点</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">fatherMap;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// key 某一个集合的代表节点, value key所在集合的节点个数</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> HashMap</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">sizeMap;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">UnionFind</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">			fatherMap </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashMap&lt;</span><span style="color:#F47067;">Node</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">Node</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">			sizeMap </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashMap&lt;</span><span style="color:#F47067;">Node</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">Integer</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">makeSets</span><span style="color:#ADBAC7;">(Collection&lt;</span><span style="color:#F47067;">Node</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">nodes</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			fatherMap.</span><span style="color:#DCBDFB;">clear</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			sizeMap.</span><span style="color:#DCBDFB;">clear</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">node</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> nodes) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				fatherMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(node, node);</span></span>
<span class="line"><span style="color:#ADBAC7;">				sizeMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(node, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">findFather</span><span style="color:#ADBAC7;">(Node </span><span style="color:#F69D50;">n</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			Stack</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">path</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;">(n </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> fatherMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(n)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				path.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(n);</span></span>
<span class="line"><span style="color:#ADBAC7;">				n </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> fatherMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(n);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">path.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				fatherMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(path.</span><span style="color:#DCBDFB;">pop</span><span style="color:#ADBAC7;">(), n);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> n;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">isSameSet</span><span style="color:#ADBAC7;">(Node </span><span style="color:#F69D50;">a</span><span style="color:#ADBAC7;">, Node </span><span style="color:#F69D50;">b</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">findFather</span><span style="color:#ADBAC7;">(a) </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">findFather</span><span style="color:#ADBAC7;">(b);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">union</span><span style="color:#ADBAC7;">(Node </span><span style="color:#F69D50;">a</span><span style="color:#ADBAC7;">, Node </span><span style="color:#F69D50;">b</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (a </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> b </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">aDai</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">findFather</span><span style="color:#ADBAC7;">(a);</span></span>
<span class="line"><span style="color:#ADBAC7;">			Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">bDai</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">findFather</span><span style="color:#ADBAC7;">(b);</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (aDai </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> bDai) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">aSetSize</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> sizeMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(aDai);</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">bSetSize</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> sizeMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(bDai);</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (aSetSize </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> bSetSize) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					fatherMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(aDai, bDai);</span></span>
<span class="line"><span style="color:#ADBAC7;">					sizeMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(bDai, aSetSize </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> bSetSize);</span></span>
<span class="line"><span style="color:#ADBAC7;">					sizeMap.</span><span style="color:#DCBDFB;">remove</span><span style="color:#ADBAC7;">(aDai);</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">					fatherMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(bDai, aDai);</span></span>
<span class="line"><span style="color:#ADBAC7;">					sizeMap.</span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(aDai, aSetSize </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> bSetSize);</span></span>
<span class="line"><span style="color:#ADBAC7;">					sizeMap.</span><span style="color:#DCBDFB;">remove</span><span style="color:#ADBAC7;">(bDai);</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnionFind</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// key 某一个节点， value key节点往上的节点</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; fatherMap;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// key 某一个集合的代表节点, value key所在集合的节点个数</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; sizeMap;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnionFind</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			fatherMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">			sizeMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeSets</span><span style="color:#24292E;">(Collection&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">nodes</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			fatherMap.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			sizeMap.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node node </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nodes) {</span></span>
<span class="line"><span style="color:#24292E;">				fatherMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(node, node);</span></span>
<span class="line"><span style="color:#24292E;">				sizeMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(node, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">findFather</span><span style="color:#24292E;">(Node </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			Stack&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> fatherMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(n)) {</span></span>
<span class="line"><span style="color:#24292E;">				path.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(n);</span></span>
<span class="line"><span style="color:#24292E;">				n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fatherMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(n);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">				fatherMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(), n);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isSameSet</span><span style="color:#24292E;">(Node </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, Node </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findFather</span><span style="color:#24292E;">(a) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findFather</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">union</span><span style="color:#24292E;">(Node </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, Node </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			Node aDai </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findFather</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#24292E;">			Node bDai </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findFather</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (aDai </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> bDai) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> aSetSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sizeMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(aDai);</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> bSetSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sizeMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(bDai);</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (aSetSize </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> bSetSize) {</span></span>
<span class="line"><span style="color:#24292E;">					fatherMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(aDai, bDai);</span></span>
<span class="line"><span style="color:#24292E;">					sizeMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(bDai, aSetSize </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> bSetSize);</span></span>
<span class="line"><span style="color:#24292E;">					sizeMap.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(aDai);</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					fatherMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(bDai, aDai);</span></span>
<span class="line"><span style="color:#24292E;">					sizeMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(aDai, aSetSize </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> bSetSize);</span></span>
<span class="line"><span style="color:#24292E;">					sizeMap.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(bDai);</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">EdgeComparator</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Comparator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Edge</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		@</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">compare</span><span style="color:#ADBAC7;">(Edge </span><span style="color:#F69D50;">o1</span><span style="color:#ADBAC7;">, Edge </span><span style="color:#F69D50;">o2</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> o1.weight </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> o2.weight;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Set</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Edge</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">kruskalMST</span><span style="color:#ADBAC7;">(Graph graph) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		UnionFind</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">unionFind</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">UnionFind</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">		unionFind.</span><span style="color:#DCBDFB;">makeSets</span><span style="color:#ADBAC7;">(graph.nodes.</span><span style="color:#DCBDFB;">values</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// 从小的边到大的边，依次弹出，小根堆！</span></span>
<span class="line"><span style="color:#ADBAC7;">		PriorityQueue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Edge</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">priorityQueue</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> PriorityQueue&lt;&gt;(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">EdgeComparator</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Edge</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">edge</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> graph.edges) { </span><span style="color:#768390;">// M 条边</span></span>
<span class="line"><span style="color:#ADBAC7;">			priorityQueue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(edge);  </span><span style="color:#768390;">// O(logM)</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Set</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Edge</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">result</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">priorityQueue.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) { </span><span style="color:#768390;">// M 条边</span></span>
<span class="line"><span style="color:#ADBAC7;">			Edge</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">edge</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> priorityQueue.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// O(logM)</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">unionFind.</span><span style="color:#DCBDFB;">isSameSet</span><span style="color:#ADBAC7;">(edge.from, edge.to)) { </span><span style="color:#768390;">// O(1)</span></span>
<span class="line"><span style="color:#ADBAC7;">				result.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(edge);</span></span>
<span class="line"><span style="color:#ADBAC7;">				unionFind.</span><span style="color:#DCBDFB;">union</span><span style="color:#ADBAC7;">(edge.from, edge.to);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EdgeComparator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Edge</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Edge </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Edge </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o1.weight </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o2.weight;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Edge</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kruskalMST</span><span style="color:#24292E;">(Graph graph) {</span></span>
<span class="line"><span style="color:#24292E;">		UnionFind unionFind </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnionFind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		unionFind.</span><span style="color:#6F42C1;">makeSets</span><span style="color:#24292E;">(graph.nodes.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 从小的边到大的边，依次弹出，小根堆！</span></span>
<span class="line"><span style="color:#24292E;">		PriorityQueue&lt;</span><span style="color:#D73A49;">Edge</span><span style="color:#24292E;">&gt; priorityQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> PriorityQueue&lt;&gt;(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EdgeComparator</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Edge edge </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> graph.edges) { </span><span style="color:#6A737D;">// M 条边</span></span>
<span class="line"><span style="color:#24292E;">			priorityQueue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(edge);  </span><span style="color:#6A737D;">// O(logM)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Set&lt;</span><span style="color:#D73A49;">Edge</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">priorityQueue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// M 条边</span></span>
<span class="line"><span style="color:#24292E;">			Edge edge </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> priorityQueue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// O(logM)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">unionFind.</span><span style="color:#6F42C1;">isSameSet</span><span style="color:#24292E;">(edge.from, edge.to)) { </span><span style="color:#6A737D;">// O(1)</span></span>
<span class="line"><span style="color:#24292E;">				result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(edge);</span></span>
<span class="line"><span style="color:#24292E;">				unionFind.</span><span style="color:#6F42C1;">union</span><span style="color:#24292E;">(edge.from, edge.to);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_5-prim" tabindex="-1">5. Prim <a class="header-anchor" href="#_5-prim" aria-label="Permalink to &quot;5. Prim&quot;">​</a></h2><p>1)可以从任意节点出发来寻找最小生成树 2)某个点加入到被选取的点中后，解锁这个点出发的所有新的边 3)在所有解锁的边中选最小的边，然后看看这个边会不会形成环 4)如果会，不要当前边，继续考察剩下解锁的边中最小的边，重复3) 5)如果不会，要当前边，将该边的指向点加入到被选取的点中，重复2) 6)当所有点都被选取，最小生成树就得到了</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">EdgeComparator</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Comparator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Edge</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		@</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">compare</span><span style="color:#ADBAC7;">(Edge </span><span style="color:#F69D50;">o1</span><span style="color:#ADBAC7;">, Edge </span><span style="color:#F69D50;">o2</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> o1.weight </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> o2.weight;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Set</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Edge</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">primMST</span><span style="color:#ADBAC7;">(Graph graph) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// 解锁的边进入小根堆</span></span>
<span class="line"><span style="color:#ADBAC7;">		PriorityQueue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Edge</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">priorityQueue</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> PriorityQueue&lt;&gt;(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">EdgeComparator</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// 哪些点被解锁出来了</span></span>
<span class="line"><span style="color:#ADBAC7;">		HashSet</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Node</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">nodeSet</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span></span>
<span class="line"><span style="color:#ADBAC7;">		Set</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Edge</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">result</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashSet&lt;&gt;(); </span><span style="color:#768390;">// 依次挑选的的边在result里</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">node</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> graph.nodes.</span><span style="color:#DCBDFB;">values</span><span style="color:#ADBAC7;">()) { </span><span style="color:#768390;">// 随便挑了一个点</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// node 是开始点</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">nodeSet.</span><span style="color:#DCBDFB;">contains</span><span style="color:#ADBAC7;">(node)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				nodeSet.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(node);</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Edge</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">edge</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> node.edges) { </span><span style="color:#768390;">// 由一个点，解锁所有相连的边</span></span>
<span class="line"><span style="color:#ADBAC7;">					priorityQueue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(edge);</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">priorityQueue.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					Edge</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">edge</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> priorityQueue.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">(); </span><span style="color:#768390;">// 弹出解锁的边中，最小的边</span></span>
<span class="line"><span style="color:#ADBAC7;">					Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">toNode</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> edge.to; </span><span style="color:#768390;">// 可能的一个新的点</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">nodeSet.</span><span style="color:#DCBDFB;">contains</span><span style="color:#ADBAC7;">(toNode)) { </span><span style="color:#768390;">// 不含有的时候，就是新的点</span></span>
<span class="line"><span style="color:#ADBAC7;">						nodeSet.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(toNode);</span></span>
<span class="line"><span style="color:#ADBAC7;">						result.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(edge);</span></span>
<span class="line"><span style="color:#ADBAC7;">						</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (Edge</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">nextEdge</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> toNode.edges) {</span></span>
<span class="line"><span style="color:#ADBAC7;">							priorityQueue.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(nextEdge);</span></span>
<span class="line"><span style="color:#ADBAC7;">						}</span></span>
<span class="line"><span style="color:#ADBAC7;">					}</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#768390;">// break;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EdgeComparator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Edge</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Edge </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Edge </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o1.weight </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o2.weight;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Edge</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">primMST</span><span style="color:#24292E;">(Graph graph) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 解锁的边进入小根堆</span></span>
<span class="line"><span style="color:#24292E;">		PriorityQueue&lt;</span><span style="color:#D73A49;">Edge</span><span style="color:#24292E;">&gt; priorityQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> PriorityQueue&lt;&gt;(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EdgeComparator</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 哪些点被解锁出来了</span></span>
<span class="line"><span style="color:#24292E;">		HashSet&lt;</span><span style="color:#D73A49;">Node</span><span style="color:#24292E;">&gt; nodeSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		Set&lt;</span><span style="color:#D73A49;">Edge</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;(); </span><span style="color:#6A737D;">// 依次挑选的的边在result里</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node node </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> graph.nodes.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 随便挑了一个点</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// node 是开始点</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">nodeSet.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(node)) {</span></span>
<span class="line"><span style="color:#24292E;">				nodeSet.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(node);</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Edge edge </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> node.edges) { </span><span style="color:#6A737D;">// 由一个点，解锁所有相连的边</span></span>
<span class="line"><span style="color:#24292E;">					priorityQueue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(edge);</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">priorityQueue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">					Edge edge </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> priorityQueue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 弹出解锁的边中，最小的边</span></span>
<span class="line"><span style="color:#24292E;">					Node toNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> edge.to; </span><span style="color:#6A737D;">// 可能的一个新的点</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">nodeSet.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(toNode)) { </span><span style="color:#6A737D;">// 不含有的时候，就是新的点</span></span>
<span class="line"><span style="color:#24292E;">						nodeSet.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(toNode);</span></span>
<span class="line"><span style="color:#24292E;">						result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(edge);</span></span>
<span class="line"><span style="color:#24292E;">						</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Edge nextEdge </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> toNode.edges) {</span></span>
<span class="line"><span style="color:#24292E;">							priorityQueue.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(nextEdge);</span></span>
<span class="line"><span style="color:#24292E;">						}</span></span>
<span class="line"><span style="color:#24292E;">					}</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// break;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_5-dijkstra" tabindex="-1">5. Dijkstra <a class="header-anchor" href="#_5-dijkstra" aria-label="Permalink to &quot;5. Dijkstra&quot;">​</a></h2>`,25);function g(s,h,b,v,m,f){const o=e,t=C("ClientOnly");return l(),r("div",null,[d,y(t,null,{default:A(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):E("",!0)]}),_:1}),u])}const M=c(F,[["render",g]]);export{w as __pageData,M as default};
