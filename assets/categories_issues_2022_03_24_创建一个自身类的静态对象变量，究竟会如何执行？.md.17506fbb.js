import{_ as t}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as c,v as l,b as r,t as y,O as i,F as p,L as A,R as D,M as C,C as B,B as u}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const T=JSON.parse('{"title":"创建一个自身类的静态对象变量，究竟会如何执行？","description":"","frontmatter":{"title":"创建一个自身类的静态对象变量，究竟会如何执行？","author":"查尔斯","date":"2022/03/24 21:30","isOriginal":false,"categories":["Bug万象集"],"tags":["Java","JVM"]},"headers":[],"relativePath":"categories/issues/2022/03/24/创建一个自身类的静态对象变量，究竟会如何执行？.md","filePath":"categories/issues/2022/03/24/创建一个自身类的静态对象变量，究竟会如何执行？.md","lastUpdated":1691397650000}'),g={name:"categories/issues/2022/03/24/创建一个自身类的静态对象变量，究竟会如何执行？.md"},F=p("h1",{id:"创建一个自身类的静态对象变量-究竟会如何执行",tabindex:"-1"},[A("创建一个自身类的静态对象变量，究竟会如何执行？ "),p("a",{class:"header-anchor",href:"#创建一个自身类的静态对象变量-究竟会如何执行","aria-label":'Permalink to "创建一个自身类的静态对象变量，究竟会如何执行？"'},"​")],-1),E=D(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><strong>C：</strong> 近两周在疯狂给项目组面试招聘，昨天晚上10点多，产品总监在面试群里发了一道题，问运行结果是什么，题目如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Singleton</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Singleton</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">singleton</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Singleton</span><span style="color:#ADBAC7;">();</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">count1;</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">count2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Singleton</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        count1</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        count2</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Singleton </span><span style="color:#DCBDFB;">getInstance</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> singleton;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Test</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] </span><span style="color:#F69D50;">args</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        Singleton</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">singleTon</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Singleton.</span><span style="color:#DCBDFB;">getInstance</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">        System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;count1=&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> singleTon.count1);</span></span>
<span class="line"><span style="color:#ADBAC7;">        System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;count2=&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> singleTon.count2);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Singleton</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Singleton singleton </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Singleton</span><span style="color:#24292E;">();</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count1;</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Singleton</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        count1</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        count2</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Singleton </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> singleton;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Singleton singleTon </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Singleton.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;count1=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> singleTon.count1);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;count2=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> singleTon.count2);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这激起了我们几个干技术的热情，那就分析一下吧。</p><h2 id="简单分析" tabindex="-1">简单分析 <a class="header-anchor" href="#简单分析" aria-label="Permalink to &quot;简单分析&quot;">​</a></h2><p>1、简单看了下题目，这不是一个采用了饿汉式单例模式的单例类嘛，接下来当然是去找程序入口了。</p><p>2、在 Test 类的 main 方法中，首先调用了 Singleton 类的 getInstance() 方法，很显然这是要获取 Singleton 这个单例类的唯一对象（实例）了。</p><p>3、然后在获取到唯一对象（实例）之后，输出了 Singleton 类的两个静态成员变量 count1、count2 的值。（虽然通过对象名调用静态信息这种方式不推荐，但是对结果没有影响）</p><p>4、看到这儿，两个类里也没别的地方有输出语句，所以最终运行结果就是要看看 count1、count2 的输出值了。</p><p>5、<strong>重点来了：</strong> 在调用 getInstance() 方法前，由于 Singleton 类没有加载，所以肯定要先加载类，由于 count1、count2、Singleton 的唯一对象（实例）都是静态的，所以它们会随着类的加载而加载。其中 int 类型的 count1 变量没有指定初始值，那默认值就是 0，count2 指定了初始值是 3， Singleton 类的唯一对象（实例）要创建会调用构造方法，构造方法里又对 count1 和 count2 进行了自增 1 的运算，那结果自然就是 count1 是 1，count2 是 4。</p><p>这么一顿火花带闪电的分析后，自信的将答案发到了群里。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">count1=1</span></span>
<span class="line"><span style="color:#adbac7;">count2=4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">count1=1</span></span>
<span class="line"><span style="color:#24292e;">count2=4</span></span></code></pre></div><h2 id="深度分析" tabindex="-1">深度分析 <a class="header-anchor" href="#深度分析" aria-label="Permalink to &quot;深度分析&quot;">​</a></h2><p>很显然答错了，不然也不会单独记录了。之所以答错了，是因为忽略了静态信息的加载顺序，静态信息的加载顺序是由编码顺序决定的，上方分析中先入为主的把 count1 和 count2 加载完了，但实际上最先执行的是 Singleton 的唯一对象（实例）创建及变量赋值，随后才是执行 count1、count2。</p><p>我们可以通过 <code>javap -c Singleton.class</code> 反汇编一下字节码文件，反汇编后的 JVM 指令如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">Compiled from </span><span style="color:#96D0FF;">&quot;Test.java&quot;</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">org</span><span style="color:#ADBAC7;">.example.Singleton {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">count1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">count2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> org.example.Singleton </span><span style="color:#DCBDFB;">getInstance</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    Code</span><span style="color:#F47067;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 获取 singleton 静态对象变量，并将其值压入栈顶</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">0</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> get</span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;">     #</span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">                  </span><span style="color:#768390;">// Field singleton:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 从当前方法返回 singleton 对象引用</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">3</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> areturn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> {};</span></span>
<span class="line"><span style="color:#ADBAC7;">    Code</span><span style="color:#F47067;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 1、创建 Singleton 类的对象，并赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 1.1 创建对象</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">0</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;">           #5                  </span><span style="color:#768390;">// class org/example/Singleton</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 1.2 复制栈顶数值并将复制值压入栈顶</span></span>
<span class="line"><span style="color:#ADBAC7;">       3</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> dup                        </span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 1.3 调用 Singleton 类构造方法，count1 和 count2 自增 1，此时 count1 为 1，count2 为 1</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">4</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> invokespecial #</span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">                  </span><span style="color:#768390;">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 1.4 对象创建成功将对象引用赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">7</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> put</span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;">     #</span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">                  </span><span style="color:#768390;">// Field singleTon:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// 2、将 3 赋值给 count2</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// 2.1 将 int 型 3 推送至栈顶</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#6CB6FF;">10</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> iconst_3                         </span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// 2.2 为 count2 静态变量赋值</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#6CB6FF;">11</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> put</span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;">     #</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">                  </span><span style="color:#768390;">// Field count2:I</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// 3、结束方法</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#6CB6FF;">14</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">                            </span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Compiled from </span><span style="color:#032F62;">&quot;Test.java&quot;</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">org</span><span style="color:#24292E;">.example.Singleton {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> org.example.Singleton </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 获取 singleton 静态对象变量，并将其值压入栈顶</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> get</span><span style="color:#D73A49;">static</span><span style="color:#24292E;">     #</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field singleton:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 从当前方法返回 singleton 对象引用</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> areturn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 1、创建 Singleton 类的对象，并赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 1.1 创建对象</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;">           #5                  </span><span style="color:#6A737D;">// class org/example/Singleton</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 1.2 复制栈顶数值并将复制值压入栈顶</span></span>
<span class="line"><span style="color:#24292E;">       3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dup                        </span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 1.3 调用 Singleton 类构造方法，count1 和 count2 自增 1，此时 count1 为 1，count2 为 1</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokespecial #</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 1.4 对象创建成功将对象引用赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> put</span><span style="color:#D73A49;">static</span><span style="color:#24292E;">     #</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field singleTon:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 2、将 3 赋值给 count2</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 2.1 将 int 型 3 推送至栈顶</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> iconst_3                         </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 2.2 为 count2 静态变量赋值</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> put</span><span style="color:#D73A49;">static</span><span style="color:#24292E;">     #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field count2:I</span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 3、结束方法</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">                            </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>很显然了，count2 最后是被赋值为 3 了。</p><p>正确答案就是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">count1=1</span></span>
<span class="line"><span style="color:#adbac7;">count2=3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">count1=1</span></span>
<span class="line"><span style="color:#24292e;">count2=3</span></span></code></pre></div><h2 id="额外扩展" tabindex="-1">额外扩展 <a class="header-anchor" href="#额外扩展" aria-label="Permalink to &quot;额外扩展&quot;">​</a></h2><p>那如果真的想得到之前的结果呢？</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">count1=1</span></span>
<span class="line"><span style="color:#adbac7;">count2=4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">count1=1</span></span>
<span class="line"><span style="color:#24292e;">count2=4</span></span></code></pre></div><p>只需要将 count1、count2 两个静态变量的顺序调整到 Singleton 类的唯一对象（实例）变量上方就可以了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Singleton</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">count1;</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">count2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">;</span></span>
<span class="line highlighted"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Singleton</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">singleton</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Singleton</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Singleton</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        count1</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        count2</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Singleton </span><span style="color:#DCBDFB;">getInstance</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> singleton;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Test</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] </span><span style="color:#F69D50;">args</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        Singleton</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">singleTon</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Singleton.</span><span style="color:#DCBDFB;">getInstance</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">        System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;count1=&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> singleTon.count1);</span></span>
<span class="line"><span style="color:#ADBAC7;">        System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;count2=&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> singleTon.count2);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Singleton</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count1;</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Singleton singleton </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Singleton</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Singleton</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        count1</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        count2</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Singleton </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> singleton;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Singleton singleTon </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Singleton.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;count1=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> singleTon.count1);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;count2=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> singleTon.count2);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们再次通过 <code>javap -c Singleton.class</code> 反汇编一下字节码文件，反汇编后的 JVM 指令如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">Compiled from </span><span style="color:#96D0FF;">&quot;Test.java&quot;</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">org</span><span style="color:#ADBAC7;">.example.Singleton {</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">count1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">count2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> org.example.Singleton </span><span style="color:#DCBDFB;">getInstance</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">    Code</span><span style="color:#F47067;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 获取 singleton 静态对象变量，并将其值压入栈顶</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">0</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> get</span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;">     #</span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">                  </span><span style="color:#768390;">// Field singleton:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 从当前方法返回 singleton 对象引用</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">3</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> areturn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> {};</span></span>
<span class="line"><span style="color:#ADBAC7;">    Code</span><span style="color:#F47067;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 1、将 3 赋值给 count2，count2 此时为 3</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 1.1 将 int 型 3 推送至栈顶</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">0</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> iconst_3</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 1.2 为 count2 静态变量赋值</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">1</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> put</span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;">     #</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">                  </span><span style="color:#768390;">// Field count2:I</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 2、创建 Singleton 类的对象，并赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 2.1 创建对象</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">4</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;">           #5                  </span><span style="color:#768390;">// class org/example/Singleton</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 2.2 复制栈顶数值并将复制值压入栈顶</span></span>
<span class="line"><span style="color:#ADBAC7;">       7</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> dup</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// 2.3 调用 Singleton 类构造方法，count1 和 count2 自增 1，count1 此时为 1，count2 此时为 4</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">8</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> invokespecial #</span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">                  </span><span style="color:#768390;">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// 2.4 对象创建成功将对象引用赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#6CB6FF;">11</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> put</span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;">     #</span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">                  </span><span style="color:#768390;">// Field singleTon:Lorg/example/Singleton;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#768390;">// 3、结束方法</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#6CB6FF;">14</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Compiled from </span><span style="color:#032F62;">&quot;Test.java&quot;</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">org</span><span style="color:#24292E;">.example.Singleton {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> org.example.Singleton </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 获取 singleton 静态对象变量，并将其值压入栈顶</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> get</span><span style="color:#D73A49;">static</span><span style="color:#24292E;">     #</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field singleton:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 从当前方法返回 singleton 对象引用</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> areturn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 1、将 3 赋值给 count2，count2 此时为 3</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 1.1 将 int 型 3 推送至栈顶</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> iconst_3</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 1.2 为 count2 静态变量赋值</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> put</span><span style="color:#D73A49;">static</span><span style="color:#24292E;">     #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field count2:I</span></span>
<span class="line"><span style="color:#24292E;">       </span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 2、创建 Singleton 类的对象，并赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 2.1 创建对象</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;">           #5                  </span><span style="color:#6A737D;">// class org/example/Singleton</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 2.2 复制栈顶数值并将复制值压入栈顶</span></span>
<span class="line"><span style="color:#24292E;">       7</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dup</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 2.3 调用 Singleton 类构造方法，count1 和 count2 自增 1，count1 此时为 1，count2 此时为 4</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokespecial #</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 2.4 对象创建成功将对象引用赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> put</span><span style="color:#D73A49;">static</span><span style="color:#24292E;">     #</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Field singleTon:Lorg/example/Singleton;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 3、结束方法</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>很显然了，count2 最后是被自增为 4 了。</p>`,27);function d(s,h,m,S,b,v){const o=t,e=C("ClientOnly");return l(),r("div",null,[F,y(e,null,{default:i(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):u("",!0)]}),_:1}),E])}const x=c(g,[["render",d]]);export{T as __pageData,x as default};
