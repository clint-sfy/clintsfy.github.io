import{_ as k}from"./chunks/ArticleMetadata.CDaExH3F.js";import{_ as e,C as r,c as d,o as h,k as t,G as g,P as c,a as C,w as y,b as o,e as A}from"./chunks/framework.CZWML48V.js";import"./chunks/md5.DoRRH4_b.js";const q=JSON.parse('{"title":"C++对C的扩展","description":"","frontmatter":{"title":"C++对C的扩展","author":"阿源","date":"2023/02/01 21:29","categories":["C++基础快速入门"],"tags":["C++","C++基础"]},"headers":[],"relativePath":"courses/c_plus/01-C++的基础/01-c++对c的扩展.md","filePath":"courses/c_plus/01-C++的基础/01-c++对c的扩展.md","lastUpdated":1713341239000}'),F={name:"courses/c_plus/01-C++的基础/01-c++对c的扩展.md"};function D(i,s,B,u,m,b){const l=k,p=r("ClientOnly");return h(),d("div",null,[s[0]||(s[0]=t("h1",{id:"c-对c的扩展",tabindex:"-1"},[C("C++对C的扩展 "),t("a",{class:"header-anchor",href:"#c-对c的扩展","aria-label":'Permalink to "C++对C的扩展"'},"​")],-1)),g(p,null,{default:y(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(h(),o(l,{key:0,article:i.$frontmatter},null,8,["article"])):A("",!0)]}),_:1}),s[1]||(s[1]=c(`<h2 id="c-的概述" tabindex="-1">c++的概述 <a class="header-anchor" href="#c-的概述" aria-label="Permalink to &quot;c++的概述&quot;">​</a></h2><p>c++的编程思想：面向对象、泛型编程。</p><p>面向过程（c）: 通过分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现,并调用。</p><p>面向对象(c++):算法与数据结构被看做是一个整体(对象)，程序=对象+对象+对象+对象</p><p>c++标准：c++98、c++11</p><h2 id="c-的初始" tabindex="-1">c++的初始 <a class="header-anchor" href="#c-的初始" aria-label="Permalink to &quot;c++的初始&quot;">​</a></h2><p>封装:将相同属性的数据和方法封装在一起，加权限区分，用户只能借助公共方法操作 私有数据。</p><p>继承：体现在类和类之间的关系，如果A类继承于B类，那么A类直接拥有B类的数据和方法。</p><p>多态：一个接口（函数），多种功能。</p><h2 id="作用域运算符" tabindex="-1">:: 作用域运算符 <a class="header-anchor" href="#作用域运算符" aria-label="Permalink to &quot;:: 作用域运算符&quot;">​</a></h2><p>::解决归属问题（谁是谁的谁）</p><p><strong>可以优先使用全局变量</strong></p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++1.png" alt=""></p><h2 id="命名空间" tabindex="-1">命名空间 <a class="header-anchor" href="#命名空间" aria-label="Permalink to &quot;命名空间&quot;">​</a></h2><p>使用关键字namespace，控制标名称的作用域</p><p>命名空间的本质：对符号常量、变量、函数、结构、枚举、类和对象等等进行封装</p><h3 id="_1、创建一个命名空间" tabindex="-1">1、创建一个命名空间 <a class="header-anchor" href="#_1、创建一个命名空间" aria-label="Permalink to &quot;1、创建一个命名空间&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++2.png" alt=""></p><h3 id="_2、命名空间-只能定义在全局-重要" tabindex="-1">2、命名空间 只能定义在全局（重要） <a class="header-anchor" href="#_2、命名空间-只能定义在全局-重要" aria-label="Permalink to &quot;2、命名空间 只能定义在全局（重要）&quot;">​</a></h3><p>局部命名是错误的</p><h3 id="_3、命名空间可以嵌套" tabindex="-1">3、命名空间可以嵌套 <a class="header-anchor" href="#_3、命名空间可以嵌套" aria-label="Permalink to &quot;3、命名空间可以嵌套&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++3.png" alt=""></p><h3 id="_4、可以随时将新的成员加入命名空间" tabindex="-1">4、可以随时将新的成员加入命名空间 <a class="header-anchor" href="#_4、可以随时将新的成员加入命名空间" aria-label="Permalink to &quot;4、可以随时将新的成员加入命名空间&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++4.png" alt=""></p><h3 id="_5、命名空间中-函数的声明和实现分开" tabindex="-1">5、命名空间中 函数的声明和实现分开 <a class="header-anchor" href="#_5、命名空间中-函数的声明和实现分开" aria-label="Permalink to &quot;5、命名空间中 函数的声明和实现分开&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++5.png" alt=""></p><h3 id="_6、无名命名空间" tabindex="-1">6、无名命名空间 <a class="header-anchor" href="#_6、无名命名空间" aria-label="Permalink to &quot;6、无名命名空间&quot;">​</a></h3><p>无名命名空间 只能在 本源文件使用</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++6.png" alt=""></p><h3 id="_7、命名空间取别名" tabindex="-1">7、命名空间取别名 <a class="header-anchor" href="#_7、命名空间取别名" aria-label="Permalink to &quot;7、命名空间取别名&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++7.png" alt=""></p><h3 id="_8、使用using申明命名空间中的某几个成员-可用" tabindex="-1">8、使用using申明命名空间中的某几个成员 可用 <a class="header-anchor" href="#_8、使用using申明命名空间中的某几个成员-可用" aria-label="Permalink to &quot;8、使用using申明命名空间中的某几个成员 可用&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++8.png" alt=""></p><p>最好不要这样 容易和普通变量起冲突</p><h3 id="_9、using申明整个命名空间-可以直接通过成员名-使用" tabindex="-1">9、using申明整个命名空间 可以直接通过成员名 使用 <a class="header-anchor" href="#_9、using申明整个命名空间-可以直接通过成员名-使用" aria-label="Permalink to &quot;9、using申明整个命名空间 可以直接通过成员名 使用&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++9.png" alt=""></p><p>加作用域解决冲突</p><h2 id="类型增强" tabindex="-1">类型增强 <a class="header-anchor" href="#类型增强" aria-label="Permalink to &quot;类型增强&quot;">​</a></h2><h3 id="_1、全局变量检测增强" tabindex="-1">1、全局变量检测增强 <a class="header-anchor" href="#_1、全局变量检测增强" aria-label="Permalink to &quot;1、全局变量检测增强&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++10.png" alt=""></p><h3 id="_2、c-的函数形参必须有类型" tabindex="-1">2、c++的函数形参必须有类型 <a class="header-anchor" href="#_2、c-的函数形参必须有类型" aria-label="Permalink to &quot;2、c++的函数形参必须有类型&quot;">​</a></h3><p>c语言：允许函数形参无类型（可以传任意参数）</p><p>c++不允许</p><h3 id="_3、如果函数没有参数-建议写void" tabindex="-1">3、如果函数没有参数，建议写void <a class="header-anchor" href="#_3、如果函数没有参数-建议写void" aria-label="Permalink to &quot;3、如果函数没有参数，建议写void&quot;">​</a></h3><p>c语言：可以 c++不可以</p><h3 id="_4、更严格的类型转换" tabindex="-1">4、更严格的类型转换 <a class="header-anchor" href="#_4、更严格的类型转换" aria-label="Permalink to &quot;4、更严格的类型转换&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++11.png" alt=""></p><p>c++不允许</p><h3 id="_5、结构体类型增强-重要" tabindex="-1">5、结构体类型增强（重要） <a class="header-anchor" href="#_5、结构体类型增强-重要" aria-label="Permalink to &quot;5、结构体类型增强（重要）&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++12.png" alt=""></p><h3 id="_6、c-新增bool类型" tabindex="-1">6、c++新增bool类型 <a class="header-anchor" href="#_6、c-新增bool类型" aria-label="Permalink to &quot;6、c++新增bool类型&quot;">​</a></h3><p>bool类型拥有两个值， true false</p><h3 id="_7、三目运算符增强" tabindex="-1">7、三目运算符增强 <a class="header-anchor" href="#_7、三目运算符增强" aria-label="Permalink to &quot;7、三目运算符增强&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++13.png" alt=""></p><h3 id="_8、左值和右值-c-c共有" tabindex="-1">8、左值和右值（c++ c共有） <a class="header-anchor" href="#_8、左值和右值-c-c共有" aria-label="Permalink to &quot;8、左值和右值（c++ c共有）&quot;">​</a></h3><p>左值：能放在=左边，（能被赋值的值 就是左值）</p><p>右值：只能放在=右边 （不能被赋值的值 就是右值）</p><h2 id="c-的const" tabindex="-1"><strong>c++的const</strong> <a class="header-anchor" href="#c-的const" aria-label="Permalink to &quot;**c++的const**&quot;">​</a></h2><h3 id="_1、c-和c中的const都是修饰变量为-只读" tabindex="-1">1、c++和c中的const都是修饰变量为 只读 <a class="header-anchor" href="#_1、c-和c中的const都是修饰变量为-只读" aria-label="Permalink to &quot;1、c++和c中的const都是修饰变量为 只读&quot;">​</a></h3><h3 id="_2、c语言-严格准许-const修饰的是只读变量" tabindex="-1">2、c语言 严格准许 const修饰的是只读变量 <a class="header-anchor" href="#_2、c语言-严格准许-const修饰的是只读变量" aria-label="Permalink to &quot;2、c语言 严格准许 const修饰的是只读变量&quot;">​</a></h3><h3 id="_3、c-的const-会对变量-优化" tabindex="-1">3、c++的const 会对变量 优化 <a class="header-anchor" href="#_3、c-的const-会对变量-优化" aria-label="Permalink to &quot;3、c++的const 会对变量 优化&quot;">​</a></h3><p>1、如果以常量 初始化const修饰的变量 编译器会将变量的值 放入符号常量表中，不会立即给变 量开辟空间</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++14.png" alt=""></p><p>2、只有当对a 取地址时 编译器才会给a开辟空间（只读变量）</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++15.png" alt=""></p><p>3、如果以变量 初始化const修饰的只读变量，没有符号常量表，立即开辟空间</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++16.png" alt=""></p><p>4、如果以const修饰的是自定义类型的变量 也不会有符号常量表，立即开辟空间</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++17.png" alt=""></p><p>5、c++中尽量使用const代替define</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> #define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> A</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>1、const有类型，可进行编译器类型安全检查。#define无类型,不可进行类型检查</p><p>2、const有作用域，而#define不重视作用域，宏不能作为命名空间、结构体、类的成员，而const可以</p><h2 id="引用" tabindex="-1"><strong>引用</strong> <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;**引用**&quot;">​</a></h2><h3 id="_1、引用的定义" tabindex="-1">1、引用的定义 <a class="header-anchor" href="#_1、引用的定义" aria-label="Permalink to &quot;1、引用的定义&quot;">​</a></h3><p>引用的本质：就是给变量名取个别名。</p><p>引用定义的步骤：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">别名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 给哪个变量取别名 就定义该变量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 从上往下整体替换</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++18.png" alt=""></p><h4 id="案例1-给普通变量取别名" tabindex="-1">案例1:给普通变量取别名 <a class="header-anchor" href="#案例1-给普通变量取别名" aria-label="Permalink to &quot;案例1:给普通变量取别名&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++19.png" alt=""></p><h4 id="案例2-给数组取别名" tabindex="-1">案例2：给数组取别名 <a class="header-anchor" href="#案例2-给数组取别名" aria-label="Permalink to &quot;案例2：给数组取别名&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(arr)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">myArr)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arr;</span></span></code></pre></div><h4 id="案例3-给指针变量取别名" tabindex="-1">案例3：给指针变量取别名 <a class="header-anchor" href="#案例3-给指针变量取别名" aria-label="Permalink to &quot;案例3：给指针变量取别名&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++20.png" alt=""></p><h4 id="案例4-给函数取别名" tabindex="-1">案例4：给函数取别名 <a class="header-anchor" href="#案例4-给函数取别名" aria-label="Permalink to &quot;案例4：给函数取别名&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++21.png" alt=""></p><h3 id="_2、引用作为函数的参数" tabindex="-1">2、引用作为函数的参数 <a class="header-anchor" href="#_2、引用作为函数的参数" aria-label="Permalink to &quot;2、引用作为函数的参数&quot;">​</a></h3><p>函数内部可以 通过 引用 操作外部变量。</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++22.png" alt=""></p><p>c++ 能用引用就不用指针，引用不占空间</p><h3 id="_3、引用作为函数的返回值类型-链式操作" tabindex="-1">3、引用作为函数的返回值类型（链式操作） <a class="header-anchor" href="#_3、引用作为函数的返回值类型-链式操作" aria-label="Permalink to &quot;3、引用作为函数的返回值类型（链式操作）&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++23.png" alt=""></p><p>如果是局部变量的话，会释放空间，会错。因此加一个static</p><h3 id="_4、常引用" tabindex="-1">4、常引用 <a class="header-anchor" href="#_4、常引用" aria-label="Permalink to &quot;4、常引用&quot;">​</a></h3><p>给常量取别名</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //int &amp;a = 10;//err</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//a就是10的别名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //a = 100;//err</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">endl;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span></code></pre></div><p>不能通过常引用 修改 内容。</p><p>常引用 作为函数的参数：防止函数内部修改外部的值。</p><h3 id="_5、引用的本质-常量指针" tabindex="-1">5、引用的本质：常量指针 <a class="header-anchor" href="#_5、引用的本质-常量指针" aria-label="Permalink to &quot;5、引用的本质：常量指针&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//b为a的别名 int * const b = &amp;a;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//a的值为100 *b = 100;</span></span></code></pre></div><h2 id="内联函数" tabindex="-1">内联函数 <a class="header-anchor" href="#内联函数" aria-label="Permalink to &quot;内联函数&quot;">​</a></h2><p>内联函数：在编译阶段 将内联函数中的函数体 替换函数调用处。避免函数调用时的开销。 内联函数 必须在定义的时候 使用关键字inline修饰， 不能在声明的时候使用inline</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //函數声明的时候 不要使用inline</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> my_add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test01</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">my_add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">endl;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //内联函数 在定义的时候使用inline</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> my_add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">y;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span></code></pre></div><h3 id="_1、宏函数和内联函数的区别-重要背" tabindex="-1">1、宏函数和内联函数的区别（重要背） <a class="header-anchor" href="#_1、宏函数和内联函数的区别-重要背" aria-label="Permalink to &quot;1、宏函数和内联函数的区别（重要背）&quot;">​</a></h3><p>宏函数和内联函数 都会在适当的位置 进行展开 避免函数调用开销。 宏函数的参数没有类型，不能保证参数的完整性。 内联函数的参数有类型 能保证参数的完整性。</p><p>宏函数在预处理阶段展开 内联函数在编译阶段展开</p><p>宏函数没有作用域的限制，不能作为命名空间、结构体、类的成员 内联函数有作用域的限制，能作为命名空间、结构体、类的成员</p><h3 id="_2、内联函数的注意事项" tabindex="-1">2、内联函数的注意事项 <a class="header-anchor" href="#_2、内联函数的注意事项" aria-label="Permalink to &quot;2、内联函数的注意事项&quot;">​</a></h3><p>在内联函数定义的时候加inline修饰 类中的成员函数 默认都是内联函数（不加inline 也是内联函数）</p><p>有时候 就算加上inline也不一定是内联函数（内联函数条件）</p><ul><li>不能存在任何形式的循环语句</li><li>不能存在过多的条件判断语句</li><li>函数体不能过于庞大</li><li>不能对函数取地址</li></ul><p>有时候不加inline修饰 也有可能是内联函数。 内不内联 由编译器决定</p><h2 id="函数重载" tabindex="-1">函数重载 <a class="header-anchor" href="#函数重载" aria-label="Permalink to &quot;函数重载&quot;">​</a></h2><p>函数重载 是c++的多态的特性（静态多态）。 函数重载：用同一个函数名 代表不同的函数功能。</p><h3 id="_1、函数重载的条件-背" tabindex="-1">1、函数重载的条件：（背） <a class="header-anchor" href="#_1、函数重载的条件-背" aria-label="Permalink to &quot;1、函数重载的条件：（背）&quot;">​</a></h3><p>同一作用域，函数的参数类型、个数、顺序不同 都可以重载。（返回值类型不能作为重载的条件）</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printFun</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;int&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">endl;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printFun</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;int char&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">endl;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printFun</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;char int&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">endl;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">13</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printFun</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">char</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;char&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">endl;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">17</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test02</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printFun</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">21</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printFun</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">22</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printFun</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">23</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> printFun</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span></code></pre></div><p>c++中 不能直接将函数名作为函数的入口地址（为啥呢?）</p><p>函数名和参数 共同决定函数的入口地址</p><h3 id="_2、函数重载的底层实现原理" tabindex="-1">2、函数重载的底层实现原理 <a class="header-anchor" href="#_2、函数重载的底层实现原理" aria-label="Permalink to &quot;2、函数重载的底层实现原理&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++24.png" alt=""></p><h2 id="函数的缺省参数" tabindex="-1">函数的缺省参数 <a class="header-anchor" href="#函数的缺省参数" aria-label="Permalink to &quot;函数的缺省参数&quot;">​</a></h2><p>在函数声明处 给函数参数一个默认的值，如果函数调用处，用户没用传实参，编译器就可以使用这个默认的值。</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++25.png" alt=""></p><p>注意点： 如果函数的某个参数设置为默认参数， 那么这个参数的右边的所有参数 都必须是默认参数。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//正确</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//错误 c必须默认参数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//错误 b c必须默认参数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//正确</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//错误 b必须默认参数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//正确</span></span></code></pre></div><h2 id="占位参数" tabindex="-1">占位参数 <a class="header-anchor" href="#占位参数" aria-label="Permalink to &quot;占位参数&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++26.png" alt=""></p><p>占位参数 也可以是缺省参数（默认参数）</p><p>默认参数和函数重载同时出现 一定要注意二义性</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/img/c_plus/c++27.png" alt=""></p>`,132))])}const v=e(F,[["render",D]]);export{q as __pageData,v as default};
