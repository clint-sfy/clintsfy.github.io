import{_ as t}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as c,v as l,b as r,t as y,O as C,F as p,L as A,R as i,M as F,C as B,B as D}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const P=JSON.parse('{"title":"C++的vector容器","description":"","frontmatter":{"title":"C++的vector容器","author":"阿源","date":"2023/02/08 21:29","categories":["C++基础快速入门"],"tags":["C++","C++基础","STL"]},"headers":[],"relativePath":"courses/c_plus/02-C++的STL/03-vector容器.md","filePath":"courses/c_plus/02-C++的STL/03-vector容器.md","lastUpdated":1691397650000}'),E={name:"courses/c_plus/02-C++的STL/03-vector容器.md"},v=p("h1",{id:"c-的vector容器",tabindex:"-1"},[A("C++的vector容器 "),p("a",{class:"header-anchor",href:"#c-的vector容器","aria-label":'Permalink to "C++的vector容器"'},"​")],-1),d=i(`<h2 id="vector容器" tabindex="-1">vector容器 <a class="header-anchor" href="#vector容器" aria-label="Permalink to &quot;vector容器&quot;">​</a></h2><h3 id="_1-vector的概述" tabindex="-1">1.vector的概述 <a class="header-anchor" href="#_1-vector的概述" aria-label="Permalink to &quot;1.vector的概述&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">vector容器：单端动态数组容器</span></span>
<span class="line"><span style="color:#adbac7;">必须包含头文件：#include&lt;vector&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">vector容器：单端动态数组容器</span></span>
<span class="line"><span style="color:#24292e;">必须包含头文件：#include&lt;vector&gt;</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL3.png" alt=""></p><p>push_back尾部插入元素、pop_back尾部删除元素</p><p>front()头元素、back()尾元素</p><p>begin()得到的是 容器的 起始迭代器（首元素的位置）</p><p>end() 得到的是 结束迭代器（尾元素的下一个元素位置）</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">iostream</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">vector</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">using</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">namespace</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">std</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test01</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v1;</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">40</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#768390;"> //遍历容器</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#768390;"> //定义一个迭代器iterator 保存是元素的位置</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;::iterator it</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;">(;it</span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;">v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(); it</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#768390;"> //*it == int</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;*</span><span style="color:#ADBAC7;">it</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> argc, </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">argv[])</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test01</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">27</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">40</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">iostream</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">vector</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test01</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">12</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#6A737D;"> //遍历容器</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#6A737D;"> //定义一个迭代器iterator 保存是元素的位置</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator it</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(;it</span><span style="color:#D73A49;">!=</span><span style="color:#24292E;">v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(); it</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#6A737D;"> //*it == int</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;*</span><span style="color:#24292E;">it</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">23</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> argc, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">argv[])</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test01</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">27</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">28</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">40</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test01</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v1;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;容量:&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">v1.</span><span style="color:#DCBDFB;">capacity</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; 大小:&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">v1.</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;::iterator it;</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> i</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> count </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;">(i</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;i</span><span style="color:#F47067;">&lt;=</span><span style="color:#6CB6FF;">1000</span><span style="color:#ADBAC7;">;i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;">(it </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">())</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> count</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;第&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">count</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;次开辟空间，容量为：&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">v1.</span><span style="color:#DCBDFB;">capacity</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> it</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test01</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;容量:&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">v1.</span><span style="color:#6F42C1;">capacity</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; 大小:&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">v1.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator it;</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;=</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(it </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;第&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">count</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;次开辟空间，容量为：&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">v1.</span><span style="color:#6F42C1;">capacity</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> it</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="_2、vector-api" tabindex="-1">2、vector API <a class="header-anchor" href="#_2、vector-api" aria-label="Permalink to &quot;2、vector API&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 3.2.4.1 vector构造函数</span></span>
<span class="line"><span style="color:#adbac7;">2 vector&lt;T&gt; v; //采用模板实现类实现，默认构造函数</span></span>
<span class="line"><span style="color:#adbac7;">3 vector(v.begin(), v.end());//将v[begin(), end())区间中的元素拷贝给本身。</span></span>
<span class="line"><span style="color:#adbac7;">4 vector(n, elem);//构造函数将n个elem拷贝给本身。</span></span>
<span class="line"><span style="color:#adbac7;">5 vector(const vector &amp;vec);//拷贝构造函数。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">6</span></span>
<span class="line"><span style="color:#adbac7;">7 //例子 使用第二个构造函数 我们可以...</span></span>
<span class="line"><span style="color:#adbac7;">8 int arr[] = {2,3,4,1,9};</span></span>
<span class="line"><span style="color:#adbac7;">9 vector&lt;int&gt; v1(arr, arr + sizeof(arr) / sizeof(int));</span></span>
<span class="line"><span style="color:#adbac7;">10 3.2.4.2 vector常用赋值操作</span></span>
<span class="line"><span style="color:#adbac7;">11 assign(beg, end);//将[beg, end)区间中的数据拷贝赋值给本身。</span></span>
<span class="line"><span style="color:#adbac7;">12 assign(n, elem);//将n个elem拷贝赋值给本身。</span></span>
<span class="line"><span style="color:#adbac7;">13 vector&amp; operator=(const vector &amp;vec);//重载等号操作符</span></span>
<span class="line"><span style="color:#adbac7;">14 swap(vec);// 将vec与本身的元素互换。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">15 3.2.4.3 vector大小操作</span></span>
<span class="line"><span style="color:#adbac7;">16 size();//返回容器中元素的个数</span></span>
<span class="line"><span style="color:#adbac7;">17 empty();//判断容器是否为空</span></span>
<span class="line"><span style="color:#adbac7;">18 resize(int num);//重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</span></span>
<span class="line"><span style="color:#adbac7;">如果容器变短，则末尾超出容器长度的元素被删除。</span></span>
<span class="line"><span style="color:#adbac7;">19 resize(int num, elem);//重新指定容器的长度为num，若容器变长，则以elem值填充新</span></span>
<span class="line"><span style="color:#adbac7;">位置。如果容器变短，则末尾超出容器长&gt;度的元素被删除。</span></span>
<span class="line"><span style="color:#adbac7;">20 capacity();//容器的容量</span></span>
<span class="line"><span style="color:#adbac7;">21 reserve(int len);//容器预留len个元素长度，预留位置不初始化，元素不可访问。</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">22 3.2.4.4 vector数据存取操作</span></span>
<span class="line"><span style="color:#adbac7;">23 at(int idx); //返回索引idx所指的数据，如果idx越界，抛出out_of_range异常。</span></span>
<span class="line"><span style="color:#adbac7;">24 operator[];//返回索引idx所指的数据，越界时，运行直接报错</span></span>
<span class="line"><span style="color:#adbac7;">25 front();//返回容器中第一个数据元素</span></span>
<span class="line"><span style="color:#adbac7;">26 back();//返回容器中最后一个数据元素</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">27 3.2.4.5 vector插入和删除操作</span></span>
<span class="line"><span style="color:#adbac7;">28 insert(const_iterator pos, int count, ele);//迭代器指向位置pos插入count个元素ele.</span></span>
<span class="line"><span style="color:#adbac7;">29 push_back(ele); //尾部插入元素ele</span></span>
<span class="line"><span style="color:#adbac7;">30 pop_back();//删除最后一个元素</span></span>
<span class="line"><span style="color:#adbac7;">31 erase(const_iterator start, const_iterator end);//删除迭代器从start到end之间的元素</span></span>
<span class="line"><span style="color:#adbac7;">32 erase(const_iterator pos);//删除迭代器指向的元素</span></span>
<span class="line"><span style="color:#adbac7;">33 clear();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 3.2.4.1 vector构造函数</span></span>
<span class="line"><span style="color:#24292e;">2 vector&lt;T&gt; v; //采用模板实现类实现，默认构造函数</span></span>
<span class="line"><span style="color:#24292e;">3 vector(v.begin(), v.end());//将v[begin(), end())区间中的元素拷贝给本身。</span></span>
<span class="line"><span style="color:#24292e;">4 vector(n, elem);//构造函数将n个elem拷贝给本身。</span></span>
<span class="line"><span style="color:#24292e;">5 vector(const vector &amp;vec);//拷贝构造函数。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">6</span></span>
<span class="line"><span style="color:#24292e;">7 //例子 使用第二个构造函数 我们可以...</span></span>
<span class="line"><span style="color:#24292e;">8 int arr[] = {2,3,4,1,9};</span></span>
<span class="line"><span style="color:#24292e;">9 vector&lt;int&gt; v1(arr, arr + sizeof(arr) / sizeof(int));</span></span>
<span class="line"><span style="color:#24292e;">10 3.2.4.2 vector常用赋值操作</span></span>
<span class="line"><span style="color:#24292e;">11 assign(beg, end);//将[beg, end)区间中的数据拷贝赋值给本身。</span></span>
<span class="line"><span style="color:#24292e;">12 assign(n, elem);//将n个elem拷贝赋值给本身。</span></span>
<span class="line"><span style="color:#24292e;">13 vector&amp; operator=(const vector &amp;vec);//重载等号操作符</span></span>
<span class="line"><span style="color:#24292e;">14 swap(vec);// 将vec与本身的元素互换。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">15 3.2.4.3 vector大小操作</span></span>
<span class="line"><span style="color:#24292e;">16 size();//返回容器中元素的个数</span></span>
<span class="line"><span style="color:#24292e;">17 empty();//判断容器是否为空</span></span>
<span class="line"><span style="color:#24292e;">18 resize(int num);//重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</span></span>
<span class="line"><span style="color:#24292e;">如果容器变短，则末尾超出容器长度的元素被删除。</span></span>
<span class="line"><span style="color:#24292e;">19 resize(int num, elem);//重新指定容器的长度为num，若容器变长，则以elem值填充新</span></span>
<span class="line"><span style="color:#24292e;">位置。如果容器变短，则末尾超出容器长&gt;度的元素被删除。</span></span>
<span class="line"><span style="color:#24292e;">20 capacity();//容器的容量</span></span>
<span class="line"><span style="color:#24292e;">21 reserve(int len);//容器预留len个元素长度，预留位置不初始化，元素不可访问。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">22 3.2.4.4 vector数据存取操作</span></span>
<span class="line"><span style="color:#24292e;">23 at(int idx); //返回索引idx所指的数据，如果idx越界，抛出out_of_range异常。</span></span>
<span class="line"><span style="color:#24292e;">24 operator[];//返回索引idx所指的数据，越界时，运行直接报错</span></span>
<span class="line"><span style="color:#24292e;">25 front();//返回容器中第一个数据元素</span></span>
<span class="line"><span style="color:#24292e;">26 back();//返回容器中最后一个数据元素</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">27 3.2.4.5 vector插入和删除操作</span></span>
<span class="line"><span style="color:#24292e;">28 insert(const_iterator pos, int count, ele);//迭代器指向位置pos插入count个元素ele.</span></span>
<span class="line"><span style="color:#24292e;">29 push_back(ele); //尾部插入元素ele</span></span>
<span class="line"><span style="color:#24292e;">30 pop_back();//删除最后一个元素</span></span>
<span class="line"><span style="color:#24292e;">31 erase(const_iterator start, const_iterator end);//删除迭代器从start到end之间的元素</span></span>
<span class="line"><span style="color:#24292e;">32 erase(const_iterator pos);//删除迭代器指向的元素</span></span>
<span class="line"><span style="color:#24292e;">33 clear();</span></span></code></pre></div><h3 id="_3、巧用swap收缩空间" tabindex="-1">3、巧用swap收缩空间 <a class="header-anchor" href="#_3、巧用swap收缩空间" aria-label="Permalink to &quot;3、巧用swap收缩空间&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test04</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v1;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">reserve</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1000</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">assign</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;大小:&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">v1.</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; 容量:&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">v1.</span><span style="color:#DCBDFB;">capacity</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#768390;"> //v1.resize(3);</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;(v1).</span><span style="color:#DCBDFB;">swap</span><span style="color:#ADBAC7;">(v1);</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;大小:&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">v1.</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; 容量:&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">v1.</span><span style="color:#DCBDFB;">capacity</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test04</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">reserve</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;大小:&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">v1.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; 容量:&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">v1.</span><span style="color:#6F42C1;">capacity</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#6A737D;"> //v1.resize(3);</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(v1).</span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(v1);</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;大小:&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">v1.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; 容量:&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">v1.</span><span style="color:#6F42C1;">capacity</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> }</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">大小：5 容量：1000</span></span>
<span class="line"><span style="color:#adbac7;">大小：5 容量：5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">大小：5 容量：1000</span></span>
<span class="line"><span style="color:#24292e;">大小：5 容量：5</span></span></code></pre></div><h3 id="_4、vector容器-嵌套-容器" tabindex="-1">4、vector容器 嵌套 容器 <a class="header-anchor" href="#_4、vector容器-嵌套-容器" aria-label="Permalink to &quot;4、vector容器 嵌套 容器&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test05</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">v1</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">v2</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">v3</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">1000</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#768390;"> //需求：定义一个容器 存放v1 v2 v3</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> v;</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> v.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(v1);</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> v.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(v2);</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> v.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(v3);</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#768390;"> //遍历</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt; </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt; &gt;::iterator it;</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;">(it</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">v.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(); it</span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;">v.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(); it</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#768390;"> //*it == vector&lt;int&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;">     </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;::iterator mit;</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span><span style="color:#ADBAC7;">     </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;">(mit</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">it).</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">();mit</span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">it).</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">();mit</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;"> )</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">     {</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#768390;">        //*mit == int</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;">        cout</span><span style="color:#F47067;">&lt;&lt;*</span><span style="color:#ADBAC7;">mit</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;">      cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test05</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#6A737D;"> //需求：定义一个容器 存放v1 v2 v3</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(v1);</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(v2);</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(v3);</span></span>
<span class="line"><span style="color:#005CC5;">12</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#6A737D;"> //遍历</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt; </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt; &gt;::iterator it;</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(it</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(); it</span><span style="color:#D73A49;">!=</span><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(); it</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#6A737D;"> //*it == vector&lt;int&gt;</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;">     </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator mit;</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(mit</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">it).</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">();mit</span><span style="color:#D73A49;">!=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">it).</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();mit</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;">     {</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#6A737D;">        //*mit == int</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;">        cout</span><span style="color:#D73A49;">&lt;&lt;*</span><span style="color:#24292E;">mit</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;">      cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="_5、使用算法-对-vector容器排序" tabindex="-1">5、使用算法 对 vector容器排序 <a class="header-anchor" href="#_5、使用算法-对-vector容器排序" aria-label="Permalink to &quot;5、使用算法 对 vector容器排序&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">algorithm</span><span style="color:#F47067;">&gt;</span><span style="color:#768390;">//算法头文件</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">bool</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">myCompare</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> value1, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> value2)</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> value1</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">value2;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test06</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v1;</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">40</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printVectorInt</span><span style="color:#ADBAC7;">(v1);</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#768390;"> //sort算法排序</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sort</span><span style="color:#ADBAC7;">(v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span><span style="color:#768390;"> //sort(v1.begin(), v1.end(), greater&lt;int&gt;());</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#768390;"> //sort(v1.begin(), v1.end(), myCompare);</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printVectorInt</span><span style="color:#ADBAC7;">(v1);</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">algorithm</span><span style="color:#D73A49;">&gt;</span><span style="color:#6A737D;">//算法头文件</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myCompare</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value1, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value2)</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value1</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">value2;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test06</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printVectorInt</span><span style="color:#24292E;">(v1);</span></span>
<span class="line"><span style="color:#005CC5;">16</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#6A737D;"> //sort算法排序</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#6A737D;"> //sort(v1.begin(), v1.end(), greater&lt;int&gt;());</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#6A737D;"> //sort(v1.begin(), v1.end(), myCompare);</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printVectorInt</span><span style="color:#24292E;">(v1);</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="_6、vector存放自定义数据类型" tabindex="-1">6、vector存放自定义数据类型 <a class="header-anchor" href="#_6、vector存放自定义数据类型" aria-label="Permalink to &quot;6、vector存放自定义数据类型&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Person</span></span>
<span class="line"><span style="color:#ADBAC7;">2 {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">friend</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printVectorPerson</span><span style="color:#ADBAC7;">(vector</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Person</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">v);</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">friend</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">bool</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">myComparePerson</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> Person </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">ob1, </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> Person </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">ob2);</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">private:</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> num;</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> string name;</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">float</span><span style="color:#ADBAC7;"> score;</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">public:</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(){}</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> num, string name, </span><span style="color:#F47067;">float</span><span style="color:#ADBAC7;"> score)</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> num;</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> name;</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">score </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> score;</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> #if </span><span style="color:#6CB6FF;">0</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#768390;"> //方法2：重载自定义数据的&lt;运算符</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">bool</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">operator</span><span style="color:#F69D50;">&lt;</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Person</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#F69D50;">ob</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> ob.num;</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#ADBAC7;"> #endif</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;"> };</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printVectorPerson</span><span style="color:#ADBAC7;">(vector</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Person</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">v)</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">27</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Person</span><span style="color:#ADBAC7;">&gt;::iterator it;</span></span>
<span class="line"><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;">(it</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">v.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(); it</span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;">v.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(); it</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">29</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">30</span><span style="color:#768390;"> //*it == Person</span></span>
<span class="line"><span style="color:#6CB6FF;">31</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">it).num</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">it).name</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">it).score</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">33</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">34</span><span style="color:#768390;"> //方法1：对于自定义容器排序 必须实现 排序规则</span></span>
<span class="line"><span style="color:#6CB6FF;">35</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">bool</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">myComparePerson</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> Person </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">ob1, </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> Person </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">ob2)</span></span>
<span class="line"><span style="color:#6CB6FF;">36</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">37</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;">(ob1.num </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> ob2.num)</span></span>
<span class="line"><span style="color:#6CB6FF;">38</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ob1.score</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">ob2.score;</span></span>
<span class="line"><span style="color:#6CB6FF;">39</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ob1.num </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> ob2.num;</span></span>
<span class="line"><span style="color:#6CB6FF;">40</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">41</span></span>
<span class="line"><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test07</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">43</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">44</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Person</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> v;</span></span>
<span class="line"><span style="color:#6CB6FF;">45</span></span>
<span class="line"><span style="color:#6CB6FF;">46</span><span style="color:#ADBAC7;"> v.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;lucy&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">88.8</span><span style="color:#F47067;">f</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">47</span><span style="color:#ADBAC7;"> v.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">103</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;bob&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">99.8</span><span style="color:#F47067;">f</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">48</span><span style="color:#ADBAC7;"> v.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">103</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;tom&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">77.8</span><span style="color:#F47067;">f</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">49</span><span style="color:#ADBAC7;"> v.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">103</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;德玛&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">88.8</span><span style="color:#F47067;">f</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;"> v.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">101</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;小法&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">66.8</span><span style="color:#F47067;">f</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">51</span></span>
<span class="line"><span style="color:#6CB6FF;">52</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printVectorPerson</span><span style="color:#ADBAC7;">(v);</span></span>
<span class="line"><span style="color:#6CB6FF;">53</span><span style="color:#768390;"> //方法1：对于自定义容器排序 必须实现 排序规则</span></span>
<span class="line"><span style="color:#6CB6FF;">54</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sort</span><span style="color:#ADBAC7;">(v.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), v.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), myComparePerson);</span></span>
<span class="line"><span style="color:#6CB6FF;">55</span><span style="color:#768390;"> //方法2：重载自定义数据的&lt;运算符</span></span>
<span class="line"><span style="color:#6CB6FF;">56</span><span style="color:#768390;"> //sort(v.begin(), v.end());</span></span>
<span class="line"><span style="color:#6CB6FF;">57</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;‐‐‐‐‐‐‐‐‐‐‐‐‐‐&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">58</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printVectorPerson</span><span style="color:#ADBAC7;">(v);</span></span>
<span class="line"><span style="color:#6CB6FF;">59</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span></span>
<span class="line"><span style="color:#24292E;">2 {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printVectorPerson</span><span style="color:#24292E;">(vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Person</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">v);</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myComparePerson</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> Person </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ob1, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> Person </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ob2);</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> string name;</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> score;</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num, string name, </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> score)</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">score </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> score;</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> #if </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#6A737D;"> //方法2：重载自定义数据的&lt;运算符</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">&lt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">ob</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> ob.num;</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;"> #endif</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printVectorPerson</span><span style="color:#24292E;">(vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Person</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">v)</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">27</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">&gt;::iterator it;</span></span>
<span class="line"><span style="color:#005CC5;">28</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(it</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(); it</span><span style="color:#D73A49;">!=</span><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(); it</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">29</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">30</span><span style="color:#6A737D;"> //*it == Person</span></span>
<span class="line"><span style="color:#005CC5;">31</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">it).num</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">it).name</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">it).score</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">32</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">33</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">34</span><span style="color:#6A737D;"> //方法1：对于自定义容器排序 必须实现 排序规则</span></span>
<span class="line"><span style="color:#005CC5;">35</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myComparePerson</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> Person </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ob1, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> Person </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ob2)</span></span>
<span class="line"><span style="color:#005CC5;">36</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">37</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(ob1.num </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ob2.num)</span></span>
<span class="line"><span style="color:#005CC5;">38</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ob1.score</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ob2.score;</span></span>
<span class="line"><span style="color:#005CC5;">39</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ob1.num </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ob2.num;</span></span>
<span class="line"><span style="color:#005CC5;">40</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">41</span></span>
<span class="line"><span style="color:#005CC5;">42</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test07</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">43</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">44</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Person</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#005CC5;">45</span></span>
<span class="line"><span style="color:#005CC5;">46</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;lucy&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">88.8</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">47</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">103</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bob&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99.8</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">48</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">103</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tom&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">77.8</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">49</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">103</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;德玛&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">88.8</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">50</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;小法&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">66.8</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">51</span></span>
<span class="line"><span style="color:#005CC5;">52</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printVectorPerson</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#005CC5;">53</span><span style="color:#6A737D;"> //方法1：对于自定义容器排序 必须实现 排序规则</span></span>
<span class="line"><span style="color:#005CC5;">54</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(v.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), v.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), myComparePerson);</span></span>
<span class="line"><span style="color:#005CC5;">55</span><span style="color:#6A737D;"> //方法2：重载自定义数据的&lt;运算符</span></span>
<span class="line"><span style="color:#005CC5;">56</span><span style="color:#6A737D;"> //sort(v.begin(), v.end());</span></span>
<span class="line"><span style="color:#005CC5;">57</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;‐‐‐‐‐‐‐‐‐‐‐‐‐‐&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">58</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printVectorPerson</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#005CC5;">59</span><span style="color:#24292E;"> }</span></span></code></pre></div>`,21);function u(s,b,g,m,h,_){const o=t,e=F("ClientOnly");return l(),r("div",null,[v,y(e,null,{default:C(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),d])}const z=c(E,[["render",u]]);export{P as __pageData,z as default};
