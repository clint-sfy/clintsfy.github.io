import{_ as e}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as c,v as l,b as r,t as y,O as A,F as p,L as i,R as D,M as C,C as B,B as d}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const R=JSON.parse('{"title":"窗口内最大值最小值更新","description":"","frontmatter":{"title":"窗口内最大值最小值更新","author":"阿源","date":"2023/03/18 12:00","categories":["数据结构与算法"],"tags":["数据结构与算法","滑动窗口"]},"headers":[],"relativePath":"courses/algorithm/01-左程云算法基础/18-窗口内最大值最小值更新.md","filePath":"courses/algorithm/01-左程云算法基础/18-窗口内最大值最小值更新.md","lastUpdated":1691397650000}'),F={name:"courses/algorithm/01-左程云算法基础/18-窗口内最大值最小值更新.md"},E=p("h1",{id:"窗口内最大值最小值更新",tabindex:"-1"},[i("窗口内最大值最小值更新 "),p("a",{class:"header-anchor",href:"#窗口内最大值最小值更新","aria-label":'Permalink to "窗口内最大值最小值更新"'},"​")],-1),m=D(`<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">滑动窗口是什么?</span></span>
<span class="line"><span style="color:#adbac7;">滑动窗口是一种想象出来的数据结构:</span></span>
<span class="line"><span style="color:#adbac7;">滑动窗口有左边界L和有边界R</span></span>
<span class="line"><span style="color:#adbac7;">在数组或者字符串或者一个序列上，记为S,窗口就是S[..R]这-部分</span></span>
<span class="line"><span style="color:#adbac7;">L往右滑意味着- -个样本出了窗口，R往右滑意味着-一个样本进了窗口</span></span>
<span class="line"><span style="color:#adbac7;">L和R都只能往右滑</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">滑动窗口是什么?</span></span>
<span class="line"><span style="color:#24292e;">滑动窗口是一种想象出来的数据结构:</span></span>
<span class="line"><span style="color:#24292e;">滑动窗口有左边界L和有边界R</span></span>
<span class="line"><span style="color:#24292e;">在数组或者字符串或者一个序列上，记为S,窗口就是S[..R]这-部分</span></span>
<span class="line"><span style="color:#24292e;">L往右滑意味着- -个样本出了窗口，R往右滑意味着-一个样本进了窗口</span></span>
<span class="line"><span style="color:#24292e;">L和R都只能往右滑</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">[6 4 2 3 5 7 0 5]</span></span>
<span class="line"><span style="color:#adbac7;">用双端队列进行更新</span></span>
<span class="line"><span style="color:#adbac7;">[6 4 2]  [6 4 3] [6 5] [7] [7 0] [7 5]</span></span>
<span class="line"><span style="color:#adbac7;">含义：当窗口开始缩短时，哪些位置的数会依次成为max</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[6 4 2 3 5 7 0 5]</span></span>
<span class="line"><span style="color:#24292e;">用双端队列进行更新</span></span>
<span class="line"><span style="color:#24292e;">[6 4 2]  [6 4 3] [6 5] [7] [7 0] [7 5]</span></span>
<span class="line"><span style="color:#24292e;">含义：当窗口开始缩短时，哪些位置的数会依次成为max</span></span></code></pre></div><h2 id="题目一-固定窗口最大值" tabindex="-1">题目一 固定窗口最大值 <a class="header-anchor" href="#题目一-固定窗口最大值" aria-label="Permalink to &quot;题目一  固定窗口最大值&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">假设一个固定大小为W的窗口，依次划过arr,</span></span>
<span class="line"><span style="color:#adbac7;">返回每一次滑出状况的最大值</span></span>
<span class="line"><span style="color:#adbac7;">例如 arr = [4,3,5,4,3,3,6,7], W= 3</span></span>
<span class="line"><span style="color:#adbac7;">返回: [5,5,5,4,6,7]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">假设一个固定大小为W的窗口，依次划过arr,</span></span>
<span class="line"><span style="color:#24292e;">返回每一次滑出状况的最大值</span></span>
<span class="line"><span style="color:#24292e;">例如 arr = [4,3,5,4,3,3,6,7], W= 3</span></span>
<span class="line"><span style="color:#24292e;">返回: [5,5,5,4,6,7]</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[] </span><span style="color:#DCBDFB;">getMaxWindow</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[] arr, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> w) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (arr </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> w </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> arr.length </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> w) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// qmax 窗口最大值的更新结构</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// 放下标</span></span>
<span class="line"><span style="color:#ADBAC7;">		LinkedList</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">qmax</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#ADBAC7;">&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">res</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[arr.length </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> w </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">index</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">R</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; R </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> arr.length; R</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 队列为空直接跳过  队列尾巴上的数要大于当前值，否则滚蛋</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">qmax.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> arr[qmax.</span><span style="color:#DCBDFB;">peekLast</span><span style="color:#ADBAC7;">()] </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> arr[R]) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				qmax.</span><span style="color:#DCBDFB;">pollLast</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			qmax.</span><span style="color:#DCBDFB;">addLast</span><span style="color:#ADBAC7;">(R);</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 淘汰头部的数</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (qmax.</span><span style="color:#DCBDFB;">peekFirst</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> R </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> w) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				qmax.</span><span style="color:#DCBDFB;">pollFirst</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 窗口形成的时候 才形成答案</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (R </span><span style="color:#F47067;">&gt;=</span><span style="color:#ADBAC7;"> w </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				res[index</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> arr[qmax.</span><span style="color:#DCBDFB;">peekFirst</span><span style="color:#ADBAC7;">()];</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> res;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">getMaxWindow</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> w) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arr </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> w </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> arr.length </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> w) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// qmax 窗口最大值的更新结构</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 放下标</span></span>
<span class="line"><span style="color:#24292E;">		LinkedList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; qmax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[arr.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> w </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> R </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; R </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.length; R</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 队列为空直接跳过  队列尾巴上的数要大于当前值，否则滚蛋</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">qmax.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> arr[qmax.</span><span style="color:#6F42C1;">peekLast</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> arr[R]) {</span></span>
<span class="line"><span style="color:#24292E;">				qmax.</span><span style="color:#6F42C1;">pollLast</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			qmax.</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(R);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 淘汰头部的数</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (qmax.</span><span style="color:#6F42C1;">peekFirst</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> R </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> w) {</span></span>
<span class="line"><span style="color:#24292E;">				qmax.</span><span style="color:#6F42C1;">pollFirst</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 窗口形成的时候 才形成答案</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (R </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> w </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				res[index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[qmax.</span><span style="color:#6F42C1;">peekFirst</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="题目二" tabindex="-1">题目二 <a class="header-anchor" href="#题目二" aria-label="Permalink to &quot;题目二&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">给定一个整型数组arr,</span></span>
<span class="line"><span style="color:#adbac7;">和一个整数num</span></span>
<span class="line"><span style="color:#adbac7;">某个arr中的子数组sub，如果想达标，必须满足:</span></span>
<span class="line"><span style="color:#adbac7;">sub中最大值-sub中最小值&lt;= num,</span></span>
<span class="line"><span style="color:#adbac7;">返回arr中达标子数组的数量</span></span>
<span class="line"><span style="color:#adbac7;"></span></span>
<span class="line"><span style="color:#adbac7;">如果L到R上已经达标了，那么内部的子数组一定达标 </span></span>
<span class="line"><span style="color:#adbac7;">如果L到R上已经不达标了，那么往左扩或者右扩一定不达标</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">给定一个整型数组arr,</span></span>
<span class="line"><span style="color:#24292e;">和一个整数num</span></span>
<span class="line"><span style="color:#24292e;">某个arr中的子数组sub，如果想达标，必须满足:</span></span>
<span class="line"><span style="color:#24292e;">sub中最大值-sub中最小值&lt;= num,</span></span>
<span class="line"><span style="color:#24292e;">返回arr中达标子数组的数量</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">如果L到R上已经达标了，那么内部的子数组一定达标 </span></span>
<span class="line"><span style="color:#24292e;">如果L到R上已经不达标了，那么往左扩或者右扩一定不达标</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">num</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[] arr, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> sum) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (arr </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> arr.length </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> sum </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">N</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> arr.length;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">count</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		LinkedList</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">maxWindow</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		LinkedList</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">minWindow</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">R</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">L</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; L </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> N; L</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">//[L.....R)</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (R </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> N) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">maxWindow.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> arr[maxWindow.</span><span style="color:#DCBDFB;">peekLast</span><span style="color:#ADBAC7;">()] </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> arr[R]) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					maxWindow.</span><span style="color:#DCBDFB;">pollLast</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">				maxWindow.</span><span style="color:#DCBDFB;">addLast</span><span style="color:#ADBAC7;">(R);</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">minWindow.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> arr[minWindow.</span><span style="color:#DCBDFB;">peekLast</span><span style="color:#ADBAC7;">()] </span><span style="color:#F47067;">&gt;=</span><span style="color:#ADBAC7;"> arr[R]) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					minWindow.</span><span style="color:#DCBDFB;">pollLast</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">				minWindow.</span><span style="color:#DCBDFB;">addLast</span><span style="color:#ADBAC7;">(R);</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (arr[maxWindow.</span><span style="color:#DCBDFB;">peekFirst</span><span style="color:#ADBAC7;">()] </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> arr[minWindow.</span><span style="color:#DCBDFB;">peekFirst</span><span style="color:#ADBAC7;">()] </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> sum) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">break</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">					R</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			count </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> R </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> L;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (maxWindow.</span><span style="color:#DCBDFB;">peekFirst</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> L) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				maxWindow.</span><span style="color:#DCBDFB;">pollFirst</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (minWindow.</span><span style="color:#DCBDFB;">peekFirst</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> L) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				minWindow.</span><span style="color:#DCBDFB;">pollFirst</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> count;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">num</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sum) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arr </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> arr.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.length;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		LinkedList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; maxWindow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		LinkedList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; minWindow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> R </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> L </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; L </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; L</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//[L.....R)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (R </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">maxWindow.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> arr[maxWindow.</span><span style="color:#6F42C1;">peekLast</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> arr[R]) {</span></span>
<span class="line"><span style="color:#24292E;">					maxWindow.</span><span style="color:#6F42C1;">pollLast</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				maxWindow.</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(R);</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">minWindow.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> arr[minWindow.</span><span style="color:#6F42C1;">peekLast</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> arr[R]) {</span></span>
<span class="line"><span style="color:#24292E;">					minWindow.</span><span style="color:#6F42C1;">pollLast</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				minWindow.</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(R);</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arr[maxWindow.</span><span style="color:#6F42C1;">peekFirst</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> arr[minWindow.</span><span style="color:#6F42C1;">peekFirst</span><span style="color:#24292E;">()] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> sum) {</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					R</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> R </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> L;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (maxWindow.</span><span style="color:#6F42C1;">peekFirst</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> L) {</span></span>
<span class="line"><span style="color:#24292E;">				maxWindow.</span><span style="color:#6F42C1;">pollFirst</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (minWindow.</span><span style="color:#6F42C1;">peekFirst</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> L) {</span></span>
<span class="line"><span style="color:#24292E;">				minWindow.</span><span style="color:#6F42C1;">pollFirst</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> count;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="题目三" tabindex="-1">题目三 <a class="header-anchor" href="#题目三" aria-label="Permalink to &quot;题目三&quot;">​</a></h2><h2 id="题目四" tabindex="-1">题目四 <a class="header-anchor" href="#题目四" aria-label="Permalink to &quot;题目四&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">arr是货币数组，其中的值都是正数。再给定-个正数aim。</span></span>
<span class="line"><span style="color:#adbac7;">每个值都认为是一-张货币，</span></span>
<span class="line"><span style="color:#adbac7;">返回组成aim的最少货币数</span></span>
<span class="line"><span style="color:#adbac7;">注意:</span></span>
<span class="line"><span style="color:#adbac7;">因为是求最少货币数，所以每一张货币认为是相同或者不同就不重要了</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">arr是货币数组，其中的值都是正数。再给定-个正数aim。</span></span>
<span class="line"><span style="color:#24292e;">每个值都认为是一-张货币，</span></span>
<span class="line"><span style="color:#24292e;">返回组成aim的最少货币数</span></span>
<span class="line"><span style="color:#24292e;">注意:</span></span>
<span class="line"><span style="color:#24292e;">因为是求最少货币数，所以每一张货币认为是相同或者不同就不重要了</span></span></code></pre></div>`,11);function h(s,u,g,b,L,k){const o=e,t=C("ClientOnly");return l(),r("div",null,[E,y(t,null,{default:A(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),m])}const W=c(F,[["render",h]]);export{R as __pageData,W as default};
