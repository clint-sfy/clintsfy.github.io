import{_ as t}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as r,v as l,b as c,t as y,O as i,F as p,L as A,R as C,M as D,C as F,B}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const X=JSON.parse('{"title":"集成算法","description":"","frontmatter":{"title":"集成算法","author":"阿源","date":"2023/07/06 12:00","categories":["机器学习快速入门"],"tags":["机器学习"]},"headers":[],"relativePath":"courses/tangyudi/02-机器学习篇/06-集成算法.md","filePath":"courses/tangyudi/02-机器学习篇/06-集成算法.md","lastUpdated":1695348718000}'),E={name:"courses/tangyudi/02-机器学习篇/06-集成算法.md"},_=p("h1",{id:"集成算法",tabindex:"-1"},[A("集成算法 "),p("a",{class:"header-anchor",href:"#集成算法","aria-label":'Permalink to "集成算法"'},"​")],-1),d=C(`<h2 id="_14-集成算法原理" tabindex="-1">14. 集成算法原理 <a class="header-anchor" href="#_14-集成算法原理" aria-label="Permalink to &quot;14. 集成算法原理&quot;">​</a></h2><h2 id="_15-集成算法实验分析" tabindex="-1">15. 集成算法实验分析 <a class="header-anchor" href="#_15-集成算法实验分析" aria-label="Permalink to &quot;15. 集成算法实验分析&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> numpy </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> np</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> os</span></span>
<span class="line"><span style="color:#F47067;">%</span><span style="color:#ADBAC7;">matplotlib inline</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> matplotlib</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> matplotlib.pyplot </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> plt</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.rcParams[</span><span style="color:#96D0FF;">&#39;axes.labelsize&#39;</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">14</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.rcParams[</span><span style="color:#96D0FF;">&#39;xtick.labelsize&#39;</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">12</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.rcParams[</span><span style="color:#96D0FF;">&#39;ytick.labelsize&#39;</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">12</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> warnings</span></span>
<span class="line"><span style="color:#ADBAC7;">warnings.filterwarnings(</span><span style="color:#96D0FF;">&#39;ignore&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">np.random.seed(</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#24292E;">matplotlib inline</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> matplotlib</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> matplotlib.pyplot </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> plt</span></span>
<span class="line"><span style="color:#24292E;">plt.rcParams[</span><span style="color:#032F62;">&#39;axes.labelsize&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">14</span></span>
<span class="line"><span style="color:#24292E;">plt.rcParams[</span><span style="color:#032F62;">&#39;xtick.labelsize&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span></span>
<span class="line"><span style="color:#24292E;">plt.rcParams[</span><span style="color:#032F62;">&#39;ytick.labelsize&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> warnings</span></span>
<span class="line"><span style="color:#24292E;">warnings.filterwarnings(</span><span style="color:#032F62;">&#39;ignore&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">np.random.seed(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.1.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.model_selection </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> train_test_split</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.datasets </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> make_moons</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">X,y </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> make_moons(</span><span style="color:#F69D50;">n_samples</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">500</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">noise</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.30</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">X_train, X_test, y_train, y_test </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> train_test_split(X, y, </span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.plot(X[:,</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">][y</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">],X[:,</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">][y</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">],</span><span style="color:#96D0FF;">&#39;yo&#39;</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">alpha</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.6</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.plot(X[:,</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">][y</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">],X[:,</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">][y</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">],</span><span style="color:#96D0FF;">&#39;bs&#39;</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">alpha</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.6</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.model_selection </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> train_test_split</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.datasets </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> make_moons</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">X,y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> make_moons(</span><span style="color:#E36209;">n_samples</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">, </span><span style="color:#E36209;">noise</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.30</span><span style="color:#24292E;">, </span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">X_train, X_test, y_train, y_test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_test_split(X, y, </span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.plot(X[:,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][y</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],X[:,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][y</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span><span style="color:#032F62;">&#39;yo&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">alpha</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.6</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.plot(X[:,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][y</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],X[:,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][y</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],</span><span style="color:#032F62;">&#39;bs&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">alpha</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.6</span><span style="color:#24292E;">)</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.2.png" alt=""></p><h3 id="软投票与硬投票" tabindex="-1">软投票与硬投票 <a class="header-anchor" href="#软投票与硬投票" aria-label="Permalink to &quot;软投票与硬投票&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">硬投票：直接用类别值，少数服从多数</span></span>
<span class="line"><span style="color:#adbac7;">软投票：各自分类器的概率值进行加权平均</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">硬投票：直接用类别值，少数服从多数</span></span>
<span class="line"><span style="color:#24292e;">软投票：各自分类器的概率值进行加权平均</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 硬投票实验</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.ensemble </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> RandomForestClassifier, VotingClassifier</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.linear_model </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> LogisticRegression</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.svm </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">SVC</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">log_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> LogisticRegression(</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">rnd_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RandomForestClassifier(</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">svm_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SVC(</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">voting_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> VotingClassifier(</span><span style="color:#F69D50;">estimators</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[(</span><span style="color:#96D0FF;">&#39;lr&#39;</span><span style="color:#ADBAC7;">,log_clf),(</span><span style="color:#96D0FF;">&#39;rf&#39;</span><span style="color:#ADBAC7;">,rnd_clf),(</span><span style="color:#96D0FF;">&#39;svc&#39;</span><span style="color:#ADBAC7;">,svm_clf)],</span><span style="color:#F69D50;">voting</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;hard&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">voting_clf.fit(X_train,y_train)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 牺牲一些时间点  提升准确率  但是提高的不高</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.metrics </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> accuracy_score</span></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> clf </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> (log_clf,rnd_clf,svm_clf,voting_clf):</span></span>
<span class="line"><span style="color:#ADBAC7;">    clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#ADBAC7;">    y_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> clf.predict(X_test)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;"> (clf.</span><span style="color:#6CB6FF;">__class__</span><span style="color:#ADBAC7;">.</span><span style="color:#6CB6FF;">__name__</span><span style="color:#ADBAC7;">,accuracy_score(y_test,y_pred))</span></span>
<span class="line"><span style="color:#ADBAC7;">LogisticRegression </span><span style="color:#6CB6FF;">0.864</span></span>
<span class="line"><span style="color:#ADBAC7;">RandomForestClassifier </span><span style="color:#6CB6FF;">0.872</span></span>
<span class="line"><span style="color:#6CB6FF;">SVC</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.888</span></span>
<span class="line"><span style="color:#ADBAC7;">VotingClassifier </span><span style="color:#6CB6FF;">0.896</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 硬投票实验</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.ensemble </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> RandomForestClassifier, VotingClassifier</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.linear_model </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> LogisticRegression</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.svm </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SVC</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">log_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LogisticRegression(</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">rnd_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RandomForestClassifier(</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">svm_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SVC(</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">voting_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> VotingClassifier(</span><span style="color:#E36209;">estimators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[(</span><span style="color:#032F62;">&#39;lr&#39;</span><span style="color:#24292E;">,log_clf),(</span><span style="color:#032F62;">&#39;rf&#39;</span><span style="color:#24292E;">,rnd_clf),(</span><span style="color:#032F62;">&#39;svc&#39;</span><span style="color:#24292E;">,svm_clf)],</span><span style="color:#E36209;">voting</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;hard&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">voting_clf.fit(X_train,y_train)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 牺牲一些时间点  提升准确率  但是提高的不高</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.metrics </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> accuracy_score</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> clf </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> (log_clf,rnd_clf,svm_clf,voting_clf):</span></span>
<span class="line"><span style="color:#24292E;">    clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#24292E;">    y_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clf.predict(X_test)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;"> (clf.</span><span style="color:#005CC5;">__class__</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">,accuracy_score(y_test,y_pred))</span></span>
<span class="line"><span style="color:#24292E;">LogisticRegression </span><span style="color:#005CC5;">0.864</span></span>
<span class="line"><span style="color:#24292E;">RandomForestClassifier </span><span style="color:#005CC5;">0.872</span></span>
<span class="line"><span style="color:#005CC5;">SVC</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.888</span></span>
<span class="line"><span style="color:#24292E;">VotingClassifier </span><span style="color:#005CC5;">0.896</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.ensemble </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> RandomForestClassifier, VotingClassifier</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.linear_model </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> LogisticRegression</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.svm </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">SVC</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">log_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> LogisticRegression(</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">rnd_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RandomForestClassifier(</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;"># 要把概率值打开 </span></span>
<span class="line"><span style="color:#ADBAC7;">svm_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SVC(</span><span style="color:#F69D50;">probability</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">voting_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> VotingClassifier(</span><span style="color:#F69D50;">estimators</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[(</span><span style="color:#96D0FF;">&#39;lr&#39;</span><span style="color:#ADBAC7;">,log_clf),(</span><span style="color:#96D0FF;">&#39;rf&#39;</span><span style="color:#ADBAC7;">,rnd_clf),(</span><span style="color:#96D0FF;">&#39;svc&#39;</span><span style="color:#ADBAC7;">,svm_clf)],</span><span style="color:#F69D50;">voting</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;soft&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">voting_clf.fit(X_train,y_train)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;"># 软投票比硬投票要靠谱点</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.metrics </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> accuracy_score</span></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> clf </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> (log_clf,rnd_clf,svm_clf,voting_clf):</span></span>
<span class="line"><span style="color:#ADBAC7;">    clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#ADBAC7;">    y_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> clf.predict(X_test)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;"> (clf.</span><span style="color:#6CB6FF;">__class__</span><span style="color:#ADBAC7;">.</span><span style="color:#6CB6FF;">__name__</span><span style="color:#ADBAC7;">,accuracy_score(y_test,y_pred))</span></span>
<span class="line"><span style="color:#ADBAC7;">LogisticRegression </span><span style="color:#6CB6FF;">0.864</span></span>
<span class="line"><span style="color:#ADBAC7;">RandomForestClassifier </span><span style="color:#6CB6FF;">0.872</span></span>
<span class="line"><span style="color:#6CB6FF;">SVC</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.888</span></span>
<span class="line"><span style="color:#ADBAC7;">VotingClassifier </span><span style="color:#6CB6FF;">0.912</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.ensemble </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> RandomForestClassifier, VotingClassifier</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.linear_model </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> LogisticRegression</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.svm </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SVC</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">log_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LogisticRegression(</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">rnd_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RandomForestClassifier(</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 要把概率值打开 </span></span>
<span class="line"><span style="color:#24292E;">svm_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SVC(</span><span style="color:#E36209;">probability</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">voting_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> VotingClassifier(</span><span style="color:#E36209;">estimators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[(</span><span style="color:#032F62;">&#39;lr&#39;</span><span style="color:#24292E;">,log_clf),(</span><span style="color:#032F62;">&#39;rf&#39;</span><span style="color:#24292E;">,rnd_clf),(</span><span style="color:#032F62;">&#39;svc&#39;</span><span style="color:#24292E;">,svm_clf)],</span><span style="color:#E36209;">voting</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;soft&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">voting_clf.fit(X_train,y_train)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 软投票比硬投票要靠谱点</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.metrics </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> accuracy_score</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> clf </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> (log_clf,rnd_clf,svm_clf,voting_clf):</span></span>
<span class="line"><span style="color:#24292E;">    clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#24292E;">    y_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clf.predict(X_test)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;"> (clf.</span><span style="color:#005CC5;">__class__</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">,accuracy_score(y_test,y_pred))</span></span>
<span class="line"><span style="color:#24292E;">LogisticRegression </span><span style="color:#005CC5;">0.864</span></span>
<span class="line"><span style="color:#24292E;">RandomForestClassifier </span><span style="color:#005CC5;">0.872</span></span>
<span class="line"><span style="color:#005CC5;">SVC</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.888</span></span>
<span class="line"><span style="color:#24292E;">VotingClassifier </span><span style="color:#005CC5;">0.912</span></span></code></pre></div><h3 id="bagging策略" tabindex="-1">Bagging策略 <a class="header-anchor" href="#bagging策略" aria-label="Permalink to &quot;Bagging策略&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.3.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.ensemble </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> BaggingClassifier</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.tree </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> DecisionTreeClassifier</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">bag_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> BaggingClassifier(DecisionTreeClassifier(),</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">n_estimators</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">500</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">max_samples</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">bootstrap</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">n_jobs</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">random_state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">42</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">bag_clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#ADBAC7;">y_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> bag_clf.predict(X_test)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">accuracy_score(y_test,y_pred)</span></span>
<span class="line"><span style="color:#6CB6FF;">0.904</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">tree_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DecisionTreeClassifier(</span><span style="color:#F69D50;">random_state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">tree_clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#ADBAC7;">y_pred_tree </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> tree_clf.predict(X_test)</span></span>
<span class="line"><span style="color:#ADBAC7;">accuracy_score(y_test,y_pred_tree)</span></span>
<span class="line"><span style="color:#6CB6FF;">0.856</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.ensemble </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaggingClassifier</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.tree </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> DecisionTreeClassifier</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">bag_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BaggingClassifier(DecisionTreeClassifier(),</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">n_estimators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">max_samples</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">bootstrap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">n_jobs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">random_state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">bag_clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#24292E;">y_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bag_clf.predict(X_test)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">accuracy_score(y_test,y_pred)</span></span>
<span class="line"><span style="color:#005CC5;">0.904</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">tree_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DecisionTreeClassifier(</span><span style="color:#E36209;">random_state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">tree_clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#24292E;">y_pred_tree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tree_clf.predict(X_test)</span></span>
<span class="line"><span style="color:#24292E;">accuracy_score(y_test,y_pred_tree)</span></span>
<span class="line"><span style="color:#005CC5;">0.856</span></span></code></pre></div><h3 id="决策边界" tabindex="-1">决策边界 <a class="header-anchor" href="#决策边界" aria-label="Permalink to &quot;决策边界&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 集成与传统方法对比</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> matplotlib.colors </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> ListedColormap</span></span>
<span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">plot_decision_boundary</span><span style="color:#ADBAC7;">(clf,X,y,axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1.5</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">2.5</span><span style="color:#ADBAC7;">,</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">1.5</span><span style="color:#ADBAC7;">],alpha</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,contour </span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    x1s</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">np.linspace(axes[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">],axes[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">],</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    x2s</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">np.linspace(axes[</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">],axes[</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">],</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    x1,x2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.meshgrid(x1s,x2s)</span></span>
<span class="line"><span style="color:#ADBAC7;">    X_new </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.c_[x1.ravel(),x2.ravel()]</span></span>
<span class="line"><span style="color:#ADBAC7;">    y_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> clf.predict(X_new).reshape(x1.shape)</span></span>
<span class="line"><span style="color:#ADBAC7;">    custom_cmap </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ListedColormap([</span><span style="color:#96D0FF;">&#39;#fafab0&#39;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&#39;#9898ff&#39;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&#39;#a0faa0&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.contourf(x1,x2,y_pred,</span><span style="color:#F69D50;">cmap</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> custom_cmap,</span><span style="color:#F69D50;">alpha</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.3</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> contour:</span></span>
<span class="line"><span style="color:#ADBAC7;">        custom_cmap2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ListedColormap([</span><span style="color:#96D0FF;">&#39;#7d7d58&#39;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&#39;#4c4c7f&#39;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&#39;#507d50&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">        plt.contour(x1,x2,y_pred,</span><span style="color:#F69D50;">cmap</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> custom_cmap2,</span><span style="color:#F69D50;">alpha</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.plot(X[:,</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">][y</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">],X[:,</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">][y</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">],</span><span style="color:#96D0FF;">&#39;yo&#39;</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">alpha</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.6</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.plot(X[:,</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">][y</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">],X[:,</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">][y</span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">],</span><span style="color:#96D0FF;">&#39;bs&#39;</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">alpha</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.6</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.axis(axes)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.xlabel(</span><span style="color:#96D0FF;">&#39;x1&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.xlabel(</span><span style="color:#96D0FF;">&#39;x2&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">121</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_decision_boundary(tree_clf,X,y)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.title(</span><span style="color:#96D0FF;">&#39;Decision Tree&#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#768390;"># 决策树的边界</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">122</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_decision_boundary(bag_clf,X,y)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.title(</span><span style="color:#96D0FF;">&#39;Decision Tree With Bagging&#39;</span><span style="color:#ADBAC7;">) </span><span style="color:#768390;"># 决策树集成的模型 </span></span>
<span class="line"><span style="color:#768390;"># 越平稳的边界 越是我们想要的</span></span>
<span class="line"><span style="color:#768390;"># Colormap颜色：https://blog.csdn.net/zhaogeng111/article/details/78419015</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 集成与传统方法对比</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> matplotlib.colors </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ListedColormap</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">plot_decision_boundary</span><span style="color:#24292E;">(clf,X,y,axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1.5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2.5</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.5</span><span style="color:#24292E;">],alpha</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,contour </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    x1s</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">np.linspace(axes[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],axes[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    x2s</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">np.linspace(axes[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">],axes[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">],</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    x1,x2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.meshgrid(x1s,x2s)</span></span>
<span class="line"><span style="color:#24292E;">    X_new </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.c_[x1.ravel(),x2.ravel()]</span></span>
<span class="line"><span style="color:#24292E;">    y_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clf.predict(X_new).reshape(x1.shape)</span></span>
<span class="line"><span style="color:#24292E;">    custom_cmap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ListedColormap([</span><span style="color:#032F62;">&#39;#fafab0&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;#9898ff&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;#a0faa0&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    plt.contourf(x1,x2,y_pred,</span><span style="color:#E36209;">cmap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> custom_cmap,</span><span style="color:#E36209;">alpha</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> contour:</span></span>
<span class="line"><span style="color:#24292E;">        custom_cmap2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ListedColormap([</span><span style="color:#032F62;">&#39;#7d7d58&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;#4c4c7f&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;#507d50&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        plt.contour(x1,x2,y_pred,</span><span style="color:#E36209;">cmap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> custom_cmap2,</span><span style="color:#E36209;">alpha</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.plot(X[:,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][y</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],X[:,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][y</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span><span style="color:#032F62;">&#39;yo&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">alpha</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.6</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.plot(X[:,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][y</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],X[:,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][y</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">],</span><span style="color:#032F62;">&#39;bs&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">alpha</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.6</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.axis(axes)</span></span>
<span class="line"><span style="color:#24292E;">    plt.xlabel(</span><span style="color:#032F62;">&#39;x1&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.xlabel(</span><span style="color:#032F62;">&#39;x2&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">121</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_decision_boundary(tree_clf,X,y)</span></span>
<span class="line"><span style="color:#24292E;">plt.title(</span><span style="color:#032F62;">&#39;Decision Tree&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># 决策树的边界</span></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">122</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_decision_boundary(bag_clf,X,y)</span></span>
<span class="line"><span style="color:#24292E;">plt.title(</span><span style="color:#032F62;">&#39;Decision Tree With Bagging&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># 决策树集成的模型 </span></span>
<span class="line"><span style="color:#6A737D;"># 越平稳的边界 越是我们想要的</span></span>
<span class="line"><span style="color:#6A737D;"># Colormap颜色：https://blog.csdn.net/zhaogeng111/article/details/78419015</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.4.png" alt=""></p><h3 id="oob策略" tabindex="-1">OOB策略 <a class="header-anchor" href="#oob策略" aria-label="Permalink to &quot;OOB策略&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">bag_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> BaggingClassifier(DecisionTreeClassifier(),</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">n_estimators</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">500</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">max_samples</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">bootstrap</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">n_jobs</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">random_state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                  </span><span style="color:#F69D50;">oob_score</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">True</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">bag_clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#ADBAC7;">bag_clf.oob_score_</span></span>
<span class="line"><span style="color:#6CB6FF;">0.9253333333333333</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">y_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> bag_clf.predict(X_test)</span></span>
<span class="line"><span style="color:#ADBAC7;">accuracy_score(y_test,y_pred)</span></span>
<span class="line"><span style="color:#6CB6FF;">0.904</span></span>
<span class="line"><span style="color:#ADBAC7;">bag_clf.oob_decision_function_</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">bag_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BaggingClassifier(DecisionTreeClassifier(),</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">n_estimators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">max_samples</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">bootstrap</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">n_jobs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">random_state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#E36209;">oob_score</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">bag_clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#24292E;">bag_clf.oob_score_</span></span>
<span class="line"><span style="color:#005CC5;">0.9253333333333333</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">y_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bag_clf.predict(X_test)</span></span>
<span class="line"><span style="color:#24292E;">accuracy_score(y_test,y_pred)</span></span>
<span class="line"><span style="color:#005CC5;">0.904</span></span>
<span class="line"><span style="color:#24292E;">bag_clf.oob_decision_function_</span></span></code></pre></div><h3 id="随机森林" tabindex="-1">随机森林 <a class="header-anchor" href="#随机森林" aria-label="Permalink to &quot;随机森林&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.ensemble </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> RandomForestClassifier</span></span>
<span class="line"><span style="color:#ADBAC7;">rf_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RandomForestClassifier()</span></span>
<span class="line"><span style="color:#ADBAC7;">rf_clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#ADBAC7;">RandomForestClassifier(</span><span style="color:#F69D50;">bootstrap</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">class_weight</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">criterion</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;gini&#39;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">max_depth</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">max_features</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;auto&#39;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">max_leaf_nodes</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">min_impurity_decrease</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.0</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">min_impurity_split</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">min_samples_leaf</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">min_samples_split</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">min_weight_fraction_leaf</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.0</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">n_estimators</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">n_jobs</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">oob_score</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">False</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">verbose</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F69D50;">warm_start</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">False</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.ensemble </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> RandomForestClassifier</span></span>
<span class="line"><span style="color:#24292E;">rf_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RandomForestClassifier()</span></span>
<span class="line"><span style="color:#24292E;">rf_clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#24292E;">RandomForestClassifier(</span><span style="color:#E36209;">bootstrap</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">class_weight</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">criterion</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;gini&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">max_depth</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">max_features</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;auto&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">max_leaf_nodes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">min_impurity_decrease</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#E36209;">min_impurity_split</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">min_samples_leaf</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">min_samples_split</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">min_weight_fraction_leaf</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#E36209;">n_estimators</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#E36209;">n_jobs</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">oob_score</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">, </span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#E36209;">verbose</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">warm_start</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 特征重要性： sklearn中是看每个特征的平均深度</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.datasets </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> load_iris</span></span>
<span class="line"><span style="color:#ADBAC7;">iris </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> load_iris()</span></span>
<span class="line"><span style="color:#ADBAC7;">rf_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RandomForestClassifier(</span><span style="color:#F69D50;">n_estimators</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">500</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">n_jobs</span><span style="color:#F47067;">=-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">rf_clf.fit(iris[</span><span style="color:#96D0FF;">&#39;data&#39;</span><span style="color:#ADBAC7;">],iris[</span><span style="color:#96D0FF;">&#39;target&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> name,score </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">zip</span><span style="color:#ADBAC7;">(iris[</span><span style="color:#96D0FF;">&#39;feature_names&#39;</span><span style="color:#ADBAC7;">],rf_clf.feature_importances_):</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;"> (name,score)</span></span>
<span class="line"><span style="color:#ADBAC7;">sepal length (cm) </span><span style="color:#6CB6FF;">0.11105536416721994</span></span>
<span class="line"><span style="color:#ADBAC7;">sepal width (cm) </span><span style="color:#6CB6FF;">0.02319505364393038</span></span>
<span class="line"><span style="color:#ADBAC7;">petal length (cm) </span><span style="color:#6CB6FF;">0.44036215067701534</span></span>
<span class="line"><span style="color:#ADBAC7;">petal width (cm) </span><span style="color:#6CB6FF;">0.42538743151183406</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 特征重要性： sklearn中是看每个特征的平均深度</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.datasets </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> load_iris</span></span>
<span class="line"><span style="color:#24292E;">iris </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> load_iris()</span></span>
<span class="line"><span style="color:#24292E;">rf_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RandomForestClassifier(</span><span style="color:#E36209;">n_estimators</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">,</span><span style="color:#E36209;">n_jobs</span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">rf_clf.fit(iris[</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">],iris[</span><span style="color:#032F62;">&#39;target&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name,score </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(iris[</span><span style="color:#032F62;">&#39;feature_names&#39;</span><span style="color:#24292E;">],rf_clf.feature_importances_):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;"> (name,score)</span></span>
<span class="line"><span style="color:#24292E;">sepal length (cm) </span><span style="color:#005CC5;">0.11105536416721994</span></span>
<span class="line"><span style="color:#24292E;">sepal width (cm) </span><span style="color:#005CC5;">0.02319505364393038</span></span>
<span class="line"><span style="color:#24292E;">petal length (cm) </span><span style="color:#005CC5;">0.44036215067701534</span></span>
<span class="line"><span style="color:#24292E;">petal width (cm) </span><span style="color:#005CC5;">0.42538743151183406</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># Mnist中哪些特征比较重要呢？</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.datasets </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> fetch_mldata</span></span>
<span class="line"><span style="color:#ADBAC7;">mnist </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> fetch_mldata(</span><span style="color:#96D0FF;">&#39;MNIST original&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;"># 28*28的正方形  数字图像</span></span>
<span class="line"><span style="color:#ADBAC7;">rf_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RandomForestClassifier(</span><span style="color:#F69D50;">n_estimators</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">500</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">n_jobs</span><span style="color:#F47067;">=-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">rf_clf.fit(mnist[</span><span style="color:#96D0FF;">&#39;data&#39;</span><span style="color:#ADBAC7;">],mnist[</span><span style="color:#96D0FF;">&#39;target&#39;</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">rf_clf.feature_importances_.shape </span></span>
<span class="line"><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">784</span><span style="color:#ADBAC7;">,)</span></span>
<span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">plot_digit</span><span style="color:#ADBAC7;">(data):</span></span>
<span class="line"><span style="color:#ADBAC7;">    image </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> data.reshape(</span><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.imshow(image,</span><span style="color:#F69D50;">cmap</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">matplotlib.cm.hot)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.axis(</span><span style="color:#96D0FF;">&#39;off&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plot_digit(rf_clf.feature_importances_)</span></span>
<span class="line"><span style="color:#ADBAC7;">char </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> plt.colorbar(</span><span style="color:#F69D50;">ticks</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[rf_clf.feature_importances_.min(),rf_clf.feature_importances_.max()])</span></span>
<span class="line"><span style="color:#ADBAC7;">char.ax.set_yticklabels([</span><span style="color:#96D0FF;">&#39;Not important&#39;</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&#39;Very important&#39;</span><span style="color:#ADBAC7;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Mnist中哪些特征比较重要呢？</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.datasets </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fetch_mldata</span></span>
<span class="line"><span style="color:#24292E;">mnist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fetch_mldata(</span><span style="color:#032F62;">&#39;MNIST original&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 28*28的正方形  数字图像</span></span>
<span class="line"><span style="color:#24292E;">rf_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RandomForestClassifier(</span><span style="color:#E36209;">n_estimators</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">,</span><span style="color:#E36209;">n_jobs</span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">rf_clf.fit(mnist[</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">],mnist[</span><span style="color:#032F62;">&#39;target&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">rf_clf.feature_importances_.shape </span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">784</span><span style="color:#24292E;">,)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">plot_digit</span><span style="color:#24292E;">(data):</span></span>
<span class="line"><span style="color:#24292E;">    image </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.reshape(</span><span style="color:#005CC5;">28</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">28</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.imshow(image,</span><span style="color:#E36209;">cmap</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">matplotlib.cm.hot)</span></span>
<span class="line"><span style="color:#24292E;">    plt.axis(</span><span style="color:#032F62;">&#39;off&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plot_digit(rf_clf.feature_importances_)</span></span>
<span class="line"><span style="color:#24292E;">char </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> plt.colorbar(</span><span style="color:#E36209;">ticks</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[rf_clf.feature_importances_.min(),rf_clf.feature_importances_.max()])</span></span>
<span class="line"><span style="color:#24292E;">char.ax.set_yticklabels([</span><span style="color:#032F62;">&#39;Not important&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;Very important&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.5.png" alt=""></p><h3 id="boosting-提升策略-adaboost" tabindex="-1">Boosting-提升策略 AdaBoost <a class="header-anchor" href="#boosting-提升策略-adaboost" aria-label="Permalink to &quot;Boosting-提升策略 AdaBoost&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 跟上学时的考试一样，这次做错的题，是不是得额外注意，下次的时候就和别错了！</span></span>
<span class="line"><span style="color:#768390;"># 以SVM分类器为例来演示AdaBoost的基本策略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 跟上学时的考试一样，这次做错的题，是不是得额外注意，下次的时候就和别错了！</span></span>
<span class="line"><span style="color:#6A737D;"># 以SVM分类器为例来演示AdaBoost的基本策略</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.6.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.svm </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">SVC</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">m </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(X_train)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> subplot,learning_rate </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> ((</span><span style="color:#6CB6FF;">121</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">),(</span><span style="color:#6CB6FF;">122</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">)):</span></span>
<span class="line"><span style="color:#ADBAC7;">    sample_weights </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.ones(m)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.subplot(subplot)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">range</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">        svm_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SVC(</span><span style="color:#F69D50;">kernel</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&#39;rbf&#39;</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">C</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.05</span><span style="color:#ADBAC7;">,</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        svm_clf.fit(X_train,y_train,</span><span style="color:#F69D50;">sample_weight</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> sample_weights)</span></span>
<span class="line"><span style="color:#ADBAC7;">        y_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> svm_clf.predict(X_train)</span></span>
<span class="line"><span style="color:#ADBAC7;">        sample_weights[y_pred </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> y_train] </span><span style="color:#F47067;">*=</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">1</span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;">learning_rate)</span></span>
<span class="line"><span style="color:#ADBAC7;">        plot_decision_boundary(svm_clf,X,y,</span><span style="color:#F69D50;">alpha</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0.2</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        plt.title(</span><span style="color:#96D0FF;">&#39;learning_rate = </span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(learning_rate))</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> subplot </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">121</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">        plt.text(</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.7</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.65</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;1&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        plt.text(</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.6</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.10</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;2&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        plt.text(</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,  </span><span style="color:#6CB6FF;">0.10</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;3&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        plt.text(</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.4</span><span style="color:#ADBAC7;">,  </span><span style="color:#6CB6FF;">0.55</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;4&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        plt.text(</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.3</span><span style="color:#ADBAC7;">,  </span><span style="color:#6CB6FF;">0.90</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;5&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.svm </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SVC</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(X_train)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> subplot,learning_rate </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> ((</span><span style="color:#005CC5;">121</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),(</span><span style="color:#005CC5;">122</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">)):</span></span>
<span class="line"><span style="color:#24292E;">    sample_weights </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.ones(m)</span></span>
<span class="line"><span style="color:#24292E;">    plt.subplot(subplot)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        svm_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SVC(</span><span style="color:#E36209;">kernel</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;rbf&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">C</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.05</span><span style="color:#24292E;">,</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        svm_clf.fit(X_train,y_train,</span><span style="color:#E36209;">sample_weight</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sample_weights)</span></span>
<span class="line"><span style="color:#24292E;">        y_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> svm_clf.predict(X_train)</span></span>
<span class="line"><span style="color:#24292E;">        sample_weights[y_pred </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> y_train] </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">learning_rate)</span></span>
<span class="line"><span style="color:#24292E;">        plot_decision_boundary(svm_clf,X,y,</span><span style="color:#E36209;">alpha</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        plt.title(</span><span style="color:#032F62;">&#39;learning_rate = </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(learning_rate))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> subplot </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">121</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        plt.text(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.7</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.65</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        plt.text(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.6</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        plt.text(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0.10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        plt.text(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.4</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0.55</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;4&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        plt.text(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.3</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">0.90</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.7.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.ensemble </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> AdaBoostClassifier</span></span>
<span class="line"><span style="color:#ADBAC7;">ada_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> AdaBoostClassifier(DecisionTreeClassifier(</span><span style="color:#F69D50;">max_depth</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">                   </span><span style="color:#F69D50;">n_estimators</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">200</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                   </span><span style="color:#F69D50;">learning_rate</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                   </span><span style="color:#F69D50;">random_state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">42</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">ada_clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_decision_boundary(ada_clf,X,y)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.ensemble </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> AdaBoostClassifier</span></span>
<span class="line"><span style="color:#24292E;">ada_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AdaBoostClassifier(DecisionTreeClassifier(</span><span style="color:#E36209;">max_depth</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#E36209;">n_estimators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#E36209;">learning_rate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#E36209;">random_state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">ada_clf.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#24292E;">plot_decision_boundary(ada_clf,X,y)</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.8.png" alt=""></p><h3 id="gradient-boosting" tabindex="-1">Gradient Boosting <a class="header-anchor" href="#gradient-boosting" aria-label="Permalink to &quot;Gradient Boosting&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;"># 梯度提升决策树</span></span>
<span class="line"><span style="color:#ADBAC7;">np.random.seed(</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">X </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.random.rand(</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.5</span></span>
<span class="line"><span style="color:#ADBAC7;">y </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">X[:,</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">]</span><span style="color:#F47067;">**</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.05</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">np.random.randn(</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">y.shape</span></span>
<span class="line"><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">,)</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.tree </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> DecisionTreeRegressor</span></span>
<span class="line"><span style="color:#ADBAC7;">tree_reg1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DecisionTreeRegressor(</span><span style="color:#F69D50;">max_depth</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">tree_reg1.fit(X,y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">y2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> y </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> tree_reg1.predict(X)</span></span>
<span class="line"><span style="color:#ADBAC7;">tree_reg2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DecisionTreeRegressor(</span><span style="color:#F69D50;">max_depth</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">tree_reg2.fit(X,y2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">y3 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> y2 </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> tree_reg2.predict(X)</span></span>
<span class="line"><span style="color:#ADBAC7;">tree_reg3 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DecisionTreeRegressor(</span><span style="color:#F69D50;">max_depth</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">tree_reg3.fit(X,y3)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">X_new </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.array([[</span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">]])</span></span>
<span class="line"><span style="color:#ADBAC7;">y_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">sum</span><span style="color:#ADBAC7;">(tree.predict(X_new) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> tree </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> (tree_reg1,tree_reg2,tree_reg3))</span></span>
<span class="line"><span style="color:#ADBAC7;">y_pred</span></span>
<span class="line"><span style="color:#ADBAC7;">array([</span><span style="color:#6CB6FF;">0.75026781</span><span style="color:#ADBAC7;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 梯度提升决策树</span></span>
<span class="line"><span style="color:#24292E;">np.random.seed(</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">X </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.random.rand(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span></span>
<span class="line"><span style="color:#24292E;">y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">X[:,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">**</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.05</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">np.random.randn(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">y.shape</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,)</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.tree </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> DecisionTreeRegressor</span></span>
<span class="line"><span style="color:#24292E;">tree_reg1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DecisionTreeRegressor(</span><span style="color:#E36209;">max_depth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">tree_reg1.fit(X,y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">y2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> tree_reg1.predict(X)</span></span>
<span class="line"><span style="color:#24292E;">tree_reg2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DecisionTreeRegressor(</span><span style="color:#E36209;">max_depth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">tree_reg2.fit(X,y2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">y3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y2 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> tree_reg2.predict(X)</span></span>
<span class="line"><span style="color:#24292E;">tree_reg3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DecisionTreeRegressor(</span><span style="color:#E36209;">max_depth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">tree_reg3.fit(X,y3)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">X_new </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.array([[</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">]])</span></span>
<span class="line"><span style="color:#24292E;">y_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(tree.predict(X_new) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> tree </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> (tree_reg1,tree_reg2,tree_reg3))</span></span>
<span class="line"><span style="color:#24292E;">y_pred</span></span>
<span class="line"><span style="color:#24292E;">array([</span><span style="color:#005CC5;">0.75026781</span><span style="color:#24292E;">])</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">def</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">plot_predictions</span><span style="color:#ADBAC7;">(regressors, X, y, axes, label</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">, style</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;r-&quot;</span><span style="color:#ADBAC7;">, data_style</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;b.&quot;</span><span style="color:#ADBAC7;">, data_label</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">None</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    x1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.linspace(axes[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">], axes[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">], </span><span style="color:#6CB6FF;">500</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    y_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">sum</span><span style="color:#ADBAC7;">(regressor.predict(x1.reshape(</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> regressor </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> regressors)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.plot(X[:, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">], y, data_style, </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">data_label)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.plot(x1, y_pred, style, </span><span style="color:#F69D50;">linewidth</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">label)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> label </span><span style="color:#F47067;">or</span><span style="color:#ADBAC7;"> data_label:</span></span>
<span class="line"><span style="color:#ADBAC7;">        plt.legend(</span><span style="color:#F69D50;">loc</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;upper center&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    plt.axis(axes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">321</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([tree_reg1], X, y, </span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">], </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;$h_1(x_1)$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">style</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;g-&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">data_label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;Training set&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.ylabel(</span><span style="color:#96D0FF;">&quot;$y$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">rotation</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.title(</span><span style="color:#96D0FF;">&quot;Residuals and tree predictions&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">322</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([tree_reg1], X, y, </span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">], </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;$h(x_1) = h_1(x_1)$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">data_label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;Training set&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.ylabel(</span><span style="color:#96D0FF;">&quot;$y$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">rotation</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.title(</span><span style="color:#96D0FF;">&quot;Ensemble predictions&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">323</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([tree_reg2], X, y2, </span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">], </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;$h_2(x_1)$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">style</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;g-&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">data_style</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;k+&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">data_label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;Residuals&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.ylabel(</span><span style="color:#96D0FF;">&quot;$y - h_1(x_1)$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">324</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([tree_reg1, tree_reg2], X, y, </span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">], </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;$h(x_1) = h_1(x_1) + h_2(x_1)$&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.ylabel(</span><span style="color:#96D0FF;">&quot;$y$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">rotation</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">325</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([tree_reg3], X, y3, </span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">], </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;$h_3(x_1)$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">style</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;g-&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">data_style</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;k+&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.ylabel(</span><span style="color:#96D0FF;">&quot;$y - h_1(x_1) - h_2(x_1)$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.xlabel(</span><span style="color:#96D0FF;">&quot;$x_1$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">326</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([tree_reg1, tree_reg2, tree_reg3], X, y, </span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">], </span><span style="color:#F69D50;">label</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;$h(x_1) = h_1(x_1) + h_2(x_1) + h_3(x_1)$&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.xlabel(</span><span style="color:#96D0FF;">&quot;$x_1$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.ylabel(</span><span style="color:#96D0FF;">&quot;$y$&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">fontsize</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">rotation</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.show()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">plot_predictions</span><span style="color:#24292E;">(regressors, X, y, axes, label</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, style</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;r-&quot;</span><span style="color:#24292E;">, data_style</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;b.&quot;</span><span style="color:#24292E;">, data_label</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    x1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.linspace(axes[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], axes[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    y_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(regressor.predict(x1.reshape(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> regressor </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> regressors)</span></span>
<span class="line"><span style="color:#24292E;">    plt.plot(X[:, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], y, data_style, </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">data_label)</span></span>
<span class="line"><span style="color:#24292E;">    plt.plot(x1, y_pred, style, </span><span style="color:#E36209;">linewidth</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">label)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> label </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> data_label:</span></span>
<span class="line"><span style="color:#24292E;">        plt.legend(</span><span style="color:#E36209;">loc</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;upper center&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    plt.axis(axes)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">321</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([tree_reg1], X, y, </span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">], </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$h_1(x_1)$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">style</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;g-&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data_label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Training set&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.ylabel(</span><span style="color:#032F62;">&quot;$y$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#E36209;">rotation</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.title(</span><span style="color:#032F62;">&quot;Residuals and tree predictions&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">322</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([tree_reg1], X, y, </span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">], </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$h(x_1) = h_1(x_1)$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data_label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Training set&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.ylabel(</span><span style="color:#032F62;">&quot;$y$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#E36209;">rotation</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.title(</span><span style="color:#032F62;">&quot;Ensemble predictions&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">323</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([tree_reg2], X, y2, </span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">], </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$h_2(x_1)$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">style</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;g-&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data_style</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;k+&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data_label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Residuals&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.ylabel(</span><span style="color:#032F62;">&quot;$y - h_1(x_1)$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">324</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([tree_reg1, tree_reg2], X, y, </span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">], </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$h(x_1) = h_1(x_1) + h_2(x_1)$&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.ylabel(</span><span style="color:#032F62;">&quot;$y$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#E36209;">rotation</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">325</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([tree_reg3], X, y3, </span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">], </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$h_3(x_1)$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">style</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;g-&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data_style</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;k+&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.ylabel(</span><span style="color:#032F62;">&quot;$y - h_1(x_1) - h_2(x_1)$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.xlabel(</span><span style="color:#032F62;">&quot;$x_1$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">326</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([tree_reg1, tree_reg2, tree_reg3], X, y, </span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">], </span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$h(x_1) = h_1(x_1) + h_2(x_1) + h_3(x_1)$&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.xlabel(</span><span style="color:#032F62;">&quot;$x_1$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.ylabel(</span><span style="color:#032F62;">&quot;$y$&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fontsize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#E36209;">rotation</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.show()</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.9.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.ensemble </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> GradientBoostingRegressor</span></span>
<span class="line"><span style="color:#ADBAC7;">gbrt </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> GradientBoostingRegressor(</span><span style="color:#F69D50;">max_depth</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">n_estimators</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">learning_rate</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1.0</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">random_state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">41</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">gbrt.fit(X,y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">gbrt_slow_1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> GradientBoostingRegressor(</span><span style="color:#F69D50;">max_depth</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">n_estimators</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">learning_rate</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">random_state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">41</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">gbrt_slow_1.fit(X,y) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">gbrt_slow_2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> GradientBoostingRegressor(</span><span style="color:#F69D50;">max_depth</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">n_estimators</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">200</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">learning_rate</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">random_state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">41</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">gbrt_slow_2.fit(X,y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">121</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([gbrt],X,y,</span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">],</span><span style="color:#F69D50;">label</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Ensemble predictions&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.title(</span><span style="color:#96D0FF;">&#39;learning_rate=</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">,n_estimators=</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(gbrt.learning_rate,gbrt.n_estimators))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">122</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([gbrt_slow_1],X,y,</span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">],</span><span style="color:#F69D50;">label</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Ensemble predictions&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.title(</span><span style="color:#96D0FF;">&#39;learning_rate=</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">,n_estimators=</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(gbrt_slow_1.learning_rate,gbrt_slow_1.n_estimators))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.ensemble </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> GradientBoostingRegressor</span></span>
<span class="line"><span style="color:#24292E;">gbrt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GradientBoostingRegressor(</span><span style="color:#E36209;">max_depth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">n_estimators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">learning_rate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">random_state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">41</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">gbrt.fit(X,y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">gbrt_slow_1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GradientBoostingRegressor(</span><span style="color:#E36209;">max_depth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">n_estimators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">learning_rate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">random_state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">41</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">gbrt_slow_1.fit(X,y) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">gbrt_slow_2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GradientBoostingRegressor(</span><span style="color:#E36209;">max_depth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">n_estimators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">learning_rate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">random_state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">41</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">gbrt_slow_2.fit(X,y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">121</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([gbrt],X,y,</span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">],</span><span style="color:#E36209;">label</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Ensemble predictions&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.title(</span><span style="color:#032F62;">&#39;learning_rate=</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">,n_estimators=</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(gbrt.learning_rate,gbrt.n_estimators))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">122</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([gbrt_slow_1],X,y,</span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">],</span><span style="color:#E36209;">label</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Ensemble predictions&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.title(</span><span style="color:#032F62;">&#39;learning_rate=</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">,n_estimators=</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(gbrt_slow_1.learning_rate,gbrt_slow_1.n_estimators))</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.10.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">121</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([gbrt_slow_2],X,y,</span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">],</span><span style="color:#F69D50;">label</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Ensemble predictions&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.title(</span><span style="color:#96D0FF;">&#39;learning_rate=</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">,n_estimators=</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(gbrt_slow_2.learning_rate,gbrt_slow_2.n_estimators))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">122</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([gbrt_slow_1],X,y,</span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">],</span><span style="color:#F69D50;">label</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;Ensemble predictions&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.title(</span><span style="color:#96D0FF;">&#39;learning_rate=</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">,n_estimators=</span><span style="color:#F47067;">{}</span><span style="color:#96D0FF;">&#39;</span><span style="color:#ADBAC7;">.format(gbrt_slow_1.learning_rate,gbrt_slow_1.n_estimators))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">121</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([gbrt_slow_2],X,y,</span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">],</span><span style="color:#E36209;">label</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Ensemble predictions&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.title(</span><span style="color:#032F62;">&#39;learning_rate=</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">,n_estimators=</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(gbrt_slow_2.learning_rate,gbrt_slow_2.n_estimators))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">122</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([gbrt_slow_1],X,y,</span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">],</span><span style="color:#E36209;">label</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Ensemble predictions&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.title(</span><span style="color:#032F62;">&#39;learning_rate=</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">,n_estimators=</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(gbrt_slow_1.learning_rate,gbrt_slow_1.n_estimators))</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.11.png" alt=""></p><h3 id="提前停止策略" tabindex="-1">提前停止策略 <a class="header-anchor" href="#提前停止策略" aria-label="Permalink to &quot;提前停止策略&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.metrics </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> mean_squared_error</span></span>
<span class="line"><span style="color:#ADBAC7;">X_train,X_val,y_train,y_val </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> train_test_split(X,y,</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">49</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">gbrt </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> GradientBoostingRegressor(</span><span style="color:#F69D50;">max_depth</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">n_estimators</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">120</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">random_state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">42</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">gbrt.fit(X_train,y_train)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">errors </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [mean_squared_error(y_val,y_pred) </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> y_pred </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> gbrt.staged_predict(X_val)]</span></span>
<span class="line"><span style="color:#ADBAC7;">bst_n_estimators </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.argmin(errors)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">gbrt_best </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> GradientBoostingRegressor(</span><span style="color:#F69D50;">max_depth</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">n_estimators</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> bst_n_estimators,</span></span>
<span class="line"><span style="color:#ADBAC7;">                          </span><span style="color:#F69D50;">random_state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">42</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">gbrt_best.fit(X_train,y_train)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.metrics </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mean_squared_error</span></span>
<span class="line"><span style="color:#24292E;">X_train,X_val,y_train,y_val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_test_split(X,y,</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">49</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">gbrt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GradientBoostingRegressor(</span><span style="color:#E36209;">max_depth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">n_estimators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">120</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">random_state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">gbrt.fit(X_train,y_train)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">errors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [mean_squared_error(y_val,y_pred) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> y_pred </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> gbrt.staged_predict(X_val)]</span></span>
<span class="line"><span style="color:#24292E;">bst_n_estimators </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.argmin(errors)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">gbrt_best </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GradientBoostingRegressor(</span><span style="color:#E36209;">max_depth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">n_estimators</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bst_n_estimators,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">random_state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">gbrt_best.fit(X_train,y_train)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">min_error </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.min(errors)</span></span>
<span class="line"><span style="color:#ADBAC7;">min_error</span></span>
<span class="line"><span style="color:#6CB6FF;">0.002712853325235463</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.figure(</span><span style="color:#F69D50;">figsize</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">121</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.plot(errors,</span><span style="color:#96D0FF;">&#39;b.-&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.plot([bst_n_estimators,bst_n_estimators],[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">,min_error],</span><span style="color:#96D0FF;">&#39;k--&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.plot([</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">120</span><span style="color:#ADBAC7;">],[min_error,min_error],</span><span style="color:#96D0FF;">&#39;k--&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.axis([</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">120</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.01</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.title(</span><span style="color:#96D0FF;">&#39;Val Error&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">plt.subplot(</span><span style="color:#6CB6FF;">122</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">plot_predictions([gbrt_best],X,y,</span><span style="color:#F69D50;">axes</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">[</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.5</span><span style="color:#ADBAC7;">,</span><span style="color:#F47067;">-</span><span style="color:#6CB6FF;">0.1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">0.8</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#ADBAC7;">plt.title(</span><span style="color:#96D0FF;">&#39;Best Model(</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> trees)&#39;</span><span style="color:#F47067;">%</span><span style="color:#ADBAC7;">bst_n_estimators)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">min_error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.min(errors)</span></span>
<span class="line"><span style="color:#24292E;">min_error</span></span>
<span class="line"><span style="color:#005CC5;">0.002712853325235463</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.figure(</span><span style="color:#E36209;">figsize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">121</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.plot(errors,</span><span style="color:#032F62;">&#39;b.-&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.plot([bst_n_estimators,bst_n_estimators],[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,min_error],</span><span style="color:#032F62;">&#39;k--&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.plot([</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">120</span><span style="color:#24292E;">],[min_error,min_error],</span><span style="color:#032F62;">&#39;k--&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plt.axis([</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">120</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.01</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">plt.title(</span><span style="color:#032F62;">&#39;Val Error&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">plt.subplot(</span><span style="color:#005CC5;">122</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">plot_predictions([gbrt_best],X,y,</span><span style="color:#E36209;">axes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">plt.title(</span><span style="color:#032F62;">&#39;Best Model(</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> trees)&#39;</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">bst_n_estimators)</span></span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.12.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#ADBAC7;">gbrt </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> GradientBoostingRegressor(</span><span style="color:#F69D50;">max_depth</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                             </span><span style="color:#F69D50;">random_state</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">                                 </span><span style="color:#F69D50;">warm_start</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">error_going_up </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span></span>
<span class="line"><span style="color:#ADBAC7;">min_val_error </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">float</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&#39;inf&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> n_estimators </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">range</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,</span><span style="color:#6CB6FF;">120</span><span style="color:#ADBAC7;">):</span></span>
<span class="line"><span style="color:#ADBAC7;">    gbrt.n_estimators </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> n_estimators</span></span>
<span class="line"><span style="color:#ADBAC7;">    gbrt.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#ADBAC7;">    y_pred </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> gbrt.predict(X_val)</span></span>
<span class="line"><span style="color:#ADBAC7;">    val_error </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> mean_squared_error(y_val,y_pred)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> val_error </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> min_val_error:</span></span>
<span class="line"><span style="color:#ADBAC7;">        min_val_error </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> val_error</span></span>
<span class="line"><span style="color:#ADBAC7;">        error_going_up </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">        error_going_up </span><span style="color:#F47067;">+=</span><span style="color:#6CB6FF;">1</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> error_going_up </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;"> (gbrt.n_estimators)</span></span>
<span class="line"><span style="color:#6CB6FF;">61</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gbrt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GradientBoostingRegressor(</span><span style="color:#E36209;">max_depth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                             </span><span style="color:#E36209;">random_state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                 </span><span style="color:#E36209;">warm_start</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">error_going_up </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">min_val_error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;inf&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> n_estimators </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">120</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    gbrt.n_estimators </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n_estimators</span></span>
<span class="line"><span style="color:#24292E;">    gbrt.fit(X_train,y_train)</span></span>
<span class="line"><span style="color:#24292E;">    y_pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gbrt.predict(X_val)</span></span>
<span class="line"><span style="color:#24292E;">    val_error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mean_squared_error(y_val,y_pred)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> val_error </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> min_val_error:</span></span>
<span class="line"><span style="color:#24292E;">        min_val_error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val_error</span></span>
<span class="line"><span style="color:#24292E;">        error_going_up </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        error_going_up </span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> error_going_up </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;"> (gbrt.n_estimators)</span></span>
<span class="line"><span style="color:#005CC5;">61</span></span></code></pre></div><h3 id="stacking-堆叠集成" tabindex="-1">Stacking（堆叠集成） <a class="header-anchor" href="#stacking-堆叠集成" aria-label="Permalink to &quot;Stacking（堆叠集成）&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/python/ML/15.13.png" alt=""></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.datasets </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> fetch_mldata</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.model_selection </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> train_test_split</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">mnist </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> fetch_mldata(</span><span style="color:#96D0FF;">&#39;MNIST original&#39;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">X_train_val, X_test, y_train_val, y_test </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> train_test_split(</span></span>
<span class="line"><span style="color:#ADBAC7;">    mnist.data, mnist.target, </span><span style="color:#F69D50;">test_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">10000</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">X_train, X_val, y_train, y_val </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> train_test_split(</span></span>
<span class="line"><span style="color:#ADBAC7;">    X_train_val, y_train_val, </span><span style="color:#F69D50;">test_size</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">10000</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.datasets </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fetch_mldata</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.model_selection </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> train_test_split</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mnist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fetch_mldata(</span><span style="color:#032F62;">&#39;MNIST original&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">X_train_val, X_test, y_train_val, y_test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_test_split(</span></span>
<span class="line"><span style="color:#24292E;">    mnist.data, mnist.target, </span><span style="color:#E36209;">test_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">, </span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">X_train, X_val, y_train, y_val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> train_test_split(</span></span>
<span class="line"><span style="color:#24292E;">    X_train_val, y_train_val, </span><span style="color:#E36209;">test_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">, </span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.ensemble </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> RandomForestClassifier, ExtraTreesClassifier</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.svm </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> LinearSVC</span></span>
<span class="line"><span style="color:#F47067;">from</span><span style="color:#ADBAC7;"> sklearn.neural_network </span><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> MLPClassifier</span></span>
<span class="line"><span style="color:#ADBAC7;">random_forest_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RandomForestClassifier(</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">extra_trees_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ExtraTreesClassifier(</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">svm_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> LinearSVC(</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">mlp_clf </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MLPClassifier(</span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">estimators </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> [random_forest_clf, extra_trees_clf, svm_clf, mlp_clf]</span></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> estimator </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> estimators:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">print</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Training the&quot;</span><span style="color:#ADBAC7;">, estimator)</span></span>
<span class="line"><span style="color:#ADBAC7;">    estimator.fit(X_train, y_train)</span></span>
<span class="line"><span style="color:#ADBAC7;"> </span></span>
<span class="line"><span style="color:#ADBAC7;">X_val_predictions </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> np.empty((</span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(X_val), </span><span style="color:#6CB6FF;">len</span><span style="color:#ADBAC7;">(estimators)), </span><span style="color:#F69D50;">dtype</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">np.float32)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> index, estimator </span><span style="color:#F47067;">in</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">enumerate</span><span style="color:#ADBAC7;">(estimators):</span></span>
<span class="line"><span style="color:#ADBAC7;">    X_val_predictions[:, index] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> estimator.predict(X_val)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">X_val_predictions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">rnd_forest_blender </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RandomForestClassifier(</span><span style="color:#F69D50;">n_estimators</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">200</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">oob_score</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">True</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">random_state</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">rnd_forest_blender.fit(X_val_predictions, y_val)</span></span>
<span class="line"><span style="color:#ADBAC7;">rnd_forest_blender.oob_score_</span></span>
<span class="line"><span style="color:#6CB6FF;">0.9642</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.ensemble </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> RandomForestClassifier, ExtraTreesClassifier</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.svm </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> LinearSVC</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.neural_network </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> MLPClassifier</span></span>
<span class="line"><span style="color:#24292E;">random_forest_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RandomForestClassifier(</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">extra_trees_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtraTreesClassifier(</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">svm_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LinearSVC(</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">mlp_clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MLPClassifier(</span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">estimators </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [random_forest_clf, extra_trees_clf, svm_clf, mlp_clf]</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> estimator </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> estimators:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Training the&quot;</span><span style="color:#24292E;">, estimator)</span></span>
<span class="line"><span style="color:#24292E;">    estimator.fit(X_train, y_train)</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">X_val_predictions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.empty((</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(X_val), </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(estimators)), </span><span style="color:#E36209;">dtype</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">np.float32)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> index, estimator </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(estimators):</span></span>
<span class="line"><span style="color:#24292E;">    X_val_predictions[:, index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> estimator.predict(X_val)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">X_val_predictions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">rnd_forest_blender </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RandomForestClassifier(</span><span style="color:#E36209;">n_estimators</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#E36209;">oob_score</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">rnd_forest_blender.fit(X_val_predictions, y_val)</span></span>
<span class="line"><span style="color:#24292E;">rnd_forest_blender.oob_score_</span></span>
<span class="line"><span style="color:#005CC5;">0.9642</span></span></code></pre></div>`,47);function m(s,g,f,h,u,b){const o=t,e=D("ClientOnly");return l(),c("div",null,[_,y(e,null,{default:i(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),F(o,{key:0,article:s.$frontmatter},null,8,["article"])):B("",!0)]}),_:1}),d])}const q=r(E,[["render",m]]);export{X as __pageData,q as default};
