import{_ as e}from"./chunks/ArticleMetadata.e10718d6.js";import{_ as c,v as l,b as r,E as y,O as A,F as p,L as i,R as D,M as C,C as B,B as E}from"./chunks/framework.2aeb816e.js";import"./chunks/md5.772bbdf1.js";const _=JSON.parse('{"title":"Morris遍历","description":"","frontmatter":{"title":"Morris遍历","author":"阿源","date":"2023/03/24 12:00","categories":["数据结构与算法"],"tags":["数据结构与算法"]},"headers":[],"relativePath":"courses/algorithm/01-左程云算法基础/24-Morris遍历.md","filePath":"courses/algorithm/01-左程云算法基础/24-Morris遍历.md","lastUpdated":1691397650000}'),F={name:"courses/algorithm/01-左程云算法基础/24-Morris遍历.md"},u=p("h1",{id:"morris遍历",tabindex:"-1"},[i("Morris遍历 "),p("a",{class:"header-anchor",href:"#morris遍历","aria-label":'Permalink to "Morris遍历"'},"​")],-1),h=D(`<p>Morris遍历细节 假设来到当前节点cur,开始时cur来到头节点位置 1)如果cur没有左孩子，cur向右移动(cur = cur,right) 2)如果cur有左孩子，找到左子树上最右的节点mostRight : a.如果mostRight的右指针指向空，让其指向cur,然后cur向左移动(cur = cur.left) b.如果mostRight的右指针指向cur,让其指向null,然后cur向右移动(cur = cur.right) 3) cur为空时遍历停止</p><p>某个节点有左树一定会到两次，且第二次时左树已经遍历完毕</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">一种遍历二叉树的方式，并且时间复杂度0(N)， 额外空间复杂度0(1)</span></span>
<span class="line"><span style="color:#adbac7;">通过利用原树中大量空闲指针的方式，达到节省空间的目的</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">一种遍历二叉树的方式，并且时间复杂度0(N)， 额外空间复杂度0(1)</span></span>
<span class="line"><span style="color:#24292e;">通过利用原树中大量空闲指针的方式，达到节省空间的目的</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">morris</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head;</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mostRight</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			mostRight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 当前节点有左孩子</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#768390;">// 左树的右指针不为空  左树的有指针不能指向自己</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (mostRight.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> mostRight.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> cur) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> mostRight.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight.right </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur;</span></span>
<span class="line"><span style="color:#ADBAC7;">					cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">continue</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">//mostRight.right == cur</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">morris</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">		Node mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 当前节点有左孩子</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 左树的右指针不为空  左树的有指针不能指向自己</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (mostRight.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mostRight.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> cur) {</span></span>
<span class="line"><span style="color:#24292E;">					mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mostRight.right;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					mostRight.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur;</span></span>
<span class="line"><span style="color:#24292E;">					cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">//mostRight.right == cur</span></span>
<span class="line"><span style="color:#24292E;">					mostRight.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.right;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 先序  有左树时第一次遇到打印， 没左树时直接打印</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">morrisPre</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head;</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mostRight</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			mostRight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (mostRight.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> mostRight.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> cur) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> mostRight.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight.right </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					System.out.</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">(cur.value </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur;</span></span>
<span class="line"><span style="color:#ADBAC7;">					cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">continue</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">				System.out.</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">(cur.value </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 先序  有左树时第一次遇到打印， 没左树时直接打印</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">morrisPre</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">		Node mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (mostRight.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mostRight.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> cur) {</span></span>
<span class="line"><span style="color:#24292E;">					mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mostRight.right;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(cur.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">					mostRight.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur;</span></span>
<span class="line"><span style="color:#24292E;">					cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					mostRight.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(cur.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.right;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 中序  第二次出现的时候打印  </span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">morrisIn</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head;</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mostRight</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			mostRight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (mostRight.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> mostRight.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> cur) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> mostRight.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight.right </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur;</span></span>
<span class="line"><span style="color:#ADBAC7;">					cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">continue</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			System.out.</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">(cur.value </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 中序  第二次出现的时候打印  </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">morrisIn</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">		Node mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (mostRight.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mostRight.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> cur) {</span></span>
<span class="line"><span style="color:#24292E;">					mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mostRight.right;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					mostRight.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur;</span></span>
<span class="line"><span style="color:#24292E;">					cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					mostRight.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(cur.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.right;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">morrisPos</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head;</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mostRight</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			mostRight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (mostRight.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> mostRight.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> cur) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> mostRight.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight.right </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur;</span></span>
<span class="line"><span style="color:#ADBAC7;">					cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">continue</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">                    </span><span style="color:#768390;">// 逆序打印第二次出现节点的左边界</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#DCBDFB;">printEdge</span><span style="color:#ADBAC7;">(cur.left);</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 打印整体</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">printEdge</span><span style="color:#ADBAC7;">(head);</span></span>
<span class="line"><span style="color:#ADBAC7;">		System.out.</span><span style="color:#DCBDFB;">println</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printEdge</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">tail</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">reverseEdge</span><span style="color:#ADBAC7;">(head);</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> tail;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			System.out.</span><span style="color:#DCBDFB;">print</span><span style="color:#ADBAC7;">(cur.value </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">			cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#DCBDFB;">reverseEdge</span><span style="color:#ADBAC7;">(tail);</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> Node </span><span style="color:#DCBDFB;">reverseEdge</span><span style="color:#ADBAC7;">(Node from) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">pre</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">next</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (from </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			next </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> from.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">			from.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pre;</span></span>
<span class="line"><span style="color:#ADBAC7;">			pre </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> from;</span></span>
<span class="line"><span style="color:#ADBAC7;">			from </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> next;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> pre;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">morrisPos</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">		Node mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (mostRight.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mostRight.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> cur) {</span></span>
<span class="line"><span style="color:#24292E;">					mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mostRight.right;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					mostRight.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur;</span></span>
<span class="line"><span style="color:#24292E;">					cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					mostRight.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 逆序打印第二次出现节点的左边界</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6F42C1;">printEdge</span><span style="color:#24292E;">(cur.left);</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.right;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 打印整体</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">printEdge</span><span style="color:#24292E;">(head);</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printEdge</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		Node tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reverseEdge</span><span style="color:#24292E;">(head);</span></span>
<span class="line"><span style="color:#24292E;">		Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tail;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(cur.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">			cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.right;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">reverseEdge</span><span style="color:#24292E;">(tail);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Node </span><span style="color:#6F42C1;">reverseEdge</span><span style="color:#24292E;">(Node from) {</span></span>
<span class="line"><span style="color:#24292E;">		Node pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		Node next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (from </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> from.right;</span></span>
<span class="line"><span style="color:#24292E;">			from.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pre;</span></span>
<span class="line"><span style="color:#24292E;">			pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> from;</span></span>
<span class="line"><span style="color:#24292E;">			from </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pre;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h3 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h3><p>给定一棵二叉树的头节点head 求以head为头的树中，最小深度是多少?</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Node</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">val;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">left;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Node</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">x</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			val </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> x;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> val;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node left;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Node right;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">minHeight1</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">p</span><span style="color:#ADBAC7;">(head);</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#768390;">// 返回x为头的树，最小深度是多少</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">p</span><span style="color:#ADBAC7;">(Node x) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (x.left </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> x.right </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// 左右子树起码有一个不为空</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">leftH</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (x.left </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			leftH </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">p</span><span style="color:#ADBAC7;">(x.left);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">rightH</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (x.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			rightH </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">p</span><span style="color:#ADBAC7;">(x.right);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">min</span><span style="color:#ADBAC7;">(leftH, rightH);</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minHeight1</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(head);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 返回x为头的树，最小深度是多少</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(Node x) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x.left </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> x.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 左右子树起码有一个不为空</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> leftH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x.left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			leftH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(x.left);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rightH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			rightH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(x.right);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(leftH, rightH);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 根据morris遍历改写</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 由于改动过指针  层数怎么正确更新  当前节点是否是叶节点</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 对于层数，需要看</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 第二次回到的节点，看恢复的节点是否是叶节点</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">minHeight2</span><span style="color:#ADBAC7;">(Node head) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (head </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head;</span></span>
<span class="line"><span style="color:#ADBAC7;">		Node</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mostRight</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">curLevel</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; </span><span style="color:#768390;">// 当前节点的层数</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">minHeight</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			mostRight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">rightBoardSize</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (mostRight.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> mostRight.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> cur) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					rightBoardSize</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> mostRight.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight.right </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) { </span><span style="color:#768390;">// 第一次到达</span></span>
<span class="line"><span style="color:#ADBAC7;">					curLevel</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur;</span></span>
<span class="line"><span style="color:#ADBAC7;">					cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.left;</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">continue</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">// 第二次到达</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (mostRight.left </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">						minHeight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">min</span><span style="color:#ADBAC7;">(minHeight, curLevel);</span></span>
<span class="line"><span style="color:#ADBAC7;">					}</span></span>
<span class="line"><span style="color:#ADBAC7;">					curLevel </span><span style="color:#F47067;">-=</span><span style="color:#ADBAC7;"> rightBoardSize;</span></span>
<span class="line"><span style="color:#ADBAC7;">					mostRight.right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">// 只有一次到达</span></span>
<span class="line"><span style="color:#ADBAC7;">				curLevel</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">			cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">finalRight</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> head;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (cur.right </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			finalRight</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cur.right;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (cur.left </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> cur.right </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			minHeight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Math.</span><span style="color:#DCBDFB;">min</span><span style="color:#ADBAC7;">(minHeight, finalRight);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> minHeight;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 根据morris遍历改写</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 由于改动过指针  层数怎么正确更新  当前节点是否是叶节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对于层数，需要看</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第二次回到的节点，看恢复的节点是否是叶节点</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minHeight2</span><span style="color:#24292E;">(Node head) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Node cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">		Node mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> curLevel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 当前节点的层数</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> minHeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rightBoardSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (mostRight.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mostRight.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> cur) {</span></span>
<span class="line"><span style="color:#24292E;">					rightBoardSize</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">					mostRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mostRight.right;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 第一次到达</span></span>
<span class="line"><span style="color:#24292E;">					curLevel</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">					mostRight.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur;</span></span>
<span class="line"><span style="color:#24292E;">					cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.left;</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 第二次到达</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mostRight.left </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">						minHeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(minHeight, curLevel);</span></span>
<span class="line"><span style="color:#24292E;">					}</span></span>
<span class="line"><span style="color:#24292E;">					curLevel </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> rightBoardSize;</span></span>
<span class="line"><span style="color:#24292E;">					mostRight.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 只有一次到达</span></span>
<span class="line"><span style="color:#24292E;">				curLevel</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.right;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> finalRight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			finalRight</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.right;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur.left </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> cur.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			minHeight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(minHeight, finalRight);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> minHeight;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div>`,12);function g(s,d,m,f,R,v){const o=e,t=C("ClientOnly");return l(),r("div",null,[u,y(t,null,{default:A(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):E("",!0)]}),_:1}),h])}const x=c(F,[["render",g]]);export{_ as __pageData,x as default};
