import{_ as c}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as t,v as l,b as r,t as y,O as C,F as p,L as A,R as i,M as F,C as D,B}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const L=JSON.parse('{"title":"C语言结构体","description":"","frontmatter":{"title":"C语言结构体","author":"阿源","date":"2023/01/08 11:15","categories":["C基础快速入门"],"tags":["C","C基础"]},"headers":[],"relativePath":"courses/c/01-C语言基础/08-结构体.md","filePath":"courses/c/01-C语言基础/08-结构体.md","lastUpdated":1691327334000}'),E={name:"courses/c/01-C语言基础/08-结构体.md"},u=p("h1",{id:"结构体",tabindex:"-1"},[A("结构体 "),p("a",{class:"header-anchor",href:"#结构体","aria-label":'Permalink to "结构体"'},"​")],-1),d=i(`<h2 id="_1、结构体概述" tabindex="-1">1、结构体概述 <a class="header-anchor" href="#_1、结构体概述" aria-label="Permalink to &quot;1、结构体概述&quot;">​</a></h2><p>将多种数据结构封装在一起 形成新的结构胶结构体</p><p>每种数据结构 都有自己独立的空间。</p><p>结构体的关键字struct</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%931.png" alt=""></p><h2 id="_2、结构体变量的初始化" tabindex="-1">2、结构体变量的初始化 <a class="header-anchor" href="#_2、结构体变量的初始化" aria-label="Permalink to &quot;2、结构体变量的初始化&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">//结构体变量的初始化必 须遵循成员的刚</span></span>
<span class="line"><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu lucy </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;lucy&quot;</span><span style="color:#ADBAC7;"> };</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu lucy;</span></span>
<span class="line"><span style="color:#768390;">//使用memset给结构体变量清空</span></span>
<span class="line"><span style="color:#DCBDFB;">memset</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">&amp;</span><span style="color:#F69D50;">lucy</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(lucy));</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu lucy;</span></span>
<span class="line"><span style="color:#DCBDFB;">memset</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">&amp;</span><span style="color:#F69D50;">lucy</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">，</span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(lucy));</span></span>
<span class="line"><span style="color:#768390;">//&amp;Lucy. num取的是lucy 中num成员的地址</span></span>
<span class="line"><span style="color:#DCBDFB;">scanf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> </span><span style="color:#F47067;">%s</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">，</span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">lucy.num, lucy.name) ;</span></span>
<span class="line"><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> </span><span style="color:#F47067;">%s\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, lucy.num，lucy.name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">//可以单独操作结构体中的成员</span></span>
<span class="line"><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu lucy{</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;lucy&quot;</span><span style="color:#ADBAC7;">};</span></span>
<span class="line"><span style="color:#ADBAC7;">lucy.num </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;"> ;</span></span>
<span class="line"><span style="color:#768390;">//字符串数组必须使用字符串操作函数进行操作</span></span>
<span class="line"><span style="color:#DCBDFB;">strcpy</span><span style="color:#ADBAC7;">(lucy.name , </span><span style="color:#96D0FF;">&quot;bob&quot;</span><span style="color:#ADBAC7;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//结构体变量的初始化必 须遵循成员的刚</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu lucy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lucy&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu lucy;</span></span>
<span class="line"><span style="color:#6A737D;">//使用memset给结构体变量清空</span></span>
<span class="line"><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">lucy</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(lucy));</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu lucy;</span></span>
<span class="line"><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">lucy</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">，</span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(lucy));</span></span>
<span class="line"><span style="color:#6A737D;">//&amp;Lucy. num取的是lucy 中num成员的地址</span></span>
<span class="line"><span style="color:#6F42C1;">scanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">，</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">lucy.num, lucy.name) ;</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, lucy.num，lucy.name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//可以单独操作结构体中的成员</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu lucy{</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lucy&quot;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">lucy.num </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#6A737D;">//字符串数组必须使用字符串操作函数进行操作</span></span>
<span class="line"><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(lucy.name , </span><span style="color:#032F62;">&quot;bob&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="_3、结构体嵌套结构体" tabindex="-1">3、结构体嵌套结构体 <a class="header-anchor" href="#_3、结构体嵌套结构体" aria-label="Permalink to &quot;3、结构体嵌套结构体&quot;">​</a></h2><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%932.png" alt=""></p><h2 id="_4、结构体数组" tabindex="-1">4、结构体数组 <a class="header-anchor" href="#_4、结构体数组" aria-label="Permalink to &quot;4、结构体数组&quot;">​</a></h2><h3 id="_1、结构体数组-本质是数组-每个元素是结构体" tabindex="-1">1、结构体数组：本质是数组 每个元素是结构体 <a class="header-anchor" href="#_1、结构体数组-本质是数组-每个元素是结构体" aria-label="Permalink to &quot;1、结构体数组：本质是数组 每个元素是结构体&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu2 </span><span style="color:#F69D50;">edu</span><span style="color:#ADBAC7;">[</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {{</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;lucy&quot;</span><span style="color:#ADBAC7;">}, {</span><span style="color:#6CB6FF;">101</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&#39;bob&quot;}, {102，tom&quot;},{103，” 德玛西亚&quot;}，{104， &quot;小炮&quot;}};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu2 </span><span style="color:#E36209;">edu</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {{</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;lucy&quot;</span><span style="color:#24292E;">}, {</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;bob&quot;}, {102，tom&quot;},{103，” 德玛西亚&quot;}，{104， &quot;小炮&quot;}};</span></span></code></pre></div><h3 id="_2、键盘给结构体赋值" tabindex="-1">2、键盘给结构体赋值 <a class="header-anchor" href="#_2、键盘给结构体赋值" aria-label="Permalink to &quot;2、键盘给结构体赋值&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#DCBDFB;">scanf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> </span><span style="color:#F47067;">%s</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">&amp;</span><span style="color:#F69D50;">edu</span><span style="color:#ADBAC7;">[i].num ,</span><span style="color:#F69D50;">edu</span><span style="color:#ADBAC7;">[i].name);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">scanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">edu</span><span style="color:#24292E;">[i].num ,</span><span style="color:#E36209;">edu</span><span style="color:#24292E;">[i].name);</span></span></code></pre></div><h2 id="_5、结构体指针变量" tabindex="-1">5、结构体指针变量 <a class="header-anchor" href="#_5、结构体指针变量" aria-label="Permalink to &quot;5、结构体指针变量&quot;">​</a></h2><h3 id="_1、指针成员-指针变量-作为结构体中的成员" tabindex="-1">1、指针成员：指针变量 作为结构体中的成员 <a class="header-anchor" href="#_1、指针成员-指针变量-作为结构体中的成员" aria-label="Permalink to &quot;1、指针成员：指针变量 作为结构体中的成员&quot;">​</a></h3><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%933.png" alt=""></p><h3 id="_2、结构体数组元素的指针变量" tabindex="-1">2、结构体数组元素的指针变量 <a class="header-anchor" href="#_2、结构体数组元素的指针变量" aria-label="Permalink to &quot;2、结构体数组元素的指针变量&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">input_stu_array</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu </span><span style="color:#F47067;">*</span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">n</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;请输入</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;">个学员的信息num name</span><span style="color:#F47067;">\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, n);</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> n; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;请输入第</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;">个学生的信息:&quot;</span><span style="color:#ADBAC7;">, i </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#768390;"> //scanf(&quot;%d %s&quot;, &amp;arr[i].num, arr[i].name);</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">scanf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> </span><span style="color:#F47067;">%s</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">(arr </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> i)‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num, (arr </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> i)‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name);</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;">// 结构体里按照num排序</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sort_stu_array</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu </span><span style="color:#F47067;">*</span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">n</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> n ‐ </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> min </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> i;</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> j </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> min </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (; j </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> n; j</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#768390;"> //if(strcmp(arr[min].name, arr[j].name) &gt; 0)</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[min].num </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[j].num)</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;"> min </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> j;</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span></span>
<span class="line"><span style="color:#6CB6FF;">27</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> min)</span></span>
<span class="line"><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">29</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu tmp </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[min];</span></span>
<span class="line"><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[min] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i];</span></span>
<span class="line"><span style="color:#6CB6FF;">31</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> tmp;</span></span>
<span class="line"><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">33</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">34</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">35</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6CB6FF;">36</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">print_stu_array</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu </span><span style="color:#F47067;">*</span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">n</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">37</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">38</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">39</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> n; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">40</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">41</span><span style="color:#768390;"> // printf(&quot;%d %s\\n&quot;, arr[i].num, arr[i].name);</span></span>
<span class="line"><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> </span><span style="color:#F47067;">%s\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, (arr </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> i)‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num, (arr </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> i)‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name);</span></span>
<span class="line"><span style="color:#6CB6FF;">43</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">44</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">45</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6CB6FF;">46</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test02</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">47</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">48</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu </span><span style="color:#F69D50;">edu</span><span style="color:#ADBAC7;">[</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#6CB6FF;">49</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">memset</span><span style="color:#ADBAC7;">(edu, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(edu));</span></span>
<span class="line"><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> n </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(edu) </span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">edu</span><span style="color:#ADBAC7;">[</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">]);</span></span>
<span class="line"><span style="color:#6CB6FF;">51</span></span>
<span class="line"><span style="color:#6CB6FF;">52</span><span style="color:#768390;"> //封装函数获取键盘输入</span></span>
<span class="line"><span style="color:#6CB6FF;">53</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">input_stu_array</span><span style="color:#ADBAC7;">(edu, n);</span></span>
<span class="line"><span style="color:#6CB6FF;">54</span></span>
<span class="line"><span style="color:#6CB6FF;">55</span><span style="color:#768390;"> //对结构体数组排序</span></span>
<span class="line"><span style="color:#6CB6FF;">56</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sort_stu_array</span><span style="color:#ADBAC7;">(edu, n);</span></span>
<span class="line"><span style="color:#6CB6FF;">57</span></span>
<span class="line"><span style="color:#6CB6FF;">58</span><span style="color:#768390;"> //遍历结构体数组的内容</span></span>
<span class="line"><span style="color:#6CB6FF;">59</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">print_stu_array</span><span style="color:#ADBAC7;">(edu, n);</span></span>
<span class="line"><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">input_stu_array</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">个学员的信息num name</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, n);</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入第</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">个学生的信息:&quot;</span><span style="color:#24292E;">, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#6A737D;"> //scanf(&quot;%d %s&quot;, &amp;arr[i].num, arr[i].name);</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">(arr </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i)‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num, (arr </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i)‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name);</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#6A737D;">// 结构体里按照num排序</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sort_stu_array</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n ‐ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> min </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> min </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#6A737D;"> //if(strcmp(arr[min].name, arr[j].name) &gt; 0)</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[min].num </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[j].num)</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> min </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j;</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">26</span></span>
<span class="line"><span style="color:#005CC5;">27</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> min)</span></span>
<span class="line"><span style="color:#005CC5;">28</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">29</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[min];</span></span>
<span class="line"><span style="color:#005CC5;">30</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[min] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#005CC5;">31</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp;</span></span>
<span class="line"><span style="color:#005CC5;">32</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">33</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">34</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">35</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">36</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print_stu_array</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">37</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">38</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">39</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">40</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">41</span><span style="color:#6A737D;"> // printf(&quot;%d %s\\n&quot;, arr[i].num, arr[i].name);</span></span>
<span class="line"><span style="color:#005CC5;">42</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, (arr </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i)‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num, (arr </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i)‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name);</span></span>
<span class="line"><span style="color:#005CC5;">43</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">44</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">45</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">46</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test02</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">47</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">48</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#E36209;">edu</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#005CC5;">49</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(edu, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(edu));</span></span>
<span class="line"><span style="color:#005CC5;">50</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(edu) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#E36209;">edu</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#005CC5;">51</span></span>
<span class="line"><span style="color:#005CC5;">52</span><span style="color:#6A737D;"> //封装函数获取键盘输入</span></span>
<span class="line"><span style="color:#005CC5;">53</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">input_stu_array</span><span style="color:#24292E;">(edu, n);</span></span>
<span class="line"><span style="color:#005CC5;">54</span></span>
<span class="line"><span style="color:#005CC5;">55</span><span style="color:#6A737D;"> //对结构体数组排序</span></span>
<span class="line"><span style="color:#005CC5;">56</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sort_stu_array</span><span style="color:#24292E;">(edu, n);</span></span>
<span class="line"><span style="color:#005CC5;">57</span></span>
<span class="line"><span style="color:#005CC5;">58</span><span style="color:#6A737D;"> //遍历结构体数组的内容</span></span>
<span class="line"><span style="color:#005CC5;">59</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print_stu_array</span><span style="color:#24292E;">(edu, n);</span></span>
<span class="line"><span style="color:#005CC5;">60</span><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="_6、结构体的指针成员" tabindex="-1">6、结构体的指针成员 <a class="header-anchor" href="#_6、结构体的指针成员" aria-label="Permalink to &quot;6、结构体的指针成员&quot;">​</a></h2><h3 id="_1、指针成员-指针变量-作为结构体中的成员-1" tabindex="-1">1、指针成员：指针变量 作为结构体中的成员 <a class="header-anchor" href="#_1、指针成员-指针变量-作为结构体中的成员-1" aria-label="Permalink to &quot;1、指针成员：指针变量 作为结构体中的成员&quot;">​</a></h3><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%934.png" alt=""></p><p>文字常量不可以去写！ 要不然就gg 要不然就放到堆区里面去</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%935.png" alt=""></p><h3 id="_2、结构体的指针成员-指向堆区" tabindex="-1">2、结构体的指针成员 指向堆区 <a class="header-anchor" href="#_2、结构体的指针成员-指向堆区" aria-label="Permalink to &quot;2、结构体的指针成员 指向堆区&quot;">​</a></h3><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%936.png" alt=""></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">stdio.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">string.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">stdlib.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> num;</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">name;</span><span style="color:#768390;"> //指针成员</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test01</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu lucy;</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> lucy.num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#768390;"> //让name指向堆区 1块 128B</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> lucy.name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#768390;"> //此处造成内存泄漏 name先指向堆区 然后name又指向文字常量区 丢失堆区空间地址</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#768390;"> //lucy.name = &quot;hello world&quot;;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">strcpy</span><span style="color:#ADBAC7;">(lucy.name, </span><span style="color:#96D0FF;">&quot;hello world&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> </span><span style="color:#F47067;">%s\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, lucy.num, lucy.name);</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%c\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, lucy.name[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">]);</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> lucy.name[</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;E&#39;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> </span><span style="color:#F47067;">%s\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, lucy.num, lucy.name);</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#768390;"> //释放lucy.name指向的堆区空间</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (lucy.name </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">27</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">free</span><span style="color:#ADBAC7;">(lucy.name);</span></span>
<span class="line"><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;"> lucy.name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">29</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6CB6FF;">31</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">argc</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#F69D50;">argv</span><span style="color:#F47067;">[]</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">33</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test01</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">34</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">35</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">stdio.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">string.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">stdlib.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">name;</span><span style="color:#6A737D;"> //指针成员</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test01</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu lucy;</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> lucy.num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#6A737D;"> //让name指向堆区 1块 128B</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> lucy.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#6A737D;"> //此处造成内存泄漏 name先指向堆区 然后name又指向文字常量区 丢失堆区空间地址</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#6A737D;"> //lucy.name = &quot;hello world&quot;;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(lucy.name, </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, lucy.num, lucy.name);</span></span>
<span class="line"><span style="color:#005CC5;">19</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%c\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, lucy.name[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> lucy.name[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;E&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, lucy.num, lucy.name);</span></span>
<span class="line"><span style="color:#005CC5;">23</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#6A737D;"> //释放lucy.name指向的堆区空间</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lucy.name </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">27</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(lucy.name);</span></span>
<span class="line"><span style="color:#005CC5;">28</span><span style="color:#24292E;"> lucy.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">29</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">30</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">31</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">argv</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">32</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">33</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test01</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">34</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">35</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="_3、相同类型的结构体变量可以整体赋值" tabindex="-1">3、相同类型的结构体变量可以整体赋值 <a class="header-anchor" href="#_3、相同类型的结构体变量可以整体赋值" aria-label="Permalink to &quot;3、相同类型的结构体变量可以整体赋值&quot;">​</a></h3><p>如果结构体中没有指针成员 赋值 不会出现浅拷贝。</p><p>如果结构体中有指针成员 赋值 容易造成浅拷贝</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%937.png" alt=""></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu lucy;</span></span>
<span class="line"><span style="color:#ADBAC7;">lucy.num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#768390;">//让name指向堆区</span></span>
<span class="line"><span style="color:#ADBAC7;">lucy.name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#DCBDFB;">strcpy</span><span style="color:#ADBAC7;">(lucy.name, </span><span style="color:#96D0FF;">&quot;hello world&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> </span><span style="color:#F47067;">%s\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, lucy.num, lucy.name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu bob;</span></span>
<span class="line"><span style="color:#ADBAC7;">bob </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> lucy;</span><span style="color:#768390;">//浅拷贝  释放空间的时候会出现问题！</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu lucy;</span></span>
<span class="line"><span style="color:#24292E;">lucy.num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//让name指向堆区</span></span>
<span class="line"><span style="color:#24292E;">lucy.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(lucy.name, </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, lucy.num, lucy.name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu bob;</span></span>
<span class="line"><span style="color:#24292E;">bob </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lucy;</span><span style="color:#6A737D;">//浅拷贝  释放空间的时候会出现问题！</span></span></code></pre></div><p>如果结构体中有指针成员 尽量使用<strong>深拷贝</strong>。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu bob;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> bob.name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> bob.num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> lucy.num;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">strcpy</span><span style="color:#ADBAC7;">(bob.name, lucy.name);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu bob;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> bob.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> bob.num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lucy.num;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(bob.name, lucy.name);</span></span></code></pre></div><h3 id="_4、结构体在堆区-结构体的指针成员指向堆区" tabindex="-1">4、结构体在堆区 结构体的指针成员指向堆区 <a class="header-anchor" href="#_4、结构体在堆区-结构体的指针成员指向堆区" aria-label="Permalink to &quot;4、结构体在堆区 结构体的指针成员指向堆区&quot;">​</a></h3><p>关系到空间释放的顺序</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%938.png" alt=""></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test02</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#768390;"> //结构体本身在堆区</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu));</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#768390;"> //为结构体中的指针成员 申请堆区空间</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> p‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#768390;"> //给结构体中的成员赋值</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> p‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">strcpy</span><span style="color:#ADBAC7;">(p‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name, </span><span style="color:#96D0FF;">&quot;hello world&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> </span><span style="color:#F47067;">%s\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, p‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num, p‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name);</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#768390;"> //先释放成员空间</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (p‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">free</span><span style="color:#ADBAC7;">(p‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name);</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> p‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#768390;"> //在释放结构体的空间</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (p </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">free</span><span style="color:#ADBAC7;">(p);</span></span>
<span class="line"><span style="color:#6CB6FF;">27</span><span style="color:#ADBAC7;"> p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">29</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test02</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#6A737D;"> //结构体本身在堆区</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu));</span></span>
<span class="line"><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#6A737D;"> //为结构体中的指针成员 申请堆区空间</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> p‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#6A737D;"> //给结构体中的成员赋值</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> p‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(p‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name, </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">13</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, p‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num, p‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name);</span></span>
<span class="line"><span style="color:#005CC5;">15</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#6A737D;"> //先释放成员空间</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(p‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name);</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> p‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">22</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#6A737D;"> //在释放结构体的空间</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#005CC5;">27</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">28</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">29</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="_5、结构体指针数组在堆区、结构体在堆区、结构指针成员在堆区" tabindex="-1">5、结构体指针数组在堆区、结构体在堆区、结构指针成员在堆区 <a class="header-anchor" href="#_5、结构体指针数组在堆区、结构体在堆区、结构指针成员在堆区" aria-label="Permalink to &quot;5、结构体指针数组在堆区、结构体在堆区、结构指针成员在堆区&quot;">​</a></h3><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%939.png" alt=""></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test03</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#768390;"> //给结构体指针数组申请堆区空间</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">arr </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> arr </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu </span><span style="color:#F47067;">**</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#768390;"> //给指针数组中的每个元素 申请结构体堆区空间</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> stu));</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#768390;"> //每个结构体中的name成员申请堆区空间</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i]‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#768390;"> //赋值</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i]‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> i;</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sprintf</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i]‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name, </span><span style="color:#96D0FF;">&quot;姓名</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, i </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#768390;"> //遍历</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> </span><span style="color:#F47067;">%s\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i]‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num, </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i]‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name);</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span><span style="color:#768390;"> //释放arr中的每个元素 以及每个元素中的name</span></span>
<span class="line"><span style="color:#6CB6FF;">27</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">29</span><span style="color:#768390;"> //先释放结构体中的name的指向</span></span>
<span class="line"><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i]‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">31</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">free</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i]‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name);</span></span>
<span class="line"><span style="color:#6CB6FF;">33</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i]‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">34</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">35</span></span>
<span class="line"><span style="color:#6CB6FF;">36</span><span style="color:#768390;"> //释放结构体</span></span>
<span class="line"><span style="color:#6CB6FF;">37</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (</span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i] </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">38</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">39</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">free</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i]);</span></span>
<span class="line"><span style="color:#6CB6FF;">40</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">arr</span><span style="color:#ADBAC7;">[i] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">41</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">42</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">43</span><span style="color:#768390;"> //释放整个arr指针数组</span></span>
<span class="line"><span style="color:#6CB6FF;">44</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (arr </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">45</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">46</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">free</span><span style="color:#ADBAC7;">(arr);</span></span>
<span class="line"><span style="color:#6CB6FF;">47</span><span style="color:#ADBAC7;"> arr </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">48</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">49</span></span>
<span class="line"><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">51</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test03</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#6A737D;"> //给结构体指针数组申请堆区空间</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#6A737D;"> //给指针数组中的每个元素 申请结构体堆区空间</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu));</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#6A737D;"> //每个结构体中的name成员申请堆区空间</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i]‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">14</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#6A737D;"> //赋值</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i]‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sprintf</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i]‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name, </span><span style="color:#032F62;">&quot;姓名</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">19</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#6A737D;"> //遍历</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i]‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num, </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i]‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name);</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">25</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#6A737D;"> //释放arr中的每个元素 以及每个元素中的name</span></span>
<span class="line"><span style="color:#005CC5;">27</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">28</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">29</span><span style="color:#6A737D;"> //先释放结构体中的name的指向</span></span>
<span class="line"><span style="color:#005CC5;">30</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i]‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">31</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">32</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i]‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name);</span></span>
<span class="line"><span style="color:#005CC5;">33</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i]‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">34</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">35</span></span>
<span class="line"><span style="color:#005CC5;">36</span><span style="color:#6A737D;"> //释放结构体</span></span>
<span class="line"><span style="color:#005CC5;">37</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">38</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">39</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i]);</span></span>
<span class="line"><span style="color:#005CC5;">40</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">41</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">42</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">43</span><span style="color:#6A737D;"> //释放整个arr指针数组</span></span>
<span class="line"><span style="color:#005CC5;">44</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arr </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">45</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">46</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(arr);</span></span>
<span class="line"><span style="color:#005CC5;">47</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">48</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">49</span></span>
<span class="line"><span style="color:#005CC5;">50</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">51</span><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="_7、结构体的对齐规则" tabindex="-1">7、结构体的对齐规则 <a class="header-anchor" href="#_7、结构体的对齐规则" aria-label="Permalink to &quot;7、结构体的对齐规则&quot;">​</a></h2><h3 id="_1、自动对齐规则" tabindex="-1">1、自动对齐规则 <a class="header-anchor" href="#_1、自动对齐规则" aria-label="Permalink to &quot;1、自动对齐规则&quot;">​</a></h3><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9310.png" alt=""></p><p>char 1B int 4B 但是这个结构体是8B 自动对齐了</p><p><strong>1、确定分配单位（一行分配多少字节）</strong></p><p>结构体中最大的基本类型 长度决定。</p><p><strong>2、确定成员的偏移量</strong></p><p>成员偏移量 = 成员自身类型的整数倍。</p><p><strong>3、收尾工作</strong></p><p>结构体的总大小 = 分配单位整数倍</p><p><strong>案例1：画出以下结构体的对齐</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> Data</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> a;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">short</span><span style="color:#ADBAC7;"> b;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> c;</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> d;</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">short</span><span style="color:#ADBAC7;"> e;</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> Data</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">short</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c;</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> d;</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">short</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> };</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9311.png" alt=""></p><h3 id="_2、结构体嵌套结构体-自动对齐规则" tabindex="-1">2、结构体嵌套结构体 自动对齐规则 <a class="header-anchor" href="#_2、结构体嵌套结构体-自动对齐规则" aria-label="Permalink to &quot;2、结构体嵌套结构体 自动对齐规则&quot;">​</a></h3><p><strong>1、确定分配单位（一行分配多少字节）</strong></p><p>所有结构体中最大的基本类型 长度决定。</p><p><strong>2、确定成员的偏移量</strong></p><p>普通成员偏移量 = 成员自身类型的整数倍。</p><p>被嵌套的结构体整体偏移量 = 该结构体中最大的基本类型整数倍</p><p><strong>3、收尾工作</strong></p><p>结构体成员大小 = 该结构体中最大的基本类型整数倍</p><p>结构体的总大小 = 分配单位整数倍</p><p><strong>案例</strong></p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9312.png" alt=""></p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9313.png" alt=""></p><h3 id="_3、强制对齐" tabindex="-1">3、强制对齐 <a class="header-anchor" href="#_3、强制对齐" aria-label="Permalink to &quot;3、强制对齐&quot;">​</a></h3><p>#pragma pack (value)时的指定对齐值value。</p><p>注意value值为1 2 4 8 16</p><p><strong>1、确定分配单位（一行分配多少字节）</strong></p><p>分配单位 = min(结构体中最大的基本类型, value)</p><p><strong>2、确定成员的偏移量</strong></p><p>成员偏移量 = 成员自身类型的整数倍。</p><p><strong>3、收尾工作</strong></p><p>结构体的总大小 = 分配单位整数倍</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9314.png" alt=""></p><h2 id="_8、结构体的位域" tabindex="-1">8、结构体的位域 <a class="header-anchor" href="#_8、结构体的位域" aria-label="Permalink to &quot;8、结构体的位域&quot;">​</a></h2><p>在结构体中，以位为单位的成员，咱们称之为位段(位域)</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9315.png" alt=""></p><p>a的类型是unsigned int a的大小 只占2位二进制位。</p><p>没有非位域隔开的位域 叫相邻位域。</p><p>相邻位域可以压缩。但是压缩的位数 不能超过自身类型的大小</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9316.png" alt=""></p><p>不要对位域取地址。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> A ob;</span></span>
<span class="line"><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">ob.a</span><span style="color:#768390;">  // error</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> A ob;</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ob.a</span><span style="color:#6A737D;">  // error</span></span></code></pre></div><p>对位域赋值 不要超过 位域本身位的宽度</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">struct</span><span style="color:#ADBAC7;"> A ob;</span></span>
<span class="line"><span style="color:#ADBAC7;">ob.a </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">;</span><span style="color:#768390;">//0101  只要两位  就是01</span></span>
<span class="line"><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;ob.a= </span><span style="color:#F47067;">%d\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, ob.a);</span><span style="color:#768390;"> //1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> A ob;</span></span>
<span class="line"><span style="color:#24292E;">ob.a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//0101  只要两位  就是01</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ob.a= </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, ob.a);</span><span style="color:#6A737D;"> //1</span></span></code></pre></div><p>另起一个存储单元</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9317.png" alt=""></p><p>无意义位段：</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9318.png" alt=""></p><h3 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h3><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9319.png" alt=""></p><h2 id="_9、共用体" tabindex="-1">9、共用体 <a class="header-anchor" href="#_9、共用体" aria-label="Permalink to &quot;9、共用体&quot;">​</a></h2><p>结构体：所有成员拥有独立空间</p><p>共用体：所有成员共享同一块空间</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">union</span><span style="color:#ADBAC7;"> Data</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> a;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">short</span><span style="color:#ADBAC7;"> b;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> c;</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">union</span><span style="color:#24292E;"> Data</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">short</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c;</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> }</span></span></code></pre></div><p>成员a b c共享同一块空间。空间大小 由最大的成员空间决定</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9320.png" alt=""></p><p>成员a b c共享同一块空间，但是每个成员 能操作的空间的范围 是由成员自身类型长度决定</p><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9321.png" alt=""></p><h2 id="_10、枚举" tabindex="-1">10、枚举 <a class="header-anchor" href="#_10、枚举" aria-label="Permalink to &quot;10、枚举&quot;">​</a></h2><p>枚举:将枚举变量 要赋的值 一一列举出来</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">enum</span><span style="color:#ADBAC7;"> POKER_COLOR{HONGTAO,MEIHUA,FANGKUAI,HEITAO};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> POKER_COLOR{HONGTAO,MEIHUA,FANGKUAI,HEITAO};</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E7%BB%93%E6%9E%84%E4%BD%9322.png" alt=""></p>`,105);function m(s,h,g,b,q,f){const o=c,e=F("ClientOnly");return l(),r("div",null,[u,y(e,null,{default:C(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),D(o,{key:0,article:s.$frontmatter},null,8,["article"])):B("",!0)]}),_:1}),d])}const N=t(E,[["render",m]]);export{L as __pageData,N as default};
