import{_ as e}from"./chunks/ArticleMetadata.e10718d6.js";import{_ as c,v as l,b as r,E as y,O as A,F as p,L as i,R as D,M as C,C as B,B as E}from"./chunks/framework.2aeb816e.js";import"./chunks/md5.772bbdf1.js";const _=JSON.parse('{"title":"贪心算法","description":"","frontmatter":{"title":"贪心算法","author":"阿源","date":"2023/03/13 12:00","categories":["数据结构与算法"],"tags":["数据结构与算法","贪心"]},"headers":[],"relativePath":"courses/algorithm/01-左程云算法基础/13-贪心算法.md","filePath":"courses/algorithm/01-左程云算法基础/13-贪心算法.md","lastUpdated":1691397650000}'),F={name:"courses/algorithm/01-左程云算法基础/13-贪心算法.md"},d=p("h1",{id:"贪心算法",tabindex:"-1"},[i("贪心算法 "),p("a",{class:"header-anchor",href:"#贪心算法","aria-label":'Permalink to "贪心算法"'},"​")],-1),u=D(`<blockquote><p>1)最自然智慧的算法 2)用一种局部最功利的标准，总是做出在当前看来是最好的选择 3)难点在于证明局部最功利的标准可以得到全局最优解 4)对于贪心算法的学习主要以增加阅历和经验为主</p></blockquote><h2 id="案例题目" tabindex="-1">案例题目 <a class="header-anchor" href="#案例题目" aria-label="Permalink to &quot;案例题目&quot;">​</a></h2><ul><li>给定一个有字符串组成的数组Strs</li><li>必须把所有的字符串拼接起来</li><li>返回所有的拼接结果中，字典序最小的结果</li></ul><p>证明： a.b &lt;= b.a b.c &lt;= c.b 能否推出 a.c &lt;= c.a</p><p>字符串排序后: 【.....a .... b....】 &lt; 【.....b .... a....】</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyComparator</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Comparator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">		@</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">compare</span><span style="color:#ADBAC7;">(String </span><span style="color:#F69D50;">a</span><span style="color:#ADBAC7;">, String </span><span style="color:#F69D50;">b</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> (a </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> b).</span><span style="color:#DCBDFB;">compareTo</span><span style="color:#ADBAC7;">(b </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> a);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> String </span><span style="color:#DCBDFB;">lowestString2</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">String</span><span style="color:#ADBAC7;">[] strs) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (strs </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">||</span><span style="color:#ADBAC7;"> strs.length </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		Arrays.</span><span style="color:#DCBDFB;">sort</span><span style="color:#ADBAC7;">(strs, </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">MyComparator</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">		String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">res</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;&quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> strs.length; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			res </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> strs[i];</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> res;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyComparator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b).</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> a);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">lowestString2</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] strs) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (strs </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> strs.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(strs, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyComparator</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		String res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> strs.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			res </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> strs[i];</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h2 id="_1-安排会议" tabindex="-1">1.安排会议 <a class="header-anchor" href="#_1-安排会议" aria-label="Permalink to &quot;1.安排会议&quot;">​</a></h2><p>每一次都选结束时间最早的</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Program</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">start;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">end;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Program</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">start</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">end</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.start </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> start;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.end </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> end;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Program</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> end;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Program</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">start</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">end</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> end;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">bestArrange2</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">Program</span><span style="color:#ADBAC7;">[] programs) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		Arrays.</span><span style="color:#DCBDFB;">sort</span><span style="color:#ADBAC7;">(programs, </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ProgramComparator</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">timeLine</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">result</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#768390;">// 依次遍历每一个会议，结束时间早的会议先遍历</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> programs.length; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 当前时间 &lt;= 会议开始时间</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (timeLine </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> programs[i].start) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				result</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				timeLine </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> programs[i].end; </span><span style="color:#768390;">// 更新时间</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> result;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bestArrange2</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">Program</span><span style="color:#24292E;">[] programs) {</span></span>
<span class="line"><span style="color:#24292E;">		Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(programs, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProgramComparator</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timeLine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 依次遍历每一个会议，结束时间早的会议先遍历</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> programs.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 当前时间 &lt;= 会议开始时间</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (timeLine </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> programs[i].start) {</span></span>
<span class="line"><span style="color:#24292E;">				result</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				timeLine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> programs[i].end; </span><span style="color:#6A737D;">// 更新时间</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ProgramComparator</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Comparator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Program</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">		@</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">compare</span><span style="color:#ADBAC7;">(Program </span><span style="color:#F69D50;">o1</span><span style="color:#ADBAC7;">, Program </span><span style="color:#F69D50;">o2</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> o1.end </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> o2.end;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"><span style="color:#768390;">//return o1 - o2，那么就是 return dest[j-1] - dest[j]。</span></span>
<span class="line"><span style="color:#768390;">//当 dest[j-1] &gt; dest[j] 时，就进行交换。当 dest[j-1] &lt;= dest[j] 时位置不变，从而达到数组升序。降序也是一样的道理，就不多讲了</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProgramComparator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Program</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Program </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Program </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o1.end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o2.end;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#6A737D;">//return o1 - o2，那么就是 return dest[j-1] - dest[j]。</span></span>
<span class="line"><span style="color:#6A737D;">//当 dest[j-1] &gt; dest[j] 时，就进行交换。当 dest[j-1] &lt;= dest[j] 时位置不变，从而达到数组升序。降序也是一样的道理，就不多讲了</span></span></code></pre></div><h2 id="_2-哈夫曼数组切割" tabindex="-1">2 . 哈夫曼数组切割 <a class="header-anchor" href="#_2-哈夫曼数组切割" aria-label="Permalink to &quot;2 . 哈夫曼数组切割&quot;">​</a></h2><p>一个数组10 20 30</p><p>60切一刀为10和50，代价为60,50切一刀，代价为50 总：110</p><p>60切一刀为30和30，代价为60，30切一刀，代价30 总：90</p><ul><li>利用一个小根堆，哈夫曼编码</li><li>每次弹出两个数，合成一个数，放进小根堆</li><li>代价为所有 合成数 的和</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lessMoney2</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[] arr) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		PriorityQueue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Integer</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">pQ</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> PriorityQueue&lt;&gt;();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> arr.length; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			pQ.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(arr[i]);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">sum</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">cur</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 小根堆只剩一个数的时候停止</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (pQ.</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			cur </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> pQ.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> pQ.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">			sum </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> cur; </span><span style="color:#768390;">// 代价</span></span>
<span class="line"><span style="color:#ADBAC7;">			pQ.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(cur);</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> sum;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lessMoney2</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr) {</span></span>
<span class="line"><span style="color:#24292E;">		PriorityQueue&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; pQ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> PriorityQueue&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			pQ.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(arr[i]);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 小根堆只剩一个数的时候停止</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (pQ.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pQ.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pQ.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> cur; </span><span style="color:#6A737D;">// 代价</span></span>
<span class="line"><span style="color:#24292E;">			pQ.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(cur);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sum;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_3-类银行家算法贪心" tabindex="-1">3. 类银行家算法贪心 <a class="header-anchor" href="#_3-类银行家算法贪心" aria-label="Permalink to &quot;3. 类银行家算法贪心&quot;">​</a></h2><p>输入:正数数组costs、正数数组profits、 正数K、正数M</p><ul><li>costs[0]表示i号项目的花费</li><li>profits[]表示i号项目在扣除花费之后还能挣到的钱(利润)</li><li>K表示你只能串行的最多做k个项目</li><li>M表示你初始的资金 说明:每做完一个项目，马上获得的收益，可以支持你去做下一 个项目不能并行的做项目。 输出:你最后获得的最大钱数。</li></ul><ol><li>小根堆（花费排序）</li><li>大根堆（利润排序）</li><li>小根堆解锁到大根堆，然后从大根堆顶取出do</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Program</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">p;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">c;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Program</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">p</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">c</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> p;</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">.c </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> c;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MinCostComparator</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Comparator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Program</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">		@</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">compare</span><span style="color:#ADBAC7;">(Program </span><span style="color:#F69D50;">o1</span><span style="color:#ADBAC7;">, Program </span><span style="color:#F69D50;">o2</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> o1.c </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> o2.c;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MaxProfitComparator</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">implements</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Comparator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Program</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">		@</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">compare</span><span style="color:#ADBAC7;">(Program </span><span style="color:#F69D50;">o1</span><span style="color:#ADBAC7;">, Program </span><span style="color:#F69D50;">o2</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> o2.p </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> o1.p;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Program</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Program</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">p</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MinCostComparator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Program</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Program </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Program </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o1.c </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o2.c;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MaxProfitComparator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Program</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">		@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Program </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Program </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o2.p </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o1.p;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#768390;">// 最多K个项目</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#768390;">// W是初始资金</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#768390;">// Profits[] Capital[] 一定等长</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#768390;">// 返回最终最大的资金</span></span>
<span class="line"><span style="color:#ADBAC7;">	</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">findMaximizedCapital</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> K, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> W, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[] Profits, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">[] Capital) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		PriorityQueue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Program</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">minCostQ</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> PriorityQueue&lt;&gt;(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">MinCostComparator</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">		PriorityQueue</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Program</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">maxProfitQ</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> PriorityQueue&lt;&gt;(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">MaxProfitComparator</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 开始把所有项目放到小根堆</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> Profits.length; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			minCostQ.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Program</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">Profits</span><span style="color:#ADBAC7;">[i], </span><span style="color:#F47067;">Capital</span><span style="color:#ADBAC7;">[i]));</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 拿K个项目</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> K; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 小根堆不为空 当前项目花费资金 &lt;= 当前拥有资金</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">!</span><span style="color:#ADBAC7;">minCostQ.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> minCostQ.</span><span style="color:#DCBDFB;">peek</span><span style="color:#ADBAC7;">().c </span><span style="color:#F47067;">&lt;=</span><span style="color:#ADBAC7;"> W) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				maxProfitQ.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(minCostQ.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 有可能完不成K轮 提前结束</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (maxProfitQ.</span><span style="color:#DCBDFB;">isEmpty</span><span style="color:#ADBAC7;">()) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> W;</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 大根堆不为空  直接弹出堆顶元素</span></span>
<span class="line"><span style="color:#ADBAC7;">			W </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> maxProfitQ.</span><span style="color:#DCBDFB;">poll</span><span style="color:#ADBAC7;">().p;</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> W;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 最多K个项目</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// W是初始资金</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Profits[] Capital[] 一定等长</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 返回最终最大的资金</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findMaximizedCapital</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> K, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> W, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] Profits, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] Capital) {</span></span>
<span class="line"><span style="color:#24292E;">		PriorityQueue&lt;</span><span style="color:#D73A49;">Program</span><span style="color:#24292E;">&gt; minCostQ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> PriorityQueue&lt;&gt;(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MinCostComparator</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		PriorityQueue&lt;</span><span style="color:#D73A49;">Program</span><span style="color:#24292E;">&gt; maxProfitQ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> PriorityQueue&lt;&gt;(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MaxProfitComparator</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 开始把所有项目放到小根堆</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Profits.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			minCostQ.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Program</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">Profits</span><span style="color:#24292E;">[i], </span><span style="color:#D73A49;">Capital</span><span style="color:#24292E;">[i]));</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 拿K个项目</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> K; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 小根堆不为空 当前项目花费资金 &lt;= 当前拥有资金</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">minCostQ.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> minCostQ.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().c </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> W) {</span></span>
<span class="line"><span style="color:#24292E;">				maxProfitQ.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(minCostQ.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 有可能完不成K轮 提前结束</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (maxProfitQ.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> W;</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 大根堆不为空  直接弹出堆顶元素</span></span>
<span class="line"><span style="color:#24292E;">			W </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> maxProfitQ.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">().p;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> W;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><h2 id="_4-点灯" tabindex="-1">4. 点灯 <a class="header-anchor" href="#_4-点灯" aria-label="Permalink to &quot;4. 点灯&quot;">​</a></h2><p>给定一个字符串str，只由&#39;X’ 和 . 两种字符构成。 &#39;X’表示墙，不能放灯，也不需要点亮 &#39;.&#39;表示居民点，可以放灯，需要点亮 如果灯放在i位置，可以让i-1， i 和 i+1三个位置被点亮 返回如果点亮str中所有需要点亮的位置，至少需要几盏灯</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">策略：</span></span>
<span class="line"><span style="color:#adbac7;">如果i位置是个X 直接跳到i+1位置</span></span>
<span class="line"><span style="color:#adbac7;">如果i位置是个. 如果i+1是X，灯+1，跳到i+2</span></span>
<span class="line"><span style="color:#adbac7;">如果i位置是个. 如果i+2是X，灯+1，跳到i+3</span></span>
<span class="line"><span style="color:#adbac7;">如果i位置是个. 如果i+3是X，灯+1，跳到i+4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">策略：</span></span>
<span class="line"><span style="color:#24292e;">如果i位置是个X 直接跳到i+1位置</span></span>
<span class="line"><span style="color:#24292e;">如果i位置是个. 如果i+1是X，灯+1，跳到i+2</span></span>
<span class="line"><span style="color:#24292e;">如果i位置是个. 如果i+2是X，灯+1，跳到i+3</span></span>
<span class="line"><span style="color:#24292e;">如果i位置是个. 如果i+3是X，灯+1，跳到i+4</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">minLight2</span><span style="color:#ADBAC7;">(String road) {</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">char</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">str</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> road.</span><span style="color:#DCBDFB;">toCharArray</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">i</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">int</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">light</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">while</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> str.length) {</span></span>
<span class="line"><span style="color:#ADBAC7;">			</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (str[i] </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;X&#39;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">				i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">			} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">				light</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> str.length) {</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">break</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">				} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">// 有i位置  i+ 1   X  .</span></span>
<span class="line"><span style="color:#ADBAC7;">					</span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (str[i </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&#39;X&#39;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">						i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">					} </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">						i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">					}</span></span>
<span class="line"><span style="color:#ADBAC7;">				}</span></span>
<span class="line"><span style="color:#ADBAC7;">			}</span></span>
<span class="line"><span style="color:#ADBAC7;">		}</span></span>
<span class="line"><span style="color:#ADBAC7;">		</span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> light;</span></span>
<span class="line"><span style="color:#ADBAC7;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minLight2</span><span style="color:#24292E;">(String road) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> road.</span><span style="color:#6F42C1;">toCharArray</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> light </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> str.length) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (str[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;X&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">				i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				light</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> str.length) {</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 有i位置  i+ 1   X  .</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (str[i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;X&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">						i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">					} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">						i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">					}</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> light;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div>`,27);function m(s,g,h,b,v,P){const o=e,t=C("ClientOnly");return l(),r("div",null,[d,y(t,null,{default:A(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),B(o,{key:0,article:s.$frontmatter},null,8,["article"])):E("",!0)]}),_:1}),u])}const j=c(F,[["render",m]]);export{_ as __pageData,j as default};
