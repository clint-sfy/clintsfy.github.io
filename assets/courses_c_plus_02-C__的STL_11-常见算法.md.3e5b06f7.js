import{_ as c}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as t,v as l,b as r,t as y,O as i,F as p,L as C,R as A,M as F,C as D,B}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const P=JSON.parse('{"title":"C++的常见算法","description":"","frontmatter":{"title":"C++的常见算法","author":"阿源","date":"2023/02/16 21:29","categories":["C++基础快速入门"],"tags":["C++","C++基础","数据结构与算法"]},"headers":[],"relativePath":"courses/c_plus/02-C++的STL/11-常见算法.md","filePath":"courses/c_plus/02-C++的STL/11-常见算法.md","lastUpdated":1691397650000}'),d={name:"courses/c_plus/02-C++的STL/11-常见算法.md"},u=p("h1",{id:"常见算法",tabindex:"-1"},[C("常见算法 "),p("a",{class:"header-anchor",href:"#常见算法","aria-label":'Permalink to "常见算法"'},"​")],-1),E=A(`<h2 id="常见遍历算法" tabindex="-1">常见遍历算法 <a class="header-anchor" href="#常见遍历算法" aria-label="Permalink to &quot;常见遍历算法&quot;">​</a></h2><h3 id="_1、-for-each遍历算法" tabindex="-1">1、 for_each遍历算法 <a class="header-anchor" href="#_1、-for-each遍历算法" aria-label="Permalink to &quot;1、 for_each遍历算法&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 遍历算法 遍历容器元素</span></span>
<span class="line"><span style="color:#768390;">3 @param beg 开始迭代器</span></span>
<span class="line"><span style="color:#768390;">4 @param end 结束迭代器</span></span>
<span class="line"><span style="color:#768390;">5 @param _callback 函数回调或者函数对象</span></span>
<span class="line"><span style="color:#768390;">6 @return 函数对象</span></span>
<span class="line"><span style="color:#768390;">7 */</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">for_each</span><span style="color:#ADBAC7;">(iterator beg, iterator end, _callback);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 遍历算法 遍历容器元素</span></span>
<span class="line"><span style="color:#6A737D;">3 @param beg 开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">4 @param end 结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">5 @param _callback 函数回调或者函数对象</span></span>
<span class="line"><span style="color:#6A737D;">6 @return 函数对象</span></span>
<span class="line"><span style="color:#6A737D;">7 */</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">for_each</span><span style="color:#24292E;">(iterator beg, iterator end, _callback);</span></span></code></pre></div><h3 id="_2、transform算法" tabindex="-1">2、transform算法 <a class="header-anchor" href="#_2、transform算法" aria-label="Permalink to &quot;2、transform算法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 transform算法 将指定容器区间元素搬运到另一容器中</span></span>
<span class="line"><span style="color:#adbac7;">2 注意 : transform 不会给目标容器分配内存，所以需要我们提前分配好内存</span></span>
<span class="line"><span style="color:#adbac7;">3 @param beg1 源容器开始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">4 @param end1 源容器结束迭代器</span></span>
<span class="line"><span style="color:#adbac7;">5 @param beg2 目标容器开始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">6 @param _cakkback 回调函数或者函数对象</span></span>
<span class="line"><span style="color:#adbac7;">7 @return 返回目标容器迭代器</span></span>
<span class="line"><span style="color:#adbac7;">8 */</span></span>
<span class="line"><span style="color:#adbac7;">9 transform(iterator beg1, iterator end1, iterator beg2, _callbakc);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 transform算法 将指定容器区间元素搬运到另一容器中</span></span>
<span class="line"><span style="color:#24292e;">2 注意 : transform 不会给目标容器分配内存，所以需要我们提前分配好内存</span></span>
<span class="line"><span style="color:#24292e;">3 @param beg1 源容器开始迭代器</span></span>
<span class="line"><span style="color:#24292e;">4 @param end1 源容器结束迭代器</span></span>
<span class="line"><span style="color:#24292e;">5 @param beg2 目标容器开始迭代器</span></span>
<span class="line"><span style="color:#24292e;">6 @param _cakkback 回调函数或者函数对象</span></span>
<span class="line"><span style="color:#24292e;">7 @return 返回目标容器迭代器</span></span>
<span class="line"><span style="color:#24292e;">8 */</span></span>
<span class="line"><span style="color:#24292e;">9 transform(iterator beg1, iterator end1, iterator beg2, _callbakc);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 int myTransInt01(int val)</span></span>
<span class="line"><span style="color:#adbac7;">2 {</span></span>
<span class="line"><span style="color:#adbac7;">3 return val;</span></span>
<span class="line"><span style="color:#adbac7;">4 }</span></span>
<span class="line"><span style="color:#adbac7;">5</span></span>
<span class="line"><span style="color:#adbac7;">6 void test01()</span></span>
<span class="line"><span style="color:#adbac7;">7 {</span></span>
<span class="line"><span style="color:#adbac7;">8 vector&lt;int&gt; v1;</span></span>
<span class="line"><span style="color:#adbac7;">9 v1.push_back(10);</span></span>
<span class="line"><span style="color:#adbac7;">10 v1.push_back(70);</span></span>
<span class="line"><span style="color:#adbac7;">11 v1.push_back(30);</span></span>
<span class="line"><span style="color:#adbac7;">12 v1.push_back(50);</span></span>
<span class="line"><span style="color:#adbac7;">13 v1.push_back(90);</span></span>
<span class="line"><span style="color:#adbac7;">14</span></span>
<span class="line"><span style="color:#adbac7;">15</span></span>
<span class="line"><span style="color:#adbac7;">16 vector&lt;int&gt; v2;</span></span>
<span class="line"><span style="color:#adbac7;">17 v2.resize(v1.size());</span></span>
<span class="line"><span style="color:#adbac7;">18 transform(v1.begin(), v1.end(), v2.begin(), myTransInt01);</span></span>
<span class="line"><span style="color:#adbac7;">19 printVectorInt(v2);</span></span>
<span class="line"><span style="color:#adbac7;">20 }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 int myTransInt01(int val)</span></span>
<span class="line"><span style="color:#24292e;">2 {</span></span>
<span class="line"><span style="color:#24292e;">3 return val;</span></span>
<span class="line"><span style="color:#24292e;">4 }</span></span>
<span class="line"><span style="color:#24292e;">5</span></span>
<span class="line"><span style="color:#24292e;">6 void test01()</span></span>
<span class="line"><span style="color:#24292e;">7 {</span></span>
<span class="line"><span style="color:#24292e;">8 vector&lt;int&gt; v1;</span></span>
<span class="line"><span style="color:#24292e;">9 v1.push_back(10);</span></span>
<span class="line"><span style="color:#24292e;">10 v1.push_back(70);</span></span>
<span class="line"><span style="color:#24292e;">11 v1.push_back(30);</span></span>
<span class="line"><span style="color:#24292e;">12 v1.push_back(50);</span></span>
<span class="line"><span style="color:#24292e;">13 v1.push_back(90);</span></span>
<span class="line"><span style="color:#24292e;">14</span></span>
<span class="line"><span style="color:#24292e;">15</span></span>
<span class="line"><span style="color:#24292e;">16 vector&lt;int&gt; v2;</span></span>
<span class="line"><span style="color:#24292e;">17 v2.resize(v1.size());</span></span>
<span class="line"><span style="color:#24292e;">18 transform(v1.begin(), v1.end(), v2.begin(), myTransInt01);</span></span>
<span class="line"><span style="color:#24292e;">19 printVectorInt(v2);</span></span>
<span class="line"><span style="color:#24292e;">20 }</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">10 70 30 50 90</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">10 70 30 50 90</span></span></code></pre></div><h2 id="常见查找算法" tabindex="-1">常见查找算法 <a class="header-anchor" href="#常见查找算法" aria-label="Permalink to &quot;常见查找算法&quot;">​</a></h2><h3 id="_1、find算法-查找元素" tabindex="-1">1、find算法 查找元素 <a class="header-anchor" href="#_1、find算法-查找元素" aria-label="Permalink to &quot;1、find算法 查找元素&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 /*</span></span>
<span class="line"><span style="color:#adbac7;">2 find算法 查找元素</span></span>
<span class="line"><span style="color:#adbac7;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#adbac7;">5 @param value 查找的元素</span></span>
<span class="line"><span style="color:#adbac7;">6 @return 返回查找元素的位置</span></span>
<span class="line"><span style="color:#adbac7;">7 */</span></span>
<span class="line"><span style="color:#adbac7;">8 find(iterator beg, iterator end, value)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 /*</span></span>
<span class="line"><span style="color:#24292e;">2 find算法 查找元素</span></span>
<span class="line"><span style="color:#24292e;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#24292e;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#24292e;">5 @param value 查找的元素</span></span>
<span class="line"><span style="color:#24292e;">6 @return 返回查找元素的位置</span></span>
<span class="line"><span style="color:#24292e;">7 */</span></span>
<span class="line"><span style="color:#24292e;">8 find(iterator beg, iterator end, value)</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL15.png" alt=""></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">string</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Person</span></span>
<span class="line"><span style="color:#ADBAC7;">3 {</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">friend</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test03</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">private:</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> num;</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> string name;</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">public:</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(){}</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> num, string name){</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> num;</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> name;</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">bool</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">operator</span><span style="color:#F69D50;">==</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Person</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#F69D50;">ob</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> ((</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> ob.num) </span><span style="color:#F47067;">&amp;&amp;</span><span style="color:#ADBAC7;"> (</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> ob.name));</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> };</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test03</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">Person</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> v1;</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;lucy&quot;</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">101</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;bob&quot;</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">102</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;tom&quot;</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span></span>
<span class="line"><span style="color:#6CB6FF;">27</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">Person</span><span style="color:#ADBAC7;">&gt;::iterator ret;</span></span>
<span class="line"><span style="color:#6CB6FF;">28</span><span style="color:#768390;"> //find 查找自定义数据类型 需要重载==</span></span>
<span class="line"><span style="color:#6CB6FF;">29</span><span style="color:#ADBAC7;"> ret </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">find</span><span style="color:#ADBAC7;">(v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), </span><span style="color:#DCBDFB;">Person</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">101</span><span style="color:#ADBAC7;">,</span><span style="color:#96D0FF;">&quot;bob&quot;</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;">(ret </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">())</span></span>
<span class="line"><span style="color:#6CB6FF;">31</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;查找的数据:&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">ret).num</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">ret).name</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">33</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">34</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">string</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span></span>
<span class="line"><span style="color:#24292E;">3 {</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test03</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> string name;</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num, string name){</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">==</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">ob</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ((</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ob.num) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ob.name));</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#005CC5;">19</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test03</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Person</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lucy&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;bob&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">102</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;tom&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">26</span></span>
<span class="line"><span style="color:#005CC5;">27</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">&gt;::iterator ret;</span></span>
<span class="line"><span style="color:#005CC5;">28</span><span style="color:#6A737D;"> //find 查找自定义数据类型 需要重载==</span></span>
<span class="line"><span style="color:#005CC5;">29</span><span style="color:#24292E;"> ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;bob&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">30</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(ret </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#005CC5;">31</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">32</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;查找的数据:&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ret).num</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ret).name</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">33</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">34</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="_2、find-if算法-条件查找" tabindex="-1">2、find_if算法 条件查找 <a class="header-anchor" href="#_2、find-if算法-条件查找" aria-label="Permalink to &quot;2、find_if算法 条件查找&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#768390;">3 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#768390;">4 @param callback 回调函数或者谓词(返回bool类型的函数对象)</span></span>
<span class="line"><span style="color:#768390;">5 @return bool 查找返回true 否则false</span></span>
<span class="line"><span style="color:#768390;">6 */</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">find_if</span><span style="color:#ADBAC7;">(iterator beg, iterator end, _callback);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">3 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">4 @param callback 回调函数或者谓词(返回bool类型的函数对象)</span></span>
<span class="line"><span style="color:#6A737D;">5 @return bool 查找返回true 否则false</span></span>
<span class="line"><span style="color:#6A737D;">6 */</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find_if</span><span style="color:#24292E;">(iterator beg, iterator end, _callback);</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test04</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v1;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">70</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">90</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;::iterator ret;</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> ret </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">find_if</span><span style="color:#ADBAC7;">(v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), </span><span style="color:#DCBDFB;">bind2nd</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">greater</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;(),</span><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;">) );</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;">(ret </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">())</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;查找的数据:&quot;</span><span style="color:#F47067;">&lt;&lt;*</span><span style="color:#ADBAC7;">ret</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test04</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">70</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">90</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator ret;</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find_if</span><span style="color:#24292E;">(v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">bind2nd</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">greater</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(),</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">) );</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(ret </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;查找的数据:&quot;</span><span style="color:#D73A49;">&lt;&lt;*</span><span style="color:#24292E;">ret</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> }</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">70</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">70</span></span></code></pre></div><h3 id="_3、adjacent-find算法-查找相邻重复元素" tabindex="-1">3、adjacent_find算法 查找相邻重复元素 <a class="header-anchor" href="#_3、adjacent-find算法-查找相邻重复元素" aria-label="Permalink to &quot;3、adjacent_find算法 查找相邻重复元素&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#768390;">3 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#768390;">4 @param _callback 回调函数或者谓词(返回bool类型的函数对象)</span></span>
<span class="line"><span style="color:#768390;">5 @return 返回相邻元素的第一个位置的迭代器</span></span>
<span class="line"><span style="color:#768390;">6 */</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">adjacent_find</span><span style="color:#ADBAC7;">(iterator beg, iterator end, _callback);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">3 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">4 @param _callback 回调函数或者谓词(返回bool类型的函数对象)</span></span>
<span class="line"><span style="color:#6A737D;">5 @return 返回相邻元素的第一个位置的迭代器</span></span>
<span class="line"><span style="color:#6A737D;">6 */</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">adjacent_find</span><span style="color:#24292E;">(iterator beg, iterator end, _callback);</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL16.png" alt=""></p><h3 id="_4、binary-search算法-二分查找法" tabindex="-1">4、binary_search算法 二分查找法 <a class="header-anchor" href="#_4、binary-search算法-二分查找法" aria-label="Permalink to &quot;4、binary_search算法 二分查找法&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 注意: 在无序序列中不可用</span></span>
<span class="line"><span style="color:#768390;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#768390;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#768390;">5 @param value 查找的元素</span></span>
<span class="line"><span style="color:#768390;">6 @return bool 查找返回true 否则false</span></span>
<span class="line"><span style="color:#768390;">7 */</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">bool</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">binary_search</span><span style="color:#ADBAC7;">(iterator beg, iterator end, value);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 注意: 在无序序列中不可用</span></span>
<span class="line"><span style="color:#6A737D;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">5 @param value 查找的元素</span></span>
<span class="line"><span style="color:#6A737D;">6 @return bool 查找返回true 否则false</span></span>
<span class="line"><span style="color:#6A737D;">7 */</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">binary_search</span><span style="color:#24292E;">(iterator beg, iterator end, value);</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL17.png" alt=""></p><h3 id="_5、count算法-统计元素出现次数" tabindex="-1">5、count算法 统计元素出现次数 <a class="header-anchor" href="#_5、count算法-统计元素出现次数" aria-label="Permalink to &quot;5、count算法 统计元素出现次数&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 /*</span></span>
<span class="line"><span style="color:#adbac7;">2 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">3 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#adbac7;">4 @param value</span></span>
<span class="line"><span style="color:#adbac7;">5 @return int返回元素个数</span></span>
<span class="line"><span style="color:#adbac7;">6 */</span></span>
<span class="line"><span style="color:#adbac7;">7 count(iterator beg, iterator end, value)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 /*</span></span>
<span class="line"><span style="color:#24292e;">2 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#24292e;">3 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#24292e;">4 @param value</span></span>
<span class="line"><span style="color:#24292e;">5 @return int返回元素个数</span></span>
<span class="line"><span style="color:#24292e;">6 */</span></span>
<span class="line"><span style="color:#24292e;">7 count(iterator beg, iterator end, value)</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL18.png" alt=""></p><h3 id="_6、count-if算法-统计元素出现次数" tabindex="-1">6、count_if算法 统计元素出现次数 <a class="header-anchor" href="#_6、count-if算法-统计元素出现次数" aria-label="Permalink to &quot;6、count_if算法 统计元素出现次数&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 count_if算法 统计元素出现次数</span></span>
<span class="line"><span style="color:#768390;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#768390;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#768390;">5 @param callback 回调函数或者谓词(返回bool类型的函数对象)</span></span>
<span class="line"><span style="color:#768390;">6 @return int返回元素个数</span></span>
<span class="line"><span style="color:#768390;">7 */</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">count_if</span><span style="color:#ADBAC7;">(iterator beg, iterator end, _callback);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 count_if算法 统计元素出现次数</span></span>
<span class="line"><span style="color:#6A737D;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">5 @param callback 回调函数或者谓词(返回bool类型的函数对象)</span></span>
<span class="line"><span style="color:#6A737D;">6 @return int返回元素个数</span></span>
<span class="line"><span style="color:#6A737D;">7 */</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count_if</span><span style="color:#24292E;">(iterator beg, iterator end, _callback);</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL19.png" alt=""></p><h2 id="常用排序算法" tabindex="-1">常用排序算法 <a class="header-anchor" href="#常用排序算法" aria-label="Permalink to &quot;常用排序算法&quot;">​</a></h2><h3 id="_1、merge算法-容器元素合并" tabindex="-1"><strong>1、merge算法 容器元素合并</strong> <a class="header-anchor" href="#_1、merge算法-容器元素合并" aria-label="Permalink to &quot;**1、merge算法 容器元素合并**&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 merge算法 容器元素合并，并存储到另一容器中</span></span>
<span class="line"><span style="color:#768390;">3 注意:两个容器必须是有序的</span></span>
<span class="line"><span style="color:#768390;">4 @param beg1 容器1开始迭代器</span></span>
<span class="line"><span style="color:#768390;">5 @param end1 容器1结束迭代器</span></span>
<span class="line"><span style="color:#768390;">6 @param beg2 容器2开始迭代器</span></span>
<span class="line"><span style="color:#768390;">7 @param end2 容器2结束迭代器</span></span>
<span class="line"><span style="color:#768390;">8 @param dest 目标容器开始迭代器</span></span>
<span class="line"><span style="color:#768390;">9 */</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">merge</span><span style="color:#ADBAC7;">(iterator beg1, iterator end1, iterator beg2, iterator end2, iterat </span><span style="color:#F47067;">or</span><span style="color:#ADBAC7;"> dest)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 merge算法 容器元素合并，并存储到另一容器中</span></span>
<span class="line"><span style="color:#6A737D;">3 注意:两个容器必须是有序的</span></span>
<span class="line"><span style="color:#6A737D;">4 @param beg1 容器1开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">5 @param end1 容器1结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">6 @param beg2 容器2开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">7 @param end2 容器2结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">8 @param dest 目标容器开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">9 */</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(iterator beg1, iterator end1, iterator beg2, iterator end2, iterat </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> dest)</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL20.png" alt=""></p><h3 id="_2、sort算法-容器元素排序" tabindex="-1">2、sort算法 容器元素排序 <a class="header-anchor" href="#_2、sort算法-容器元素排序" aria-label="Permalink to &quot;2、sort算法 容器元素排序&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 sort算法 容器元素排序</span></span>
<span class="line"><span style="color:#768390;">3 @param beg 容器1开始迭代器</span></span>
<span class="line"><span style="color:#768390;">4 @param end 容器1结束迭代器</span></span>
<span class="line"><span style="color:#768390;">5 @param _callback 回调函数或者谓词(返回bool类型的函数对象)</span></span>
<span class="line"><span style="color:#768390;">6 */</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sort</span><span style="color:#ADBAC7;">(iterator beg, iterator end, _callback)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 sort算法 容器元素排序</span></span>
<span class="line"><span style="color:#6A737D;">3 @param beg 容器1开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">4 @param end 容器1结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">5 @param _callback 回调函数或者谓词(返回bool类型的函数对象)</span></span>
<span class="line"><span style="color:#6A737D;">6 */</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(iterator beg, iterator end, _callback)</span></span></code></pre></div><h3 id="_3、random-shuffle算法-对指定范围内的元素随机调整次序" tabindex="-1">3、random_shuffle算法 对指定范围内的元素随机调整次序 <a class="header-anchor" href="#_3、random-shuffle算法-对指定范围内的元素随机调整次序" aria-label="Permalink to &quot;3、random_shuffle算法 对指定范围内的元素随机调整次序&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 /*</span></span>
<span class="line"><span style="color:#adbac7;">2 random_shuffle算法 对指定范围内的元素随机调整次序</span></span>
<span class="line"><span style="color:#adbac7;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#adbac7;">5 */</span></span>
<span class="line"><span style="color:#adbac7;">6 random_shuffle(iterator beg, iterator end)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 /*</span></span>
<span class="line"><span style="color:#24292e;">2 random_shuffle算法 对指定范围内的元素随机调整次序</span></span>
<span class="line"><span style="color:#24292e;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#24292e;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#24292e;">5 */</span></span>
<span class="line"><span style="color:#24292e;">6 random_shuffle(iterator beg, iterator end)</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL21.png" alt=""></p><h3 id="_4、reverse算法-反转指定范围的元素" tabindex="-1">4、reverse算法 反转指定范围的元素 <a class="header-anchor" href="#_4、reverse算法-反转指定范围的元素" aria-label="Permalink to &quot;4、reverse算法 反转指定范围的元素&quot;">​</a></h3><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL22.png" alt=""></p><h2 id="常见拷贝替换算法" tabindex="-1">常见拷贝替换算法 <a class="header-anchor" href="#常见拷贝替换算法" aria-label="Permalink to &quot;常见拷贝替换算法&quot;">​</a></h2><h3 id="_1、copy算法" tabindex="-1"><strong>1、copy算法</strong> <a class="header-anchor" href="#_1、copy算法" aria-label="Permalink to &quot;**1、copy算法**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 /*</span></span>
<span class="line"><span style="color:#adbac7;">2 copy算法 将容器内指定范围的元素拷贝到另一容器中</span></span>
<span class="line"><span style="color:#adbac7;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#adbac7;">5 @param dest 目标起始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">6 */</span></span>
<span class="line"><span style="color:#adbac7;">7 copy(iterator beg, iterator end, iterator dest)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 /*</span></span>
<span class="line"><span style="color:#24292e;">2 copy算法 将容器内指定范围的元素拷贝到另一容器中</span></span>
<span class="line"><span style="color:#24292e;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#24292e;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#24292e;">5 @param dest 目标起始迭代器</span></span>
<span class="line"><span style="color:#24292e;">6 */</span></span>
<span class="line"><span style="color:#24292e;">7 copy(iterator beg, iterator end, iterator dest)</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL23.png" alt=""></p><h3 id="_2、replace算法" tabindex="-1">2、replace算法 <a class="header-anchor" href="#_2、replace算法" aria-label="Permalink to &quot;2、replace算法&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 replace算法 将容器内指定范围的旧元素修改为新元素</span></span>
<span class="line"><span style="color:#768390;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#768390;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#768390;">5 @param oldvalue 旧元素</span></span>
<span class="line"><span style="color:#768390;">6 @param oldvalue 新元素</span></span>
<span class="line"><span style="color:#768390;">7 */</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">replace</span><span style="color:#ADBAC7;">(iterator beg, iterator end, oldvalue, newvalue)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 replace算法 将容器内指定范围的旧元素修改为新元素</span></span>
<span class="line"><span style="color:#6A737D;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">5 @param oldvalue 旧元素</span></span>
<span class="line"><span style="color:#6A737D;">6 @param oldvalue 新元素</span></span>
<span class="line"><span style="color:#6A737D;">7 */</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(iterator beg, iterator end, oldvalue, newvalue)</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL24.png" alt=""></p><h3 id="_3、-replace-if算法" tabindex="-1">3、 replace_if算法 <a class="header-anchor" href="#_3、-replace-if算法" aria-label="Permalink to &quot;3、 replace_if算法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 /*</span></span>
<span class="line"><span style="color:#adbac7;">2 replace_if算法 将容器内指定范围满足条件的元素替换为新元素</span></span>
<span class="line"><span style="color:#adbac7;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#adbac7;">5 @param callback函数回调或者谓词(返回Bool类型的函数对象)</span></span>
<span class="line"><span style="color:#adbac7;">6 @param oldvalue 新元素</span></span>
<span class="line"><span style="color:#adbac7;">7 */</span></span>
<span class="line"><span style="color:#adbac7;">8 replace_if(iterator beg, iterator end, _callback, newvalue)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 /*</span></span>
<span class="line"><span style="color:#24292e;">2 replace_if算法 将容器内指定范围满足条件的元素替换为新元素</span></span>
<span class="line"><span style="color:#24292e;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#24292e;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#24292e;">5 @param callback函数回调或者谓词(返回Bool类型的函数对象)</span></span>
<span class="line"><span style="color:#24292e;">6 @param oldvalue 新元素</span></span>
<span class="line"><span style="color:#24292e;">7 */</span></span>
<span class="line"><span style="color:#24292e;">8 replace_if(iterator beg, iterator end, _callback, newvalue)</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">GreaterThan30</span></span>
<span class="line"><span style="color:#ADBAC7;">2 {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">public:</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">bool</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">operator</span><span style="color:#F69D50;">()</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">value</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> value</span><span style="color:#F47067;">&gt;</span><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> };</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test16</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v1;</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">70</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">90</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), </span><span style="color:#DCBDFB;">ostream_iterator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;(cout, </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">) );</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">replace_if</span><span style="color:#ADBAC7;">(v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), </span><span style="color:#DCBDFB;">GreaterThan30</span><span style="color:#ADBAC7;">() , </span><span style="color:#6CB6FF;">3000</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), </span><span style="color:#DCBDFB;">ostream_iterator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;(cout, </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">) );</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GreaterThan30</span></span>
<span class="line"><span style="color:#24292E;">2 {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">()</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test16</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">70</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">90</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">ostream_iterator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(cout, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">) );</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">21</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">replace_if</span><span style="color:#24292E;">(v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">GreaterThan30</span><span style="color:#24292E;">() , </span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">23</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">ostream_iterator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(cout, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">) );</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="_4、swap算法" tabindex="-1">4、swap算法 <a class="header-anchor" href="#_4、swap算法" aria-label="Permalink to &quot;4、swap算法&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 swap算法 互换两个容器的元素</span></span>
<span class="line"><span style="color:#768390;">3 @param c1容器1</span></span>
<span class="line"><span style="color:#768390;">4 @param c2容器2</span></span>
<span class="line"><span style="color:#768390;">5 */</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">swap</span><span style="color:#ADBAC7;">(container c1, container c2)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 swap算法 互换两个容器的元素</span></span>
<span class="line"><span style="color:#6A737D;">3 @param c1容器1</span></span>
<span class="line"><span style="color:#6A737D;">4 @param c2容器2</span></span>
<span class="line"><span style="color:#6A737D;">5 */</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(container c1, container c2)</span></span></code></pre></div><h2 id="常用算数生成算法" tabindex="-1">常用算数生成算法 <a class="header-anchor" href="#常用算数生成算法" aria-label="Permalink to &quot;常用算数生成算法&quot;">​</a></h2><h3 id="_1、accumulate算法-计算容器元素累计总和" tabindex="-1">1、accumulate算法 计算容器元素累计总和 <a class="header-anchor" href="#_1、accumulate算法-计算容器元素累计总和" aria-label="Permalink to &quot;1、accumulate算法 计算容器元素累计总和&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 accumulate算法 计算容器元素累计总和</span></span>
<span class="line"><span style="color:#768390;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#768390;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#768390;">5 @param value累加值 （注意：求和完后 + value）</span></span>
<span class="line"><span style="color:#768390;">6 */</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">accumulate</span><span style="color:#ADBAC7;">(iterator beg, iterator end, value)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 accumulate算法 计算容器元素累计总和</span></span>
<span class="line"><span style="color:#6A737D;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">5 @param value累加值 （注意：求和完后 + value）</span></span>
<span class="line"><span style="color:#6A737D;">6 */</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">accumulate</span><span style="color:#24292E;">(iterator beg, iterator end, value)</span></span></code></pre></div><h3 id="_2、fill算法-向容器中添加元素" tabindex="-1">2、fill算法 向容器中添加元素 <a class="header-anchor" href="#_2、fill算法-向容器中添加元素" aria-label="Permalink to &quot;2、fill算法 向容器中添加元素&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 fill算法 向容器中添加元素</span></span>
<span class="line"><span style="color:#768390;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#768390;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#768390;">5 @param value t填充元素</span></span>
<span class="line"><span style="color:#768390;">6 */</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">fill</span><span style="color:#ADBAC7;">(iterator beg, iterator end, value)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 fill算法 向容器中添加元素</span></span>
<span class="line"><span style="color:#6A737D;">3 @param beg 容器开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">4 @param end 容器结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">5 @param value t填充元素</span></span>
<span class="line"><span style="color:#6A737D;">6 */</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(iterator beg, iterator end, value)</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c_plus/STL25.png" alt=""></p><h2 id="常用集合算法" tabindex="-1">常用集合算法 <a class="header-anchor" href="#常用集合算法" aria-label="Permalink to &quot;常用集合算法&quot;">​</a></h2><h3 id="_1、set-intersection求两个set集合的交集" tabindex="-1">1、set_intersection求两个set集合的交集 <a class="header-anchor" href="#_1、set-intersection求两个set集合的交集" aria-label="Permalink to &quot;1、set_intersection求两个set集合的交集&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 set_intersection算法 求两个set集合的交集</span></span>
<span class="line"><span style="color:#768390;">3 注意:两个集合必须是有序序列</span></span>
<span class="line"><span style="color:#768390;">4 @param beg1 容器1开始迭代器</span></span>
<span class="line"><span style="color:#768390;">5 @param end1 容器1结束迭代器</span></span>
<span class="line"><span style="color:#768390;">6 @param beg2 容器2开始迭代器</span></span>
<span class="line"><span style="color:#768390;">7 @param end2 容器2结束迭代器</span></span>
<span class="line"><span style="color:#768390;">8 @param dest 目标容器开始迭代器</span></span>
<span class="line"><span style="color:#768390;">9 @return 目标容器的最后一个元素的迭代器地址</span></span>
<span class="line"><span style="color:#768390;">10 */</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">set_intersection</span><span style="color:#ADBAC7;">(iterator beg1, iterator end1, iterator beg2, iterator end2,</span><span style="color:#F47067;">\\</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> iterator dest)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 set_intersection算法 求两个set集合的交集</span></span>
<span class="line"><span style="color:#6A737D;">3 注意:两个集合必须是有序序列</span></span>
<span class="line"><span style="color:#6A737D;">4 @param beg1 容器1开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">5 @param end1 容器1结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">6 @param beg2 容器2开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">7 @param end2 容器2结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">8 @param dest 目标容器开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">9 @return 目标容器的最后一个元素的迭代器地址</span></span>
<span class="line"><span style="color:#6A737D;">10 */</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set_intersection</span><span style="color:#24292E;">(iterator beg1, iterator end1, iterator beg2, iterator end2,</span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> iterator dest)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 void test18()</span></span>
<span class="line"><span style="color:#adbac7;">2 {</span></span>
<span class="line"><span style="color:#adbac7;">3 vector&lt;int&gt; v1;</span></span>
<span class="line"><span style="color:#adbac7;">4 v1.push_back(1);</span></span>
<span class="line"><span style="color:#adbac7;">5 v1.push_back(3);</span></span>
<span class="line"><span style="color:#adbac7;">6 v1.push_back(5);</span></span>
<span class="line"><span style="color:#adbac7;">7 v1.push_back(7);</span></span>
<span class="line"><span style="color:#adbac7;">8 v1.push_back(9);</span></span>
<span class="line"><span style="color:#adbac7;">9</span></span>
<span class="line"><span style="color:#adbac7;">10 vector&lt;int&gt; v2;</span></span>
<span class="line"><span style="color:#adbac7;">11 v2.push_back(7);</span></span>
<span class="line"><span style="color:#adbac7;">12 v2.push_back(9);</span></span>
<span class="line"><span style="color:#adbac7;">13 v2.push_back(11);</span></span>
<span class="line"><span style="color:#adbac7;">14 v2.push_back(13);</span></span>
<span class="line"><span style="color:#adbac7;">15 v2.push_back(15);</span></span>
<span class="line"><span style="color:#adbac7;">16</span></span>
<span class="line"><span style="color:#adbac7;">17 vector&lt;int&gt; v3;//存放交集</span></span>
<span class="line"><span style="color:#adbac7;">18 v3.resize( min(v1.size(), v2.size()));</span></span>
<span class="line"><span style="color:#adbac7;">19</span></span>
<span class="line"><span style="color:#adbac7;">20 vector&lt;int&gt;::iterator ret;</span></span>
<span class="line"><span style="color:#adbac7;">21 ret = set_intersection(v1.begin(), v1.end(), v2.begin(),v2.end(), v3.begin());</span></span>
<span class="line"><span style="color:#adbac7;">22 copy(v3.begin(), ret, ostream_iterator&lt;int&gt;(cout, &quot; &quot;) );</span></span>
<span class="line"><span style="color:#adbac7;">23 cout&lt;&lt;endl;</span></span>
<span class="line"><span style="color:#adbac7;">24 }</span></span>
<span class="line"><span style="color:#adbac7;">25</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1 void test18()</span></span>
<span class="line"><span style="color:#24292e;">2 {</span></span>
<span class="line"><span style="color:#24292e;">3 vector&lt;int&gt; v1;</span></span>
<span class="line"><span style="color:#24292e;">4 v1.push_back(1);</span></span>
<span class="line"><span style="color:#24292e;">5 v1.push_back(3);</span></span>
<span class="line"><span style="color:#24292e;">6 v1.push_back(5);</span></span>
<span class="line"><span style="color:#24292e;">7 v1.push_back(7);</span></span>
<span class="line"><span style="color:#24292e;">8 v1.push_back(9);</span></span>
<span class="line"><span style="color:#24292e;">9</span></span>
<span class="line"><span style="color:#24292e;">10 vector&lt;int&gt; v2;</span></span>
<span class="line"><span style="color:#24292e;">11 v2.push_back(7);</span></span>
<span class="line"><span style="color:#24292e;">12 v2.push_back(9);</span></span>
<span class="line"><span style="color:#24292e;">13 v2.push_back(11);</span></span>
<span class="line"><span style="color:#24292e;">14 v2.push_back(13);</span></span>
<span class="line"><span style="color:#24292e;">15 v2.push_back(15);</span></span>
<span class="line"><span style="color:#24292e;">16</span></span>
<span class="line"><span style="color:#24292e;">17 vector&lt;int&gt; v3;//存放交集</span></span>
<span class="line"><span style="color:#24292e;">18 v3.resize( min(v1.size(), v2.size()));</span></span>
<span class="line"><span style="color:#24292e;">19</span></span>
<span class="line"><span style="color:#24292e;">20 vector&lt;int&gt;::iterator ret;</span></span>
<span class="line"><span style="color:#24292e;">21 ret = set_intersection(v1.begin(), v1.end(), v2.begin(),v2.end(), v3.begin());</span></span>
<span class="line"><span style="color:#24292e;">22 copy(v3.begin(), ret, ostream_iterator&lt;int&gt;(cout, &quot; &quot;) );</span></span>
<span class="line"><span style="color:#24292e;">23 cout&lt;&lt;endl;</span></span>
<span class="line"><span style="color:#24292e;">24 }</span></span>
<span class="line"><span style="color:#24292e;">25</span></span></code></pre></div><h3 id="_2、-set-union算法-求两个set集合的并集" tabindex="-1">2、 set_union算法 求两个set集合的并集 <a class="header-anchor" href="#_2、-set-union算法-求两个set集合的并集" aria-label="Permalink to &quot;2、 set_union算法 求两个set集合的并集&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> /*</span></span>
<span class="line"><span style="color:#768390;">2 set_union算法 求两个set集合的并集</span></span>
<span class="line"><span style="color:#768390;">3 注意:两个集合必须是有序序列</span></span>
<span class="line"><span style="color:#768390;">4 @param beg1 容器1开始迭代器</span></span>
<span class="line"><span style="color:#768390;">5 @param end1 容器1结束迭代器</span></span>
<span class="line"><span style="color:#768390;">6 @param beg2 容器2开始迭代器</span></span>
<span class="line"><span style="color:#768390;">7 @param end2 容器2结束迭代器</span></span>
<span class="line"><span style="color:#768390;">8 @param dest 目标容器开始迭代器</span></span>
<span class="line"><span style="color:#768390;">9 @return 目标容器的最后一个元素的迭代器地址</span></span>
<span class="line"><span style="color:#768390;">10 */</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">set_union</span><span style="color:#ADBAC7;">(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> /*</span></span>
<span class="line"><span style="color:#6A737D;">2 set_union算法 求两个set集合的并集</span></span>
<span class="line"><span style="color:#6A737D;">3 注意:两个集合必须是有序序列</span></span>
<span class="line"><span style="color:#6A737D;">4 @param beg1 容器1开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">5 @param end1 容器1结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">6 @param beg2 容器2开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">7 @param end2 容器2结束迭代器</span></span>
<span class="line"><span style="color:#6A737D;">8 @param dest 目标容器开始迭代器</span></span>
<span class="line"><span style="color:#6A737D;">9 @return 目标容器的最后一个元素的迭代器地址</span></span>
<span class="line"><span style="color:#6A737D;">10 */</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set_union</span><span style="color:#24292E;">(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span></span>
<span class="line"><span style="color:#005CC5;">12</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test18</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v1;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v2;</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> v2.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> v2.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> v2.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> v2.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> v2.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v3;</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> v3.</span><span style="color:#DCBDFB;">resize</span><span style="color:#ADBAC7;">( v1.</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;">v2.</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;::iterator ret;</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> ret </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">set_union</span><span style="color:#ADBAC7;">(v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), v2.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(),v2.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), v3.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(v3.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), ret, </span><span style="color:#DCBDFB;">ostream_iterator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;(cout, </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">) );</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test18</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v2;</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">15</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">16</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v3;</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> v3.</span><span style="color:#6F42C1;">resize</span><span style="color:#24292E;">( v1.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">v2.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#005CC5;">19</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator ret;</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set_union</span><span style="color:#24292E;">(v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), v2.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(),v2.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), v3.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(v3.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), ret, </span><span style="color:#6F42C1;">ostream_iterator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(cout, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">) );</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="_3、set-difference算法-求两个set集合的差集" tabindex="-1">3、set_difference算法 求两个set集合的差集 <a class="header-anchor" href="#_3、set-difference算法-求两个set集合的差集" aria-label="Permalink to &quot;3、set_difference算法 求两个set集合的差集&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed has-diff vp-code-dark"><code><span class="line"><span style="color:#adbac7;">1 /*</span></span>
<span class="line"><span style="color:#adbac7;">2 set_difference算法 求两个set集合的差集</span></span>
<span class="line"><span style="color:#adbac7;">3 注意:两个集合必须是有序序列</span></span>
<span class="line"><span style="color:#adbac7;">4 @param beg1 容器1开始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">5 @param end1 容器1结束迭代器</span></span>
<span class="line"><span style="color:#adbac7;">6 @param beg2 容器2开始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">7 @param end2 容器2结束迭代器</span></span>
<span class="line"><span style="color:#adbac7;">8 @param dest 目标容器开始迭代器</span></span>
<span class="line"><span style="color:#adbac7;">9 @return 目标容器的最后一个元素的迭代器地址</span></span>
<span class="line"><span style="color:#adbac7;">10 */</span></span>
<span class="line"><span style="color:#adbac7;">11 set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292e;">1 /*</span></span>
<span class="line"><span style="color:#24292e;">2 set_difference算法 求两个set集合的差集</span></span>
<span class="line"><span style="color:#24292e;">3 注意:两个集合必须是有序序列</span></span>
<span class="line"><span style="color:#24292e;">4 @param beg1 容器1开始迭代器</span></span>
<span class="line"><span style="color:#24292e;">5 @param end1 容器1结束迭代器</span></span>
<span class="line"><span style="color:#24292e;">6 @param beg2 容器2开始迭代器</span></span>
<span class="line"><span style="color:#24292e;">7 @param end2 容器2结束迭代器</span></span>
<span class="line"><span style="color:#24292e;">8 @param dest 目标容器开始迭代器</span></span>
<span class="line"><span style="color:#24292e;">9 @return 目标容器的最后一个元素的迭代器地址</span></span>
<span class="line"><span style="color:#24292e;">10 */</span></span>
<span class="line"><span style="color:#24292e;">11 set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed has-diff vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test18</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v1;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v2;</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> v2.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> v2.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> v2.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> v2.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> v2.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v3;</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> v3.</span><span style="color:#DCBDFB;">resize</span><span style="color:#ADBAC7;">( v1.</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;::iterator ret;</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> ret </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">set_difference</span><span style="color:#ADBAC7;">(v1.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), v1.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), v2.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(),v2.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), v3.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(v3.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), ret, </span><span style="color:#DCBDFB;">ostream_iterator</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;(cout, </span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#ADBAC7;">) );</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test18</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v2;</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> v2.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">15</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">16</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v3;</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> v3.</span><span style="color:#6F42C1;">resize</span><span style="color:#24292E;">( v1.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#005CC5;">19</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator ret;</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set_difference</span><span style="color:#24292E;">(v1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), v1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), v2.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(),v2.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), v3.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(v3.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), ret, </span><span style="color:#6F42C1;">ostream_iterator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(cout, </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">) );</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="综合案例-竞技比赛" tabindex="-1">综合案例--竞技比赛 <a class="header-anchor" href="#综合案例-竞技比赛" aria-label="Permalink to &quot;综合案例--竞技比赛&quot;">​</a></h2><p>某市举行一场跳水比赛，共有24个人参加。比赛共三轮，前两轮为淘汰赛，第三轮为决赛。</p><p>比赛方式：分组比赛，每组6个人；选手每次要随机分组，进行比赛；</p><p>第一轮分为4个小组，每组6个人。比如编号为: 100-123. 整体进行抽签（draw）后顺序演讲。当小组演讲完后，淘汰组内排名最后的三个选手，然后继续下一个小组的比赛。</p><p>第二轮分为2个小组，每组6人。比赛完毕，淘汰组内排名最后的三个选手，然后继续下一个小组的比赛。</p><p>第三轮只剩下1组6个人，本轮为决赛，选出前三名。 比赛评分：10个评委打分，去除最低、最高分，求平均分每个选手演讲完由10个评委分别打分。该选手的最终得分是去掉一个最高分和一个最低分，求得剩下的8个成绩的平均分。选手的名次按得分降序排列。</p><p>需求分析： 1) 产生选手 （ ABCDEFGHIJKLMNOPQRSTUVWX ） 姓名、得分；选手编号</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">iostream</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">string</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">vector</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">map</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">algorithm</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">stdlib.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">time.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">deque</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">using</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">namespace</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">std</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Player</span></span>
<span class="line"><span style="color:#ADBAC7;">11 {</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">friend</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">playGame</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> index,vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">v, map</span><span style="color:#F47067;">&lt;int</span><span style="color:#ADBAC7;">,Player</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">m, vect</span></span>
<span class="line"><span style="color:#F47067;">or&lt;int&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">v1);</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">private:</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> num;</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> string name;</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">float</span><span style="color:#ADBAC7;"> score[</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">];</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">public:</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Player</span><span style="color:#ADBAC7;">(){}</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Player</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> num, string name)</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> num;</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">‐</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> name;</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;"> };</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createPlayer</span><span style="color:#ADBAC7;">(vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">v, map</span><span style="color:#F47067;">&lt;int</span><span style="color:#ADBAC7;">,Player</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">m)</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">27</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> i</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;"> string seedName</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;ABCDEFGHIJKLMNOPQRSTUVWX&quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">29</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;">(i</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i</span><span style="color:#F47067;">&lt;</span><span style="color:#6CB6FF;">24</span><span style="color:#ADBAC7;">; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">31</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;"> num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> num</span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;">i;</span></span>
<span class="line"><span style="color:#6CB6FF;">33</span><span style="color:#ADBAC7;"> string tmpName </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;选手&quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">34</span><span style="color:#ADBAC7;"> tmpName </span><span style="color:#F47067;">+=</span><span style="color:#ADBAC7;"> seedName[i];</span></span>
<span class="line"><span style="color:#6CB6FF;">35</span></span>
<span class="line"><span style="color:#6CB6FF;">36</span><span style="color:#ADBAC7;"> v.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">(num);</span></span>
<span class="line"><span style="color:#6CB6FF;">37</span><span style="color:#ADBAC7;"> m.</span><span style="color:#DCBDFB;">insert</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">make_pair</span><span style="color:#ADBAC7;">(num, </span><span style="color:#DCBDFB;">Player</span><span style="color:#ADBAC7;">(num,tmpName)));</span></span>
<span class="line"><span style="color:#6CB6FF;">38</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">39</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">40</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">playGame</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> index,vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">v, map</span><span style="color:#F47067;">&lt;int</span><span style="color:#ADBAC7;">,Player</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">m, vector</span><span style="color:#F47067;">&lt;int&gt;</span></span>
<span class="line"><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">v1)</span></span>
<span class="line"><span style="color:#6CB6FF;">41</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">42</span><span style="color:#768390;"> //选手编号随机分组</span></span>
<span class="line"><span style="color:#6CB6FF;">43</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">srand</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">time</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">44</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">random_shuffle</span><span style="color:#ADBAC7;">(v.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(), v.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#6CB6FF;">45</span></span>
<span class="line"><span style="color:#6CB6FF;">46</span><span style="color:#768390;"> //每名选手比赛</span></span>
<span class="line"><span style="color:#6CB6FF;">47</span><span style="color:#ADBAC7;"> multimap</span><span style="color:#F47067;">&lt;float</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">, greater</span><span style="color:#F47067;">&lt;float&gt;&gt;</span><span style="color:#ADBAC7;"> mul;</span><span style="color:#768390;">//存放每组的分数‐‐编号</span></span>
<span class="line"><span style="color:#6CB6FF;">48</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> count </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">49</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">vector</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">&gt;::iterator it</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">v.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">50</span></span>
<span class="line"><span style="color:#6CB6FF;">51</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;‐‐‐‐‐‐‐‐‐第&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">index</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;轮比赛‐‐‐‐‐‐‐‐‐‐‐&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">52</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;">(;it</span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;">v.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(); it</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">53</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">54</span><span style="color:#ADBAC7;"> count</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">55</span><span style="color:#768390;"> //定义deque容器 存放评委打分</span></span>
<span class="line"><span style="color:#6CB6FF;">56</span><span style="color:#ADBAC7;"> deque</span><span style="color:#F47067;">&lt;float&gt;</span><span style="color:#ADBAC7;"> d;</span></span>
<span class="line"><span style="color:#6CB6FF;">57</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> i</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">58</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;">(i</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;i</span><span style="color:#F47067;">&lt;</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">;i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">59</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;"> d.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">( (</span><span style="color:#F47067;">float</span><span style="color:#ADBAC7;">)(</span><span style="color:#DCBDFB;">rand</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">%</span><span style="color:#6CB6FF;">41</span><span style="color:#F47067;">+</span><span style="color:#6CB6FF;">60</span><span style="color:#ADBAC7;">) );</span></span>
<span class="line"><span style="color:#6CB6FF;">61</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">62</span><span style="color:#768390;"> //排序</span></span>
<span class="line"><span style="color:#6CB6FF;">63</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">sort</span><span style="color:#ADBAC7;">(d.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(),d.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#6CB6FF;">64</span><span style="color:#768390;"> //去掉最高、最低分</span></span>
<span class="line"><span style="color:#6CB6FF;">65</span><span style="color:#ADBAC7;"> d.</span><span style="color:#DCBDFB;">pop_back</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">66</span><span style="color:#ADBAC7;"> d.</span><span style="color:#DCBDFB;">pop_front</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">67</span><span style="color:#768390;"> //求平均分</span></span>
<span class="line"><span style="color:#6CB6FF;">68</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">float</span><span style="color:#ADBAC7;"> avg </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">accumulate</span><span style="color:#ADBAC7;">(d.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">(),d.</span><span style="color:#DCBDFB;">end</span><span style="color:#ADBAC7;">(), </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#F47067;">/</span><span style="color:#ADBAC7;">d.</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">69</span><span style="color:#768390;"> //将平均分 赋值给m中选手</span></span>
<span class="line"><span style="color:#6CB6FF;">70</span><span style="color:#ADBAC7;"> m[</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">it].score[index‐</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">] </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> avg;</span></span>
<span class="line"><span style="color:#6CB6FF;">71</span><span style="color:#ADBAC7;"> mul.</span><span style="color:#DCBDFB;">insert</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">make_pair</span><span style="color:#ADBAC7;">(avg, </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">it));</span></span>
<span class="line"><span style="color:#6CB6FF;">72</span></span>
<span class="line"><span style="color:#6CB6FF;">73</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;">(count</span><span style="color:#F47067;">%</span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span><span style="color:#768390;">//刚好一组</span></span>
<span class="line"><span style="color:#6CB6FF;">74</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">75</span><span style="color:#768390;"> //分析竞技名单</span></span>
<span class="line"><span style="color:#6CB6FF;">76</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">\\t</span><span style="color:#96D0FF;">第&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">count</span><span style="color:#F47067;">/</span><span style="color:#6CB6FF;">6</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;组的晋级名单:&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">77</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> i</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">78</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">multimap</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">float</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">greater</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">float</span><span style="color:#ADBAC7;">&gt;&gt;::iterator mit</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">mul.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">79</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;">(i</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;i</span><span style="color:#F47067;">&lt;</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">;i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">,mit</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">80</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">81</span><span style="color:#ADBAC7;"> v1.</span><span style="color:#DCBDFB;">push_back</span><span style="color:#ADBAC7;">( (</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">mit).second);</span></span>
<span class="line"><span style="color:#6CB6FF;">82</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">\\t\\t</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">mit).second</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">mit).first</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">83</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">84</span><span style="color:#768390;"> //打印当前组的得分情况</span></span>
<span class="line"><span style="color:#6CB6FF;">85</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">\\t</span><span style="color:#96D0FF;">第&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">count</span><span style="color:#F47067;">/</span><span style="color:#6CB6FF;">6</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;组的得分情况:&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">86</span><span style="color:#ADBAC7;"> mit</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">mul.</span><span style="color:#DCBDFB;">begin</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">87</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;">(i</span><span style="color:#F47067;">=</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;i</span><span style="color:#F47067;">&lt;</span><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;">;i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">, mit</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">88</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">89</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> num </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">mit).second;</span></span>
<span class="line"><span style="color:#6CB6FF;">90</span><span style="color:#ADBAC7;"> cout</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">\\t\\t</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">num</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">m[num].name</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#96D0FF;">&quot; &quot;</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">m[num].score[index‐</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">]</span><span style="color:#F47067;">&lt;&lt;</span><span style="color:#ADBAC7;">endl;</span></span>
<span class="line"><span style="color:#6CB6FF;">91</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">92</span></span>
<span class="line"><span style="color:#6CB6FF;">93</span></span>
<span class="line"><span style="color:#6CB6FF;">94</span><span style="color:#ADBAC7;"> mul.</span><span style="color:#DCBDFB;">clear</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#6CB6FF;">95</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">96</span></span>
<span class="line"><span style="color:#6CB6FF;">97</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">98</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">99</span></span>
<span class="line"><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> argc, </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">argv[])</span></span>
<span class="line"><span style="color:#6CB6FF;">101</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">102</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v;</span><span style="color:#768390;">//存放选手编号</span></span>
<span class="line"><span style="color:#6CB6FF;">103</span><span style="color:#ADBAC7;"> map</span><span style="color:#F47067;">&lt;int</span><span style="color:#ADBAC7;">,Player</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> m;</span><span style="color:#768390;">//存放编号‐‐选手信息</span></span>
<span class="line"><span style="color:#6CB6FF;">104</span></span>
<span class="line"><span style="color:#6CB6FF;">105</span><span style="color:#768390;"> //创建选手</span></span>
<span class="line"><span style="color:#6CB6FF;">106</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createPlayer</span><span style="color:#ADBAC7;">(v, m);</span></span>
<span class="line"><span style="color:#6CB6FF;">107</span></span>
<span class="line"><span style="color:#6CB6FF;">108</span><span style="color:#768390;"> //比赛</span></span>
<span class="line"><span style="color:#6CB6FF;">109</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v1;</span><span style="color:#768390;">//存放晋级的编号</span></span>
<span class="line"><span style="color:#6CB6FF;">110</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">playGame</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">,v,m, v1);</span></span>
<span class="line"><span style="color:#6CB6FF;">111</span></span>
<span class="line"><span style="color:#6CB6FF;">112</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v2;</span><span style="color:#768390;">//存放晋级的编号</span></span>
<span class="line"><span style="color:#6CB6FF;">113</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">playGame</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">,v1,m, v2);</span></span>
<span class="line"><span style="color:#6CB6FF;">114</span></span>
<span class="line"><span style="color:#6CB6FF;">115</span><span style="color:#ADBAC7;"> vector</span><span style="color:#F47067;">&lt;int&gt;</span><span style="color:#ADBAC7;"> v3;</span><span style="color:#768390;">//存放晋级的编号</span></span>
<span class="line"><span style="color:#6CB6FF;">116</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">playGame</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;">,v2,m, v3);</span></span>
<span class="line"><span style="color:#6CB6FF;">117</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">118</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">iostream</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">string</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">vector</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">map</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">algorithm</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">stdlib.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">time.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">deque</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Player</span></span>
<span class="line"><span style="color:#24292E;">11 {</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">playGame</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index,vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">v, map</span><span style="color:#D73A49;">&lt;int</span><span style="color:#24292E;">,Player</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">m, vect</span></span>
<span class="line"><span style="color:#D73A49;">or&lt;int&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">v1);</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> string name;</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> score[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Player</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Player</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num, string name)</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num;</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">‐</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPlayer</span><span style="color:#24292E;">(vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">v, map</span><span style="color:#D73A49;">&lt;int</span><span style="color:#24292E;">,Player</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">m)</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">27</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">28</span><span style="color:#24292E;"> string seedName</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ABCDEFGHIJKLMNOPQRSTUVWX&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">29</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">24</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">30</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">31</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">32</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">i;</span></span>
<span class="line"><span style="color:#005CC5;">33</span><span style="color:#24292E;"> string tmpName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;选手&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">34</span><span style="color:#24292E;"> tmpName </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> seedName[i];</span></span>
<span class="line"><span style="color:#005CC5;">35</span></span>
<span class="line"><span style="color:#005CC5;">36</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(num);</span></span>
<span class="line"><span style="color:#005CC5;">37</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">make_pair</span><span style="color:#24292E;">(num, </span><span style="color:#6F42C1;">Player</span><span style="color:#24292E;">(num,tmpName)));</span></span>
<span class="line"><span style="color:#005CC5;">38</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">39</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">40</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">playGame</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index,vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">v, map</span><span style="color:#D73A49;">&lt;int</span><span style="color:#24292E;">,Player</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">m, vector</span><span style="color:#D73A49;">&lt;int&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">v1)</span></span>
<span class="line"><span style="color:#005CC5;">41</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">42</span><span style="color:#6A737D;"> //选手编号随机分组</span></span>
<span class="line"><span style="color:#005CC5;">43</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">srand</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">time</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">44</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">random_shuffle</span><span style="color:#24292E;">(v.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(), v.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#005CC5;">45</span></span>
<span class="line"><span style="color:#005CC5;">46</span><span style="color:#6A737D;"> //每名选手比赛</span></span>
<span class="line"><span style="color:#005CC5;">47</span><span style="color:#24292E;"> multimap</span><span style="color:#D73A49;">&lt;float</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, greater</span><span style="color:#D73A49;">&lt;float&gt;&gt;</span><span style="color:#24292E;"> mul;</span><span style="color:#6A737D;">//存放每组的分数‐‐编号</span></span>
<span class="line"><span style="color:#005CC5;">48</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">49</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator it</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">50</span></span>
<span class="line"><span style="color:#005CC5;">51</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;‐‐‐‐‐‐‐‐‐第&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">index</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;轮比赛‐‐‐‐‐‐‐‐‐‐‐&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">52</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(;it</span><span style="color:#D73A49;">!=</span><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(); it</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">53</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">54</span><span style="color:#24292E;"> count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">55</span><span style="color:#6A737D;"> //定义deque容器 存放评委打分</span></span>
<span class="line"><span style="color:#005CC5;">56</span><span style="color:#24292E;"> deque</span><span style="color:#D73A49;">&lt;float&gt;</span><span style="color:#24292E;"> d;</span></span>
<span class="line"><span style="color:#005CC5;">57</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">58</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">59</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">60</span><span style="color:#24292E;"> d.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">( (</span><span style="color:#D73A49;">float</span><span style="color:#24292E;">)(</span><span style="color:#6F42C1;">rand</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">41</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">) );</span></span>
<span class="line"><span style="color:#005CC5;">61</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">62</span><span style="color:#6A737D;"> //排序</span></span>
<span class="line"><span style="color:#005CC5;">63</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(d.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(),d.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#005CC5;">64</span><span style="color:#6A737D;"> //去掉最高、最低分</span></span>
<span class="line"><span style="color:#005CC5;">65</span><span style="color:#24292E;"> d.</span><span style="color:#6F42C1;">pop_back</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">66</span><span style="color:#24292E;"> d.</span><span style="color:#6F42C1;">pop_front</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">67</span><span style="color:#6A737D;"> //求平均分</span></span>
<span class="line"><span style="color:#005CC5;">68</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> avg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">accumulate</span><span style="color:#24292E;">(d.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(),d.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">d.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">69</span><span style="color:#6A737D;"> //将平均分 赋值给m中选手</span></span>
<span class="line"><span style="color:#005CC5;">70</span><span style="color:#24292E;"> m[</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">it].score[index‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> avg;</span></span>
<span class="line"><span style="color:#005CC5;">71</span><span style="color:#24292E;"> mul.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">make_pair</span><span style="color:#24292E;">(avg, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">it));</span></span>
<span class="line"><span style="color:#005CC5;">72</span></span>
<span class="line"><span style="color:#005CC5;">73</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(count</span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//刚好一组</span></span>
<span class="line"><span style="color:#005CC5;">74</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">75</span><span style="color:#6A737D;"> //分析竞技名单</span></span>
<span class="line"><span style="color:#005CC5;">76</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">第&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">count</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;组的晋级名单:&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">77</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">78</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multimap</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">float</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">greater</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">float</span><span style="color:#24292E;">&gt;&gt;::iterator mit</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">mul.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">79</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">,mit</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">80</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">81</span><span style="color:#24292E;"> v1.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">( (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">mit).second);</span></span>
<span class="line"><span style="color:#005CC5;">82</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t\\t</span><span style="color:#032F62;">&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">mit).second</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">mit).first</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">83</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">84</span><span style="color:#6A737D;"> //打印当前组的得分情况</span></span>
<span class="line"><span style="color:#005CC5;">85</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">第&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">count</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;组的得分情况:&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">86</span><span style="color:#24292E;"> mit</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">mul.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">87</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">, mit</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">88</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">89</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">mit).second;</span></span>
<span class="line"><span style="color:#005CC5;">90</span><span style="color:#24292E;"> cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t\\t</span><span style="color:#032F62;">&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">num</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">m[num].name</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">m[num].score[index‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#005CC5;">91</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">92</span></span>
<span class="line"><span style="color:#005CC5;">93</span></span>
<span class="line"><span style="color:#005CC5;">94</span><span style="color:#24292E;"> mul.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">95</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">96</span></span>
<span class="line"><span style="color:#005CC5;">97</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">98</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">99</span></span>
<span class="line"><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> argc, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">argv[])</span></span>
<span class="line"><span style="color:#005CC5;">101</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">102</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v;</span><span style="color:#6A737D;">//存放选手编号</span></span>
<span class="line"><span style="color:#005CC5;">103</span><span style="color:#24292E;"> map</span><span style="color:#D73A49;">&lt;int</span><span style="color:#24292E;">,Player</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m;</span><span style="color:#6A737D;">//存放编号‐‐选手信息</span></span>
<span class="line"><span style="color:#005CC5;">104</span></span>
<span class="line"><span style="color:#005CC5;">105</span><span style="color:#6A737D;"> //创建选手</span></span>
<span class="line"><span style="color:#005CC5;">106</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPlayer</span><span style="color:#24292E;">(v, m);</span></span>
<span class="line"><span style="color:#005CC5;">107</span></span>
<span class="line"><span style="color:#005CC5;">108</span><span style="color:#6A737D;"> //比赛</span></span>
<span class="line"><span style="color:#005CC5;">109</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v1;</span><span style="color:#6A737D;">//存放晋级的编号</span></span>
<span class="line"><span style="color:#005CC5;">110</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">playGame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,v,m, v1);</span></span>
<span class="line"><span style="color:#005CC5;">111</span></span>
<span class="line"><span style="color:#005CC5;">112</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v2;</span><span style="color:#6A737D;">//存放晋级的编号</span></span>
<span class="line"><span style="color:#005CC5;">113</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">playGame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,v1,m, v2);</span></span>
<span class="line"><span style="color:#005CC5;">114</span></span>
<span class="line"><span style="color:#005CC5;">115</span><span style="color:#24292E;"> vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v3;</span><span style="color:#6A737D;">//存放晋级的编号</span></span>
<span class="line"><span style="color:#005CC5;">116</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">playGame</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,v2,m, v3);</span></span>
<span class="line"><span style="color:#005CC5;">117</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">118</span><span style="color:#24292E;"> }</span></span></code></pre></div>`,75);function b(s,g,v,m,h,k){const o=c,e=F("ClientOnly");return l(),r("div",null,[u,y(e,null,{default:i(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(l(),D(o,{key:0,article:s.$frontmatter},null,8,["article"])):B("",!0)]}),_:1}),E])}const x=t(d,[["render",b]]);export{P as __pageData,x as default};
