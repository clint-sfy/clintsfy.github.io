import{_ as c}from"./chunks/ArticleMetadata.59a467b2.js";import{_ as t,v as l,b as r,t as y,O as C,F as p,L as A,R as i,M as F,C as D,B}from"./chunks/framework.5cbdba25.js";import"./chunks/md5.02486a14.js";const L=JSON.parse('{"title":"C语言动态内存申请","description":"","frontmatter":{"title":"C语言动态内存申请","author":"阿源","date":"2023/01/06 11:15","categories":["C基础快速入门"],"tags":["C","C基础"]},"headers":[],"relativePath":"courses/c/01-C语言基础/06-动态内存申请.md","filePath":"courses/c/01-C语言基础/06-动态内存申请.md","lastUpdated":1691327334000}'),d={name:"courses/c/01-C语言基础/06-动态内存申请.md"},E=p("h1",{id:"动态内存申请",tabindex:"-1"},[A("动态内存申请 "),p("a",{class:"header-anchor",href:"#动态内存申请","aria-label":'Permalink to "动态内存申请"'},"​")],-1),h=i(`<h2 id="动态内存申请的api" tabindex="-1">动态内存申请的API <a class="header-anchor" href="#动态内存申请的api" aria-label="Permalink to &quot;动态内存申请的API&quot;">​</a></h2><h3 id="_1、malloc申请-堆区空间" tabindex="-1">1、malloc申请 堆区空间 <a class="header-anchor" href="#_1、malloc申请-堆区空间" aria-label="Permalink to &quot;1、malloc申请 堆区空间&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">stdlib.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#DCBDFB;">malloc</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">size_t</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">size</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> size表示申请的空间字节数</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> 函数的返回值：</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> 成功：返回值空间起始地址</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> 失败：</span><span style="color:#6CB6FF;">NULL</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">stdlib.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> size表示申请的空间字节数</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> 函数的返回值：</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> 成功：返回值空间起始地址</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> 失败：</span><span style="color:#005CC5;">NULL</span></span></code></pre></div><p><strong>特点：malloc申请的堆区空间 不自动清0</strong></p><p><strong>案例1：申请int空间</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">P </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">malloc</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">P </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">))</span></span></code></pre></div><h3 id="_2、free释放堆区空间" tabindex="-1">2、free释放堆区空间 <a class="header-anchor" href="#_2、free释放堆区空间" aria-label="Permalink to &quot;2、free释放堆区空间&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">stdlib.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">free</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#F69D50;">ptr</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> ptr需要释放的堆区空间的起始地址</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">stdlib.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ptr</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> ptr需要释放的堆区空间的起始地址</span></span></code></pre></div><h3 id="_3、memset内存设置函数" tabindex="-1">3、memset内存设置函数 <a class="header-anchor" href="#_3、memset内存设置函数" aria-label="Permalink to &quot;3、memset内存设置函数&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">string.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#DCBDFB;">memset</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#F69D50;">s</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">c</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">size_t</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">n</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> s就是空间的起始地址</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> n就是空间的字节宽度</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> c空间中每个字节 填充的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">string.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">s</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> s就是空间的起始地址</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> n就是空间的字节宽度</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> c空间中每个字节 填充的值</span></span></code></pre></div><p><strong>案例2：动态数组</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">string.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test02</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> n </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;请输入int元素的个数:&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">scanf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">&amp;</span><span style="color:#ADBAC7;">n);</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#768390;"> //根据元素的个数申请空间</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">malloc</span><span style="color:#ADBAC7;">(n </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (p </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#768390;"> //将堆区空间清0</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">memset</span><span style="color:#ADBAC7;">(p, </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, n </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#768390;"> //获取键盘输入</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> n; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">scanf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, p </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> i);</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">24</span></span>
<span class="line"><span style="color:#6CB6FF;">25</span><span style="color:#768390;"> //遍历数组元素</span></span>
<span class="line"><span style="color:#6CB6FF;">26</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">for</span><span style="color:#ADBAC7;"> (i </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">; i </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> n; i</span><span style="color:#F47067;">++</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">27</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">28</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">%d</span><span style="color:#96D0FF;"> &quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">p</span><span style="color:#ADBAC7;">[i]);</span><span style="color:#768390;"> //*(p+i)</span></span>
<span class="line"><span style="color:#6CB6FF;">29</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">30</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;</span><span style="color:#F47067;">\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">31</span></span>
<span class="line"><span style="color:#6CB6FF;">32</span><span style="color:#768390;"> //释放空间</span></span>
<span class="line"><span style="color:#6CB6FF;">33</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">free</span><span style="color:#ADBAC7;">(p);</span></span>
<span class="line"><span style="color:#6CB6FF;">34</span></span>
<span class="line"><span style="color:#6CB6FF;">35</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">36</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">string.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test02</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入int元素的个数:&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">n);</span></span>
<span class="line"><span style="color:#005CC5;">7</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#6A737D;"> //根据元素的个数申请空间</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#6A737D;"> //将堆区空间清0</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(p, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, n </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">17</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#6A737D;"> //获取键盘输入</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">24</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#6A737D;"> //遍历数组元素</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">27</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">28</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> &quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">p</span><span style="color:#24292E;">[i]);</span><span style="color:#6A737D;"> //*(p+i)</span></span>
<span class="line"><span style="color:#005CC5;">29</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">30</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">31</span></span>
<span class="line"><span style="color:#005CC5;">32</span><span style="color:#6A737D;"> //释放空间</span></span>
<span class="line"><span style="color:#005CC5;">33</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#005CC5;">34</span></span>
<span class="line"><span style="color:#005CC5;">35</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">36</span><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="_4、calloc-函数" tabindex="-1">4、calloc 函数 <a class="header-anchor" href="#_4、calloc-函数" aria-label="Permalink to &quot;4、calloc 函数&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">stdlib.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">size_t</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">nmemb</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">size_t</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">size</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> nmemb：内存的块数</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> size：每一块的字节数</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> 返回值：成功为堆区空间起始地址 失败为NULL</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span><span style="color:#ADBAC7;"> calloc会对申请的空间 自动清0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">stdlib.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nmemb</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> nmemb：内存的块数</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> size：每一块的字节数</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> 返回值：成功为堆区空间起始地址 失败为NULL</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#24292E;"> calloc会对申请的空间 自动清0</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">malloc</span><span style="color:#ADBAC7;">(n</span><span style="color:#F47067;">*sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(n, </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(n</span><span style="color:#D73A49;">*sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(n, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">));</span></span></code></pre></div><h3 id="_5、realloc函数-追加空间" tabindex="-1">5、realloc函数 追加空间 <a class="header-anchor" href="#_5、realloc函数-追加空间" aria-label="Permalink to &quot;5、realloc函数 追加空间&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> #include </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;">stdlib.h</span><span style="color:#F47067;">&gt;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#DCBDFB;">realloc</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#F69D50;">ptr</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">size_t</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">size</span><span style="color:#ADBAC7;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">stdlib.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">realloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ptr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">);</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(n, </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> new_n </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">realloc</span><span style="color:#ADBAC7;">(p, (n </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> new_n) </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(n, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> new_n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">realloc</span><span style="color:#24292E;">(p, (n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> new_n) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">));</span></span></code></pre></div><p><img src="https://cdn.staticaly.com/gh/clint-sfy/blogcdn@master/img/c/%E5%86%85%E5%AD%98%E5%8A%A8%E6%80%81%E7%94%B3%E8%AF%B71.png" alt=""></p><h2 id="内存泄漏" tabindex="-1">内存泄漏 <a class="header-anchor" href="#内存泄漏" aria-label="Permalink to &quot;内存泄漏&quot;">​</a></h2><p>申请的内存，首地址丢了，找不了，再也没法使用了，也没法释放了，这块内存就被泄露了</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p;</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> p</span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">malloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#768390;"> //接下来，可以用 p 指向的内存了</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#ADBAC7;"> p</span><span style="color:#F47067;">=</span><span style="color:#96D0FF;">&quot;hello world&quot;</span><span style="color:#ADBAC7;">;</span><span style="color:#768390;">//p 指向别的地方了</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#768390;"> //从此以后，再也找不到你申请的 100 个字节了。则动态申请的 100 个字节就被泄露了</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> p</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#6A737D;"> //接下来，可以用 p 指向的内存了</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> p</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//p 指向别的地方了</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#6A737D;"> //从此以后，再也找不到你申请的 100 个字节了。则动态申请的 100 个字节就被泄露了</span></span></code></pre></div><h2 id="内存的回顾" tabindex="-1">内存的回顾 <a class="header-anchor" href="#内存的回顾" aria-label="Permalink to &quot;内存的回顾&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#768390;"> //在32位平台</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test05</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span><span style="color:#768390;"> //字符数组 在栈区 开辟12字节 存放&quot;hello world&quot;</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> str1</span><span style="color:#F47067;">[]</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;hello world&quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#768390;"> //str2字符指针变量 在栈区 4B 保存文字常量区&quot;hello world&quot;的首元素地址</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">str2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;hello world&quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#768390;"> //str3字符指针变量 在栈区 4B 保存堆区128B空间的起始地址</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">str3 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">char</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">128</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#768390;"> //将字符串&quot;hello world&quot;拷贝到str3指向的堆区空间</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">strcpy</span><span style="color:#ADBAC7;">(str3, </span><span style="color:#96D0FF;">&quot;hello world&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#6A737D;"> //在32位平台</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test05</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#6A737D;"> //字符数组 在栈区 开辟12字节 存放&quot;hello world&quot;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> str1</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#6A737D;"> //str2字符指针变量 在栈区 4B 保存文字常量区&quot;hello world&quot;的首元素地址</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">str2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#6A737D;"> //str3字符指针变量 在栈区 4B 保存堆区128B空间的起始地址</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">str3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#6A737D;"> //将字符串&quot;hello world&quot;拷贝到str3指向的堆区空间</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(str3, </span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">14</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="标准的空间释放" tabindex="-1">标准的空间释放 <a class="header-anchor" href="#标准的空间释放" aria-label="Permalink to &quot;标准的空间释放&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark-dimmed vp-code-dark"><code><span class="line"><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">test07</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">4</span></span>
<span class="line"><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;"> p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> (</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">)</span><span style="color:#DCBDFB;">calloc</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">sizeof</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">int</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#6CB6FF;">6</span></span>
<span class="line"><span style="color:#6CB6FF;">7</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">100</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">8</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">printf</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;*p = </span><span style="color:#F47067;">%d\\n</span><span style="color:#96D0FF;">&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">*</span><span style="color:#ADBAC7;">p);</span></span>
<span class="line"><span style="color:#6CB6FF;">9</span></span>
<span class="line"><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (p </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">11</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">free</span><span style="color:#ADBAC7;">(p);</span></span>
<span class="line"><span style="color:#6CB6FF;">13</span><span style="color:#ADBAC7;"> p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">14</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">15</span></span>
<span class="line"><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (p </span><span style="color:#F47067;">!=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#6CB6FF;">17</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#6CB6FF;">18</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">free</span><span style="color:#ADBAC7;">(p);</span></span>
<span class="line"><span style="color:#6CB6FF;">19</span><span style="color:#ADBAC7;"> p </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">NULL</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#6CB6FF;">21</span></span>
<span class="line"><span style="color:#6CB6FF;">22</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#6CB6FF;">23</span><span style="color:#ADBAC7;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test07</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;*p = </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p);</span></span>
<span class="line"><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">15</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">18</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">21</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;"> }</span></span></code></pre></div><p>释放free本质功能：回收空间权限</p>`,27);function u(s,g,m,v,b,f){const o=c,e=F("ClientOnly");return l(),r("div",null,[E,y(e,null,{default:C(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),D(o,{key:0,article:s.$frontmatter},null,8,["article"])):B("",!0)]}),_:1}),h])}const z=t(d,[["render",u]]);export{L as __pageData,z as default};
