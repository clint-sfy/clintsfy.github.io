import{_ as l}from"./chunks/ArticleMetadata.B30-49ud.js";import{_ as s,C as n,c as p,o as r,k as c,G as i,P as I,a as m,w as u,b as P,e as h}from"./chunks/framework.CZWML48V.js";import"./chunks/md5.DoRRH4_b.js";const v=JSON.parse('{"title":"SPI","description":"","frontmatter":{"title":"SPI","author":"阿源","date":"2024/02/20 19:30","categories":["MCU"],"tags":["MCU","SPI"]},"headers":[],"relativePath":"courses/mcu/01-单片机基础/10-SPI.md","filePath":"courses/mcu/01-单片机基础/10-SPI.md","lastUpdated":1725370172000}'),f={name:"courses/mcu/01-单片机基础/10-SPI.md"};function C(t,e,M,N,_,O){const S=l,d=n("ClientOnly");return r(),p("div",null,[e[0]||(e[0]=c("h1",{id:"spi",tabindex:"-1"},[m("SPI "),c("a",{class:"header-anchor",href:"#spi","aria-label":'Permalink to "SPI"'},"​")],-1)),i(d,null,{default:u(()=>{var a,o;return[(((a=t.$frontmatter)==null?void 0:a.aside)??!0)&&(((o=t.$frontmatter)==null?void 0:o.showArticleMetadata)??!0)?(r(),P(S,{key:0,article:t.$frontmatter},null,8,["article"])):h("",!0)]}),_:1}),e[1]||(e[1]=I('<p>SPI协议是由摩托罗拉公司提出的通讯协议(Serial Peripheral Interface)，即<code>串行外围设备接口</code>， 是一种高速全双工的通信总线。它被广泛地使用在ADC、LCD等设备与MCU间，要求通讯速率较高的场合。   学习本章时，可与I2C章节对比阅读，体会两种通讯总线的差异以及EEPROM存储器与FLASH存储器的区别。下面我们分别对SPI协议的物理层及协议层进行讲解。</p><h2 id="物理层" tabindex="-1">物理层 <a class="header-anchor" href="#物理层" aria-label="Permalink to &quot;物理层&quot;">​</a></h2><ul><li><p>所有SPI设备的SCK、MOSI、MISO分别连在一起</p></li><li><p>主机另外引出多条SS控制线，分别接到各从机的SS引脚</p></li><li><p><code>输出引脚配置为推挽输出</code>，<code>输入引脚配置为浮空或上拉输入</code></p></li></ul><p>I2C要实现半双工，经常要切换输入输出，而且I2C又要实现多主机的时钟同步和总线仲裁，所以只能选择开漏</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240823105250.png" alt=""></p><p>SPI通讯使用3条总线及片选线，3条总线分别为SCK、MOSI、MISO，片选线为SS，它们的作用介绍如下：</p><p>(1) SS ( Slave Select）：从<code>设备选择信号线</code>，常称为<code>片选信号线</code>，也称为NSS、CS，以下用NSS表示。当有多个SPI从设备与SPI主机相连时， 设备的其它信号线SCK、MOSI及MISO同时并联到相同的SPI总线上，即无论有多少个从设备，都共同只使用这3条总线； 而每个从设备都有独立的这一条NSS信号线，本信号线独占主机的一个引脚，即<code>有多少个从设备，就有多少条片选信号线</code>。</p><p>I2C协议中通过设备地址来寻址、选中总线上的某个设备并与其进行通讯；而SPI协议中没有设备地址，它<code>使用NSS信号线来寻址</code>， 当主机要选择从设备时，把<code>该从设备的NSS信号线设置为低电平</code>，该从设备即被选中，<code>即片选有效</code>， 接着主机开始与被选中的从设备进行SPI通讯。所以<code>SPI通讯以NSS线置低电平为开始信号，以NSS线被拉高作为结束信号</code>。</p><p>(2) SCK (Serial Clock)：<code>时钟信号线</code>，用于通讯数据同步。它由通讯主机产生，决定了通讯的速率，不同的设备支持的最高时钟频率不一样， 如STM32的SPI时钟频率最大为fpclk/2，两个设备之间通讯时，通讯速率受限于低速设备。</p><p>(3) MOSI (Master Output， Slave Input)：<code>主设备输出/从设备输入引脚</code>。主机的数据从这条信号线输出， 从机由这条信号线读入主机发送的数据，即这条线上数据的方向为主机到从机。</p><p>(4) MISO (Master Input,，Slave Output)：<code>主设备输入/从设备输出引脚</code>。主机从这条信号线读入数据， 从机的数据由这条信号线输出到主机，即在这条线上数据的方向为从机到主机。</p><p><img src="https://cdn.jsdelivr.net/gh/clint-sfy/blogcdn@master/stm32/base/20240823112621.png" alt=""></p><h2 id="协议层" tabindex="-1">协议层 <a class="header-anchor" href="#协议层" aria-label="Permalink to &quot;协议层&quot;">​</a></h2><h4 id="通讯的起始和停止信号" tabindex="-1">通讯的起始和停止信号 <a class="header-anchor" href="#通讯的起始和停止信号" aria-label="Permalink to &quot;通讯的起始和停止信号&quot;">​</a></h4><p>在图 SPI通讯时序 中的标号处，<code>NSS信号线由高变低，是SPI通讯的起始信号</code>。NSS是每个从机各自独占的信号线， 当从机在自己的NSS线检测到起始信号后，就知道自己被主机选中了，开始准备与主机通讯。在图中的标号处，NSS信号由低变高， 是SPI通讯的停止信号，表示本次通讯结束，从机的选中状态被取消。</p>',15))])}const $=s(f,[["render",C]]);export{v as __pageData,$ as default};
